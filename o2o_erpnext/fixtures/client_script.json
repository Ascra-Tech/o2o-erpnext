[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-10 18:28:19.851964",
  "module": "o2o ErpNext",
  "name": "GST Calculate",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Set vendor filters based on supplier\n        if(frm.doc.supplier) {\n            set_vendor_filters(frm);\n        }\n\n        if (!frm.doc.__islocal) return;\n        \n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_and_set_purchase_order_defaults',\n            freeze: true,\n            freeze_message: __('Validating...'),\n            callback: function(r) {\n                if (r.exc) {\n                    return;\n                }\n                \n                if (r.message && r.message.status === 'success' && r.message.data) {\n                    // Set the default values\n                    if (r.message.data.supplier) {\n                        frm.set_value('supplier', r.message.data.supplier);\n                    }\n                    if (r.message.data.custom_branch) {\n                        frm.set_value('custom_branch', r.message.data.custom_branch);\n                    }\n                    if (r.message.data.custom_sub_branch) {\n                        frm.set_value('custom_sub_branch', r.message.data.custom_sub_branch);\n                    }\n                }\n            }\n        });\n\n        // Hide UI elements\n        $('.form-attachments, .form-tags, .form-share').hide();\n\n        // Remove standard buttons\n        setTimeout(() => {\n            const buttonsToRemove = [\n                'Get Items From',\n                'Update Items',\n                'Payment',\n                'Payment Request',\n                'Purchase Invoice',\n                'Link to Material Request',\n                'Update Rate as per Last Purchase',\n                'Print',\n                'Download',\n                'Hold',\n                'Close'\n            ];\n\n            buttonsToRemove.forEach(btn => frm.remove_custom_button(btn));\n            \n            // Remove menu items\n            const menuItemsToRemove = [\n                'Print',\n                'Email',\n                'Links',\n                'Duplicate',\n                'Send SMS',\n                'Copy to Clipboard',\n                'Reload',\n                'Remind Me',\n                'Undo',\n                'Redo',\n                'Repeat',\n                'New Purchase Order'\n            ];\n\n            menuItemsToRemove.forEach(item => {\n                const selector = `[data-label=\"${encodeURIComponent(item)}\"]`;\n                frm.page.menu.find(selector).parent().parent().remove();\n            });\n        }, 10);\n    },\n\n    validate: function(frm) {\n        frm.set_value(\"custom_created_user\", frm.doc.owner);\n        calculate_and_set_gst_value(frm);\n    },\n\n    onload: function(frm) {\n        updateSupplierCode(frm);\n        updateOrderCode(frm);\n        calculate_and_set_gst_value(frm);\n    },\n\n    supplier: function(frm) {\n        updateSupplierCode(frm);\n        \n        if(frm.doc.supplier) {\n            // Clear vendor when supplier changes\n            frm.set_value('custom_vendor', '');\n            \n            // Set new vendor filters\n            set_vendor_filters(frm);\n        }\n    },\n\n    transaction_date: function(frm) {\n        updateOrderCode(frm);\n    },\n    \n    // New function for custom_branch field\n    custom_branch: function(frm) {\n        if (!frm.doc.custom_branch) return;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Employee',\n                filters: {\n                    'branch': frm.doc.custom_branch,\n                    'custom_roles': ['like', '%PO Approver%']\n                },\n                fields: ['employee_name', 'custom_user_email']\n            },\n            callback: function(response) {\n                if (response.message && response.message.length > 0) {\n                    const employee = response.message[0];\n                    const fullName = employee.employee_name || '';\n                    const userEmail = employee.custom_user_email || '';\n                    \n                    const approverFormat = `${fullName}:${userEmail}`;\n                    frm.set_value('custom__approver_name_and_email', approverFormat);\n                }\n            }\n        });\n    }\n});\n\n// Helper Functions\nfunction updateSupplierCode(frm) {\n    const supplier = frm.doc.supplier;\n    frm.set_value('custom_supplier_code', \n        supplier ? supplier.substring(0, 3).toUpperCase() : '');\n}\n\nfunction updateOrderCode(frm) {\n    if (frm.doc.docstatus !== 0) return;\n    \n    const date = new Date(frm.doc.transaction_date);\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n    const dayOfWeek = days[date.getDay()];\n    const yearYY = date.getFullYear().toString().slice(-2);\n    \n    frm.set_value('custom_order_code', `POA${dayOfWeek}${yearYY}`);\n}\n\n\n\nfunction set_vendor_filters(frm) {\n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.get_supplier_vendors',\n        args: {\n            supplier: frm.doc.supplier\n        },\n        callback: function(r) {\n            if(r.message) {\n                let allowed_vendors = r.message;\n                \n                // Set filters on vendor field\n                frm.set_query('custom_vendor', function() {\n                    return {\n                        filters: {\n                            'name': ['in', allowed_vendors.length ? allowed_vendors : ['NONE']]\n                        }\n                    };\n                });\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-10 18:29:01.082858",
  "module": "o2o ErpNext",
  "name": "GST ITEM CAL",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Add a custom button to calculate GST values\n        frm.add_custom_button(__('Calculate GST'), function() {\n            calculate_gst_values(frm);\n            frappe.show_alert({\n                message: __('GST values calculated successfully'),\n                indicator: 'green'\n            }, 3);\n        }).addClass('btn-primary');\n    },\n    \n    onload: function(frm) {\n        calculate_gst_values(frm);\n    },\n    \n    validate: function(frm) {\n        calculate_gst_values(frm);\n    },\n    \n    // Recalculate when items are added/removed\n    items_add: function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    },\n    \n    items_remove: function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    },\n    \n    // Add direct triggers for tax-related fields\n    items: function(frm, cdt, cdn) {\n        // This will fire when any field in the items table changes\n        calculate_gst_values(frm);\n    },\n    \n    // Add specific field triggers\n    \"items.sgst_amount\": function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    },\n    \n    \"items.cgst_amount\": function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    },\n    \n    \"items.igst_amount\": function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    },\n    \n    \"items.net_amount\": function(frm, cdt, cdn) {\n        calculate_gst_values(frm);\n    }\n});\n\n// Function to calculate GST values for each item and update document totals\nfunction calculate_gst_values(frm) {\n    // Document level totals\n    let doc_total_sgst = 0;\n    let doc_total_cgst = 0;\n    let doc_total_igst = 0;\n    let doc_total_tax = 0;\n    let doc_grand_total = 0;\n    let doc_net_total = 0;\n    \n    // Process each item in the items table\n    $.each(frm.doc.items || [], function(i, item) {\n        // Convert tax values to numbers, defaulting to 0 if null, undefined, or NaN\n        const sgst_amount = parseFloat(item.sgst_amount || 0) || 0;\n        const cgst_amount = parseFloat(item.cgst_amount || 0) || 0;\n        const igst_amount = parseFloat(item.igst_amount || 0) || 0;\n        const net_amount = parseFloat(item.net_amount || 0) || 0;\n        \n        // Calculate item totals\n        const item_total_tax = sgst_amount + cgst_amount + igst_amount;\n        const item_grand_total = net_amount + item_total_tax;\n        \n        // Set custom fields for the item\n        frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', item_total_tax);\n        frappe.model.set_value(item.doctype, item.name, 'custom_grand_total', item_grand_total);\n        \n        // Add to document totals\n        doc_total_sgst += sgst_amount;\n        doc_total_cgst += cgst_amount;\n        doc_total_igst += igst_amount;\n        doc_total_tax += item_total_tax;\n        doc_grand_total += item_grand_total;\n        doc_net_total += net_amount;\n    });\n    \n    // Update document-level custom fields if they exist\n    try {\n        // Set document level custom fields\n        if (frm.doc.hasOwnProperty('custom_total_sgst')) {\n            frm.set_value('custom_total_sgst', doc_total_sgst);\n        }\n        \n        if (frm.doc.hasOwnProperty('custom_total_cgst')) {\n            frm.set_value('custom_total_cgst', doc_total_cgst);\n        }\n        \n        if (frm.doc.hasOwnProperty('custom_total_igst')) {\n            frm.set_value('custom_total_igst', doc_total_igst);\n        }\n        \n        if (frm.doc.hasOwnProperty('custom_total_tax')) {\n            frm.set_value('custom_total_tax', doc_total_tax);\n        }\n        \n        if (frm.doc.hasOwnProperty('custom_net_total')) {\n            frm.set_value('custom_net_total', doc_net_total);\n        }\n        \n        if (frm.doc.hasOwnProperty('custom_grand_total')) {\n            frm.set_value('custom_grand_total', doc_grand_total);\n        }\n        \n        // Refresh the items table after all calculations\n        frm.refresh_field('items');\n    } catch (e) {\n        // Log any errors that occur during the update process\n        console.error(\"Error updating GST values:\", e);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-11 19:28:45.636705",
  "module": "o2o ErpNext",
  "name": "Approver script",
  "script": "frappe.ui.form.on('Purchase Order', {\n    // Function to fetch the approver based on the custom_branch\n    refresh: function(frm) {\n        // Get the value of custom_branch that was already set by another script\n        let branchValue = frm.doc.custom_branch;\n        \n        if (branchValue) {\n            // Use the branch value to fetch the appropriate approver\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Employee',\n                    filters: {\n                        'branch': branchValue,\n                        'custom_roles': ['like', '%PO Approver%']\n                    },\n                    fields: ['employee_name', 'custom_user_email']\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        const employee = response.message[0];\n                        const fullName = employee.employee_name || '';\n                        const userEmail = employee.custom_user_email || '';\n                        \n                        const approverFormat = `${fullName}:${userEmail}`;\n                        frm.set_value('custom__approver_name_and_email', approverFormat);\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vendor",
  "enabled": 1,
  "modified": "2025-01-29 11:18:42.162173",
  "module": "o2o ErpNext",
  "name": "Vendor v1",
  "script": "frappe.ui.form.on('Vendor', {\n    refresh: function(frm) {\n        console.log('Refresh triggered');\n        console.log('user_id:', frm.doc.user_id);\n        console.log('email_id:', frm.doc.email_id);\n        \n        // Add custom button if user is not created/linked\n        if (!frm.doc.user_id && frm.doc.email_id) {\n            console.log('Adding Create User button');\n            frm.add_custom_button(__('Create User'), () => {\n                console.log('Create User button clicked');\n                create_vendor_user(frm);\n            }).addClass('btn-primary');\n        }\n    }\n});\n\n// Separate function for creating vendor user\nfunction create_vendor_user(frm) {\n    console.log('Creating vendor user for:', frm.doc.name);\n    \n    if (!frm.doc.email_id) {\n        frappe.throw(__(\"Please enter Email ID\"));\n        return;\n    }\n    \n    frappe.call({\n        method: \"o2o_erpnext.api.vendor.create_vendor_user\",\n        args: {\n            vendor: frm.doc.name\n        },\n        freeze: true,\n        freeze_message: __(\"Creating User...\"),\n        callback: function(r) {\n            console.log('API response:', r);\n            if (!r.exc) {\n                frm.reload_doc();\n                setTimeout(function() {\n                    cur_frm.refresh();\n                }, 1000);\n            }\n        },\n        error: function(r) {\n            console.error('API error:', r);\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-01-16 10:53:58.115896",
  "module": "o2o ErpNext",
  "name": "Supplier Restrictions",
  "script": "frappe.ui.form.on('Supplier', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            frappe.call({\n                method: 'o2o_erpnext.api.supplier_validation.check_supplier_permission',\n                callback: function(r) {\n                    if (r.message) {\n                        if (!r.message.allowed) {\n                            frappe.validated = false;\n                            frappe.msgprint({\n                                title: __('Not Allowed'),\n                                indicator: 'red',\n                                message: r.message.message\n                            });\n                            setTimeout(() => {\n                                frappe.set_route('List', 'Supplier');\n                            }, 2000);\n                        } else {\n                            frm.set_value('custom_user', frappe.session.user);\n                        }\n                    }\n                }\n            });\n        }\n    },\n    \n    validate: function(frm) {\n        if (frm.is_new()) {\n            // Check if custom_user matches current user\n            if (frm.doc.custom_user !== frappe.session.user) {\n                frappe.validated = false;\n                frappe.msgprint({\n                    title: __('Not Allowed'),\n                    indicator: 'red',\n                    message: __('You cannot modify the user assignment')\n                });\n                return false;\n            }\n            return true;\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-12-04 20:41:56.962751",
  "module": "o2o ErpNext",
  "name": "Role Profile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Role Profile'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "State",
  "enabled": 1,
  "modified": "2024-12-04 20:43:03.263179",
  "module": null,
  "name": "State Master List View",
  "script": "frappe.listview_settings['State'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "City",
  "enabled": 1,
  "modified": "2024-12-04 20:54:03.155072",
  "module": null,
  "name": "City Master List view",
  "script": "frappe.listview_settings['City'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-03-01 09:42:32.401327",
  "module": null,
  "name": "PR MERGE V5",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = [];\n\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,\n                                                                hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                igst: flt(receipt.custom_igst_amount || 0),\n                                                                amount: flt(receipt.custom_total_freight_amount || 0)\n                                                            }));\n\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-12-19 15:05:16.208414",
  "module": null,
  "name": "PR fetch",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    hide_name_column: true,\n    onload: function(listview) {\n        listview.page.add_button(__('Print PO'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n            let pdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                + \"&name=\" + encodeURIComponent(selected[0].name)\n                + \"&trigger_print=0\"\n                + \"&format=purchase order\"\n                + \"&no_letterhead=0\"\n                + \"&_lang=en\"\n            );\n            window.open(pdfUrl);\n        }, true).addClass('btn-primary');\n\n        listview.page.add_button(__('Print PR'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Purchase Receipt',\n                    filters: [['Purchase Receipt Item', 'purchase_order', '=', selected[0].name]],\n                    fields: ['name', 'posting_date', 'supplier', 'grand_total', 'status']\n                },\n                callback: function(r) {\n                    if (!r.message?.length) {\n                        frappe.msgprint('No Purchase Receipts found');\n                        return;\n                    }\n\n                    let d = new frappe.ui.Dialog({\n                        title: 'Select Purchase Receipt to Print',\n                        fields: [{\n                            label: 'Select Purchase Receipt',\n                            fieldname: 'selected_pr',\n                            fieldtype: 'Select',\n                            options: r.message.map(pr => ({\n                                label: `${pr.name} | ${frappe.datetime.str_to_user(pr.posting_date)} | ${format_currency(pr.grand_total)}`,\n                                value: pr.name\n                            })),\n                            reqd: 1\n                        }],\n                        primary_action_label: 'Print',\n                        primary_action(values) {\n                            frappe.set_route('print', 'Purchase Receipt', values.selected_pr);\n                            d.hide();\n                        }\n                    });\n\n                    let receipt_list = `<div class=\"receipt-list\" style=\"margin-top: 10px;\">\n                        <table class=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>Receipt No</th>\n                                    <th>Date</th>\n                                    <th>Status</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            ${r.message.map(pr => `\n                                <tr>\n                                    <td>${pr.name}</td>\n                                    <td>${frappe.datetime.str_to_user(pr.posting_date)}</td>\n                                    <td>${pr.status}</td>\n                                    <td>${format_currency(pr.grand_total)}</td>\n                                </tr>\n                            `).join('')}\n                            </tbody>\n                        </table>\n                    </div>`;\n                    \n                    d.fields_dict.selected_pr.$wrapper.append(receipt_list);\n                    d.show();\n                }\n            });\n        }, true).addClass('btn-primary');\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Order'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Purchase Order'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Purchase Order'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-12-13 16:34:52.839976",
  "module": null,
  "name": "PO print script for PI",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    onload: function(listview) {\n        // Original PI & PO Print Button\n        listview.page.add_button(__('Print PI & PO'), function() {\n            let selected_docs = listview.get_checked_items();\n            \n            if (selected_docs.length === 0) {\n                frappe.msgprint('Please select a Purchase Invoice');\n                return;\n            }\n            if (selected_docs.length > 1) {\n                frappe.msgprint('Please select only one Purchase Invoice');\n                return;\n            }\n            // Get the full Purchase Invoice doc\n            frappe.db.get_doc('Purchase Invoice', selected_docs[0].name)\n                .then(doc => {\n                    if (!doc.items || !doc.items.length) {\n                        frappe.msgprint('No items found in this Invoice');\n                        return;\n                    }\n                    // Get unique POs\n                    let purchase_orders = [...new Set(doc.items\n                        .map(item => item.purchase_order)\n                        .filter(po => po))];\n                    // First print the Purchase Invoice\n                    let piPdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                        + \"doctype=\" + encodeURIComponent(\"Purchase Invoice\")\n                        + \"&name=\" + encodeURIComponent(doc.name)\n                        + \"&trigger_print=0\"\n                        + \"&format=With Header Purchase Invoice\"\n                        + \"&no_letterhead=0\"\n                        + \"&_lang=en\"\n                    );\n                    window.open(piPdfUrl);\n                    // Then print all linked Purchase Orders\n                    if (purchase_orders.length > 0) {\n                        setTimeout(() => {\n                            purchase_orders.forEach((po, index) => {\n                                setTimeout(() => {\n                                    let poPdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                                        + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                                        + \"&name=\" + encodeURIComponent(po)\n                                        + \"&trigger_print=0\"\n                                        + \"&format=Purchase Order\"\n                                        + \"&no_letterhead=0\"\n                                        + \"&_lang=en\"\n                                    );\n                                    window.open(poPdfUrl);\n                                }, index * 1000);\n                            });\n                        }, 1000);\n                        frappe.show_alert({\n                            message: __(`Printing Purchase Invoice and ${purchase_orders.length} Purchase Order(s)`),\n                            indicator: 'blue'\n                        }, 5);\n                    } else {\n                        frappe.show_alert({\n                            message: __('No Purchase Orders linked to this Invoice'),\n                            indicator: 'orange'\n                        }, 3);\n                    }\n                });\n        });\n\n        // New Button: Print with Header\n        listview.page.add_button(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('With Header Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // New Button: Print without Header\n        listview.page.add_button(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Invoice'] = {\n\tonload: function(listview) {\n\t\tfrappe.route_options = {\n\t\t\t\"status\": [\"=\", \"Draft\"]\n\t\t};\n\t}\n};\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-26 10:24:30.296613",
  "module": "",
  "name": "purchase order print buttons",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    onload: function(listview) {\n        // Add custom button to list view\n        listview.page.add_inner_button(__('Merge'), function() {\n            // Get selected documents\n            const selected_docs = listview.get_checked_items();\n            \n            // Check if any documents are selected\n            if (selected_docs.length === 0) {\n                frappe.msgprint({\n                    title: __('Warning'),\n                    indicator: 'red',\n                    message: __('Please select at least one Purchase Receipt')\n                });\n                return;\n            }\n\n            // Get details of each selected Purchase Receipt\n            Promise.all(selected_docs.map(doc => {\n                return new Promise((resolve) => {\n                    frappe.db.get_doc('Purchase Invoice', doc.name)\n                        .then(pr_doc => {\n                            resolve(pr_doc);\n                        });\n                });\n            })).then(receipts => {\n                if (receipts.length > 0) {\n                    // Get first document's vendor and supplier for comparison\n                    const firstDoc = receipts[0];\n                    const firstVendor = firstDoc.custom_vendor;\n                    const firstSupplier = firstDoc.supplier;\n\n                    // Check if all documents have the same vendor and supplier\n                    const hasDifferentValues = receipts.some(doc =>\n                        doc.custom_vendor !== firstVendor ||\n                        doc.supplier !== firstSupplier\n                    );\n\n                    if (hasDifferentValues) {\n                        frappe.msgprint({\n                            title: __('Cannot Merge'),\n                            indicator: 'red',\n                            message: __('Selected receipts have different vendor and supplier values. Please select receipts with matching vendor and supplier.')\n                        });\n                    } else {\n                        // If vendors match, format item details\n                        let message = `Matching Purchase Receipts (Vendor: ${firstVendor}, Supplier: ${firstSupplier})\\n\\n`;\n\n                        receipts.forEach(receipt => {\n                            message += `Purchase Receipt: ${receipt.name}\\n`;\n                            message += `${'='.repeat(100)}\\n`;\n                            message += `Item Code | Item Name | Qty | UOM | Rate | Amount | Warehouse\\n`;\n                            message += `${'-'.repeat(100)}\\n`;\n\n                            receipt.items.forEach(item => {\n                                message += `${item.item_code} | `;\n                                message += `${item.item_name || 'N/A'} | `;\n                                message += `${item.qty} | `;\n                                message += `${item.uom} | `;\n                                message += `${item.rate} | `;\n                                message += `${item.amount} | `;\n                                message += `${item.warehouse}\\n`;\n                            });\n                            message += `\\n`;\n\n                            // Add receipt totals\n                            message += `Total Quantity: ${receipt.items.reduce((sum, item) => sum + item.qty, 0)}\\n`;\n                            message += `Total Amount: ${receipt.total}\\n\\n`;\n                        });\n\n                        // Display results in a dialog box\n                        frappe.msgprint({\n                            title: __('Items in Selected Purchase Receipts'),\n                            indicator: 'green',\n                            message: message,\n                            wide: true\n                        });\n\n                        // Log for debugging\n                        console.log(\"Purchase Receipts Data:\", receipts);\n                    }\n                }\n            });\n        }, 'Actions');\n    },\n\n    // Add checkbox selection to the list view\n    onrender: function(listview) {\n        // Ensure checkboxes are visible\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.070530",
  "module": "o2o ErpNext",
  "name": "Branch",
  "script": "frappe.ui.form.on('Branch', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_parent_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\n// frappe.ui.form.on('Shipping Address Details', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrm.set_query(\"city\", function() {\n//         return {\n//             \"filters\": {\n//                 city in state\n//             }\n//         };\n//     });\n// \t}\n// })\n\nfrappe.ui.form.on('Branch',  {\n    refresh: function(frm) {\n        frm.set_query(\"city\", \"custom_shipping_address_details\", function (doc, cdt, cdn) {\n          return {\n            \"filters\": {\n              \"State\": \"Maharashtra\",\n            },\n          };\n        });\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Branch', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.463326",
  "module": "o2o ErpNext",
  "name": "Item Master",
  "script": "frappe.ui.form.on('Item', {\n    validate: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_o2o_rates: function(frm) {\n        console.log(frm.doc.custom_o2o_rates);\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_gst_slab_percentage: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    }\n    \n});\n\nfrappe.ui.form.on(\"Item\", {\nrefresh:function(frm) {\n    $('.form-attachments').hide()\n    $('.form-tags').hide()\n    $('.form-share').hide()\n    $('.form-attachments').hide()\n  }\n});\n\nfrappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_sub_category\", function() {\n        return {\n            \"filters\": {\n                \"is_group\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Item', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            // frm.remove_custom_button('Stock Ledger', 'View');\n            // frm.remove_custom_button('Stock Balance', 'View');\n            frm.remove_custom_button('Add / Edit Prices', 'Actions');\n            frm.remove_custom_button('Duplicate');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-11 19:59:19.534576",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    },\n    supplier: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            // frm.remove_custom_button('Preview');\n            frm.remove_custom_button('Stock Ledger', 'Preview');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            // frm.remove_custom_button('View');\n            frm.remove_custom_button('Asset', 'View');\n            frm.remove_custom_button('Stock Ledger', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Asset Movement', 'View');\n            frm.remove_custom_button('Purchase Return', 'Create');\n            frm.remove_custom_button('Make Stock Entry', 'Create');\n            // frm.remove_custom_button('Purchase Invoice', 'Create');\n            frm.remove_custom_button('Retention Stock Entry', 'Create');\n            frm.remove_custom_button('Close', 'Status');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Receipt\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n    },\n    custom_weight_in_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n    },\n    custom_rate_per_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    },\n    custom_freight_tax_rate_: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    }\n    \n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        let total_gstn_value = 0;\n         $.each(frm.doc.items, function(i, d) {\n             \n             total_gstn_value = parseFloat(total_gstn_value) + parseFloat(d['custom_gstn_value']);\n             console.log(d);\n             console.log(total_gstn_value);\n         });\n        \n        frm.set_value('custom_total_gstn', total_gstn_value);\n    },\n});\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.540102",
  "module": "o2o ErpNext",
  "name": "Supplier Master",
  "script": "frappe.ui.form.on('Supplier', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfunction custom_is_vendor(frm) {\n  \n                    if (custom_is_vendor = 0) {\n                        custom_branch = 1;\n                   \n                }\n            };\nfrappe.ui.form.on('Supplier', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Bank Account', 'Create');\n            frm.remove_custom_button('Pricing Rule', 'Create');\n            frm.remove_custom_button('Accounts Payable', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Get Supplier Group Details', 'Actions');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Supplier', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Supplier\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.210238",
  "module": "o2o ErpNext",
  "name": "Purchase_Receipt_Frieght_Calc",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    // Trigger on form refresh or save\n    refresh: function(frm) {\n        // Trigger when the document is saved\n        frm.add_custom_button(__('Calculate Charges'), function() {\n            calculate_freight_and_forwarding(frm);\n        });\n        \n    },\n    // Trigger when custom fields are changed\n    freight_charges: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_weight_in_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_rate_per_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    }\n\n});\n\nfunction calculate_freight_and_forwarding(frm) {\n    // console.log(\"here\");\n    // Add your calculation logic here\n    let custom_weight_in_kg = frm.doc.custom_weight_in_kg || 0;\n    let custom_rate_per_kg = frm.doc.custom_rate_per_kg || 0;\n    let total_freight_charges = custom_weight_in_kg * custom_rate_per_kg;\n    let freight_cnt = 0;\n    // console.log(frm.doc)\n    if (frm.doc.taxes) {\n        $.each(frm.doc.taxes || [], function (j, tax) {\n            if (tax.account_head) {\n                \n                if (tax.account_head.includes('Freight and Forwarding Charges') && freight_cnt == 0) {\n                    // console.log(\"here\"+ tax.account_head + \"  =>\" + freight_cnt);\n                    frappe.model.set_value(tax.doctype, tax.name, 'tax_amount', total_freight_charges);\n                    frm.refresh_field('purchase_taxes_and_charges');\n                    freight_cnt++;\n                } \n            }\n        });\n        \n        // return false;\n        // console.log(item)\n        \n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.503025",
  "module": "o2o ErpNext",
  "name": "Item Master List View",
  "script": "frappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"],[data-label=\"Print\"],[data-label=\"add_tags\"]').parent().parent().remove()\n};\n\n//List view menu contents remove\nfrappe.listview_settings['Item'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.847564",
  "module": "o2o ErpNext",
  "name": "Item Group Master",
  "script": "//Remove form view menu contents\nfrappe.listview_settings['Item Group'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Group'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Item Group'] = { // And other doctype names\n    hide_item_group_name_column: true\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.522104",
  "module": "o2o ErpNext",
  "name": "Supplier Master List View",
  "script": "frappe.listview_settings['Supplier'] = { // And other doctype names\n    hide_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Supplier'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\n//Remove Action button menu contents\nfrappe.listview_settings['Supplier'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.135635",
  "module": "o2o ErpNext",
  "name": "Branch Master List View",
  "script": "frappe.listview_settings['Branch'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['Branch'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Branch'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.482973",
  "module": "o2o ErpNext",
  "name": "Item Group",
  "script": "frappe.ui.form.on('Item Group', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Items');\n        }, 10);\n    }\n});\nfrappe.ui.form.on(\"Item Group\", \"validate\", function(frm) {\n    cur_frm.set_value(\"custom_created_user\", frm.doc.owner);\n});\n\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item Group', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Item%20Group\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.119512",
  "module": "o2o ErpNext",
  "name": "Item Price List View",
  "script": "frappe.listview_settings['Item Price'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n        listview.page.find('[data-label=\"Dashboard\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Price'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.086980",
  "module": "o2o ErpNext",
  "name": "Brand Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Brand'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Brand'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.037036",
  "module": "o2o ErpNext",
  "name": "File Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['File'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"Home\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"New%20Folder\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import%20Zip\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['File'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export%20as%20zip\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.987375",
  "module": "o2o ErpNext",
  "name": "Data Import List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Data Import'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Data Import'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.576602",
  "module": "o2o ErpNext",
  "name": "User Master List View",
  "script": "frappe.listview_settings['User'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['User'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        // listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['User'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.227717",
  "module": "o2o ErpNext",
  "name": "User Master",
  "script": "frappe.ui.form.on('User', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Set User Permissions','Permissions');\n            frm.remove_custom_button('View Permitted Documents','Permissions');\n            frm.remove_custom_button('Create User Email');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('User', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20User\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.920644",
  "module": "o2o ErpNext",
  "name": "User Permission Master",
  "script": "frappe.ui.form.on('User Permission', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20User%20Permission\"],\\\n            [data-label=\"Customize\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('User Permission', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('View Permitted Documents');\n        }, 10);\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.881342",
  "module": "o2o ErpNext",
  "name": "Role Prpfile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.103016",
  "module": "o2o ErpNext",
  "name": "Item Price Master",
  "script": "frappe.ui.form.on('Item Price', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item%20Price\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.053533",
  "module": "o2o ErpNext",
  "name": "Brand Master",
  "script": "frappe.ui.form.on('Brand', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.020114",
  "module": "o2o ErpNext",
  "name": "File Master",
  "script": "frappe.ui.form.on('File', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20File\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.004100",
  "module": "o2o ErpNext",
  "name": "Data Import Master",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Data Import', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Data%20Import\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Workspace",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.969652",
  "module": "o2o ErpNext",
  "name": "Workspace Master",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button(\"Edit\");\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.953615",
  "module": "o2o ErpNext",
  "name": "Bank Master List View",
  "script": "frappe.listview_settings['Bank'] = { // And other doctype names\n    hide_custom_account_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Bank'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Bank'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.936970",
  "module": "o2o ErpNext",
  "name": "Bank Master",
  "script": "frappe.ui.form.on('Bank', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Bank\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.900955",
  "module": "o2o ErpNext",
  "name": "User Permission List View",
  "script": "frappe.listview_settings['User Permission'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['User Permission'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.864224",
  "module": "o2o ErpNext",
  "name": "Role Profile",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Role Profile', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20Role%20Profile\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.812253",
  "module": "o2o ErpNext",
  "name": "GST Slab List View",
  "script": "frappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"]').parent().parent().remove()\n};\n//Remove form view menu contents\nfrappe.listview_settings['Gst Slab'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.830655",
  "module": "o2o ErpNext",
  "name": "GST Slab",
  "script": "frappe.ui.form.on('Gst Slab', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.685804",
  "module": "o2o ErpNext",
  "name": "Stock Reconciliation",
  "script": "frappe.ui.form.on('Stock Reconciliation', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Fetch Items from Warehouse');\n            frm.remove_custom_button('Product Bundle', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.794939",
  "module": "o2o ErpNext",
  "name": "Stock Entry",
  "script": "\nfrappe.ui.form.on('Stock Entry', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Get Items From');\n            frm.remove_custom_button('Bill of Materials', 'Get Items From');\n            frm.remove_custom_button('Expired Batches', 'Get Items From');\n            frm.remove_custom_button('Transit Entry', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Create');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Homepage",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.340426",
  "module": "o2o ErpNext",
  "name": "Homepage",
  "script": "frappe.ui.form.on('Homepage', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:24:16.027936",
  "module": "o2o ErpNext",
  "name": "Purchase invoice List View",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:20px;color:red\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        action: function(doc) {\n            //frappe.set_route(\"/app/print/Purchase Invoice/\" + doc.name);\n            \n            var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n              + \"doctype=\" + encodeURIComponent(\"Purchase Invoice\")\n              + \"&name=\" + encodeURIComponent(doc.name)\n              + \"&trigger_print=0\"\n              + \"&format=Without Header Final Purchase Invoice\"\n              + \"&no_letterhead=0\"\n              + \"&_lang=en\"\n            ));\n\n            if(!objWindowOpenResult) {\n              msgprint(__(\"Please set permission for pop-up windows in your browser!\")); return;\n            }\n        }\n    }\n}\n//List view menu contents remove\n// frappe.listview_settings['Purchase Invoice'] = {\n//     refresh(listview) {\n//         listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n//     }\n// }\nfrappe.listview_settings['Purchase Invoice'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n// Remove ID column from listing\n// frappe.listview_settings['Purchase Invoice'] = { // And other doctype names\n//     hide_name_column: true\n// }\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:11:07.883406",
  "module": "o2o ErpNext",
  "name": "Purchase invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"shipping_address\", function() {\n        return {\n            \"filters\": {\n                \"is_shipping_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"billing_address\", function() {\n        return {\n            \"filters\": {\n                \"is_primary_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor_address\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on(\"Purchase Invoice Item\", \"custom_gstn_value\", function(frm, cdt, cdn) {\n\n   var items = frm.doc.custom_gstn_value\n   var total = 0\n   for(var i in items) {\n\ttotal = total + items[i].custom_gstn_value\n\t}\n\n\tfrm.set_value(\"custom_gst_28__ot\",total)\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    is_return: function(frm) {\n        if (frm.doc.is_return == 1) {\n            frm.set_value('naming_series','DN./.{custom_fiscal_year}./.###');\n        } else{\n            frm.set_value('naming_series','{custom_vendor_code}./.{custom_fiscal_year}./.###');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            frm.remove_custom_button('Purchase Receipt', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            frm.remove_custom_button('Payment Request', 'Create');\n            frm.remove_custom_button('Block Invoice', 'Create');\n            frm.remove_custom_button('Payment', 'Create');\n            // frm.remove_custom_button('Return / Debit Note', 'Create');\n            frm.remove_custom_button('Purchase Receipt', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Invoice\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n    onload: function (frm) {\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n        \n    },\n    onload: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n    },\n});\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:23:55.953956",
  "module": "o2o ErpNext",
  "name": "Purchase invoice print button",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    add_fields: ['name', 'supplier'],\n    \n    onload: function(listview) {\n        // Print with Header\n        listview.page.add_action_item(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Final Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // Print without Header\n        listview.page.add_action_item(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Final Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2024-11-26 11:16:44.530204",
  "module": "o2o ErpNext",
  "name": "PO LIst view v2",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:18px;color:black\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print Options for {0}', [doc.name])\n        },\n        action: function(doc) {\n            let d = new frappe.ui.Dialog({\n                title: 'Print Options',\n                fields: [\n                    {\n                        label: 'Select Document to Print',\n                        fieldname: 'print_type',\n                        fieldtype: 'Select',\n                        options: [\n                            'Purchase Order',\n                            'Purchase Receipt'\n                        ],\n                        default: 'Purchase Order'\n                    }\n                ],\n                primary_action_label: 'Print',\n                primary_action(values) {\n                    if (values.print_type === 'Purchase Order') {\n                        var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                            + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                            + \"&name=\" + encodeURIComponent(doc.name)\n                            + \"&trigger_print=0\"\n                            + \"&format=test purchase order\"\n                            + \"&no_letterhead=0\"\n                            + \"&_lang=en\"\n                        ));\n                        if(!objWindowOpenResult) {\n                            msgprint(__(\"Please set permission for pop-up windows in your browser!\")); \n                            return;\n                        }\n                    } else {\n                        frappe.db.get_value('Purchase Receipt Item', \n                            { 'purchase_order': doc.name, 'docstatus': 1 }, \n                            'parent', \n                            function(r) {\n                                if (r && r.parent) {\n                                    var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                                        + \"doctype=\" + encodeURIComponent(\"Purchase Receipt\")\n                                        + \"&name=\" + encodeURIComponent(r.parent)\n                                        + \"&trigger_print=0\"\n                                        + \"&format=Standard\"\n                                        + \"&no_letterhead=0\"\n                                        + \"&_lang=en\"\n                                    ));\n                                    if(!objWindowOpenResult) {\n                                        msgprint(__(\"Please set permission for pop-up windows in your browser!\")); \n                                        return;\n                                    }\n                                } else {\n                                    frappe.msgprint({\n                                        title: __('Purchase Receipt Not Found'),\n                                        message: __('No submitted Purchase Receipt found for Purchase Order {0}', [doc.name]),\n                                        indicator: 'orange'\n                                    });\n                                }\n                            }\n                        );\n                    }\n                    d.hide();\n                }\n            });\n            d.show();\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-01-20 09:27:50.070517",
  "module": "o2o ErpNext",
  "name": "Employee v2",
  "script": "frappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        // Add custom button if user is not created/linked\n        if (!frm.doc.user_id && frm.doc.custom_user_email) {\n            frm.add_custom_button(__('Create User'), function() {\n                frm.events.create_user(frm);\n            }).addClass('btn-primary');\n        }\n    },\n    \n    create_user: function(frm) {\n        if (!frm.doc.custom_user_email) {\n            frappe.throw(__(\"Please enter Email in Custom User Email field\"));\n            return;\n        }\n        \n        frappe.call({\n            method: \"o2o_erpnext.api.employee.create_user\",\n            args: {\n                employee: frm.doc.name,\n                email: frm.doc.custom_user_email\n            },\n            freeze: true,\n            freeze_message: __(\"Creating User...\"),\n            callback: function(r) {\n                if (!r.exc) {\n                    // Force reload the form\n                    frm.reload_doc();\n                    // Refresh the form\n                    setTimeout(function() {\n                        cur_frm.refresh();\n                    }, 1000);\n                }\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-03-05 11:41:16.354114",
  "module": "o2o ErpNext",
  "name": "Purchase order v1",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Set vendor filters based on supplier\n        if(frm.doc.supplier) {\n            set_vendor_filters(frm);\n        }\n\n        if (!frm.doc.__islocal) return;\n        \n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_and_set_purchase_order_defaults',\n            freeze: true,\n            freeze_message: __('Validating...'),\n            callback: function(r) {\n                if (r.exc) {\n                    return;\n                }\n                \n                if (r.message && r.message.status === 'success' && r.message.data) {\n                    // Set the default values\n                    if (r.message.data.supplier) {\n                        frm.set_value('supplier', r.message.data.supplier);\n                    }\n                    if (r.message.data.custom_branch) {\n                        frm.set_value('custom_branch', r.message.data.custom_branch);\n                    }\n                    if (r.message.data.custom_sub_branch) {\n                        frm.set_value('custom_sub_branch', r.message.data.custom_sub_branch);\n                    }\n                }\n            }\n        });\n\n        // Hide UI elements\n        $('.form-attachments, .form-tags, .form-share').hide();\n\n        // Remove standard buttons\n        setTimeout(() => {\n            const buttonsToRemove = [\n                'Get Items From',\n                'Update Items',\n                'Payment',\n                'Payment Request',\n                'Purchase Invoice',\n                'Link to Material Request',\n                'Update Rate as per Last Purchase',\n                'Print',\n                'Download',\n                'Hold',\n                'Close'\n            ];\n\n            buttonsToRemove.forEach(btn => frm.remove_custom_button(btn));\n            \n            // Remove menu items\n            const menuItemsToRemove = [\n                'Print',\n                'Email',\n                'Links',\n                'Duplicate',\n                'Send SMS',\n                'Copy to Clipboard',\n                'Reload',\n                'Remind Me',\n                'Undo',\n                'Redo',\n                'Repeat',\n                'New Purchase Order'\n            ];\n\n            menuItemsToRemove.forEach(item => {\n                const selector = `[data-label=\"${encodeURIComponent(item)}\"]`;\n                frm.page.menu.find(selector).parent().parent().remove();\n            });\n        }, 10);\n    },\n\n    validate: function(frm) {\n        frm.set_value(\"custom_created_user\", frm.doc.owner);\n        calculate_and_set_gst_value(frm);\n    },\n\n    onload: function(frm) {\n        updateSupplierCode(frm);\n        updateOrderCode(frm);\n        calculate_and_set_gst_value(frm);\n    },\n\n    supplier: function(frm) {\n        updateSupplierCode(frm);\n        \n        if(frm.doc.supplier) {\n            // Clear vendor when supplier changes\n            frm.set_value('custom_vendor', '');\n            \n            // Set new vendor filters\n            set_vendor_filters(frm);\n        }\n    },\n\n    transaction_date: function(frm) {\n        updateOrderCode(frm);\n    },\n    \n    // New function for custom_branch field\n    custom_branch: function(frm) {\n        if (!frm.doc.custom_branch) return;\n        \n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Employee',\n                filters: {\n                    'branch': frm.doc.custom_branch,\n                    'custom_roles': ['like', '%PO Approver%']\n                },\n                fields: ['employee_name', 'custom_user_email']\n            },\n            callback: function(response) {\n                if (response.message && response.message.length > 0) {\n                    const employee = response.message[0];\n                    const fullName = employee.employee_name || '';\n                    const userEmail = employee.custom_user_email || '';\n                    \n                    const approverFormat = `${fullName}:${userEmail}`;\n                    frm.set_value('custom__approver_name_and_email', approverFormat);\n                }\n            }\n        });\n    }\n});\n\n// Helper Functions\nfunction updateSupplierCode(frm) {\n    const supplier = frm.doc.supplier;\n    frm.set_value('custom_supplier_code', \n        supplier ? supplier.substring(0, 3).toUpperCase() : '');\n}\n\nfunction updateOrderCode(frm) {\n    if (frm.doc.docstatus !== 0) return;\n    \n    const date = new Date(frm.doc.transaction_date);\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n    const dayOfWeek = days[date.getDay()];\n    const yearYY = date.getFullYear().toString().slice(-2);\n    \n    frm.set_value('custom_order_code', `POA${dayOfWeek}${yearYY}`);\n}\n\nfrappe.ui.form.on('Purchase Order', {\n   \n    onload: function(frm) {\n        calculate_and_set_gst_value(frm);\n    },\n    \n    validate: function(frm) {\n        calculate_and_set_gst_value(frm);\n    }\n});\n\nfunction calculate_and_set_gst_value(frm) {\n    // console.log(frm.doc.items)\n    $.each(frm.doc.items || [], function (i, item) {\n        let total_sgst = 0;\n        let total_cgst = 0;\n        let total_igst = 0;\n        \n        if (item.sgst_amount == null) { // This checks for both null and undefined\n            item.sgst_amount = 0;\n        }\n        \n        if (item.cgst_amount == null) { // This checks for both null and undefined\n            item.cgst_amount = 0;\n        }\n        \n        if (item.igst_amount == null) { // This checks for both null and undefined\n            item.igst_amount = 0;\n        }\n        \n        if (item.net_amount == null) { // This checks for both null and undefined\n            item.net_amount = 0;\n        }\n\n        let total_tax = 0;\n        let grand_total = 0;\n        // frappe.msgprint(item.sgst_amount +\" => \"+ item.cgst_amount+\"=>\" + item.igst_amount)\n        total_tax = parseFloat(item.sgst_amount) + parseFloat(item.cgst_amount) + parseFloat(item.igst_amount);\n        \n        // console.log( \"total taxt\"+total_tax)\n        grand_total = parseFloat(item.net_amount) + parseFloat(total_tax);\n        // console.log(grand_total);\n        // console.log(\"grand total \" + grand_total)\n        // console.log(\"herere\")\n        // console.log(gst_value);\n        // Set the GST value in the custom field of the item\n        frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', total_tax);\n        frappe.model.set_value(item.doctype, item.name, 'custom_grand_total', grand_total);\n        frm.refresh_field('items');\n        \n    });\n}\n\nfunction set_vendor_filters(frm) {\n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.get_supplier_vendors',\n        args: {\n            supplier: frm.doc.supplier\n        },\n        callback: function(r) {\n            if(r.message) {\n                let allowed_vendors = r.message;\n                \n                // Set filters on vendor field\n                frm.set_query('custom_vendor', function() {\n                    return {\n                        filters: {\n                            'name': ['in', allowed_vendors.length ? allowed_vendors : ['NONE']]\n                        }\n                    };\n                });\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2025-02-05 15:50:13.158792",
  "module": "o2o ErpNext",
  "name": "Branch Restrict",
  "script": "frappe.listview_settings['Branch'] = {\n    onload: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request')) {\n            // Remove existing filters\n            listview.filter_area.clear();\n            \n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_supplier']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.custom_supplier) {\n                        // Add non-removable filter\n                        listview.filter_area.add([\n                            ['Branch', 'custom_supplier', '=', r.message.custom_supplier]\n                        ]);\n                        \n                        // Store the supplier for reference\n                        listview.custom_supplier = r.message.custom_supplier;\n                        \n                        // Refresh list\n                        listview.refresh();\n                        \n                        // Hide filter area buttons\n                        $('.filter-selector').hide();\n                        $('.filter-button').hide();\n                    } else {\n                        // If no supplier found, show empty list\n                        listview.filter_area.add([\n                            ['Branch', 'name', '=', '']\n                        ]);\n                        listview.refresh();\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request')) {\n            // Prevent filter removal\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier\n                );\n                \n                if (!supplier_filter_exists) {\n                    // Re-add the supplier filter if it was removed\n                    listview.filter_area.add([\n                        ['Branch', 'custom_supplier', '=', listview.custom_supplier]\n                    ]);\n                }\n            }\n            \n            // Hide filter area and buttons\n            $('.filter-selector').hide();\n            $('.filter-button').hide();\n            $('.filter-box .filter-area').css('pointer-events', 'none');\n            \n            // Remove filter tags close button\n            setTimeout(() => {\n                $('.filter-tag .remove-filter').hide();\n            }, 100);\n        }\n    },\n\n    before_refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request')) {\n            // Prevent clearing filters\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier\n                );\n                \n                if (!supplier_filter_exists) {\n                    return false; // Prevent refresh if supplier filter was removed\n                }\n            }\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (frappe.user_roles.includes('Person Raising Request')) {\n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_supplier']\n                    },\n                    callback: function(r) {\n                        if (!r.message || !r.message.custom_supplier) {\n                            frappe.throw(__('You must have a supplier assigned to your employee record to create a branch.'));\n                            reject();\n                        } else {\n                            resolve();\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sub Branch",
  "enabled": 1,
  "modified": "2025-02-28 21:59:46.432558",
  "module": "o2o ErpNext",
  "name": "Sub Branch Restrict",
  "script": "frappe.listview_settings['Sub Branch'] = {\n    onload: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            listview.filter_area.clear();\n\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_supplier', 'branch', 'custom_sub_branch', 'custom_sub_branch_list']\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        let filters = [];\n                        if (frappe.user_roles.includes('Person Raising Request')){\n                            if (r.message.custom_supplier && r.message.branch && r.message.custom_sub_branch){\n                                filters.push(\n                                    ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                    ['Sub Branch', 'branch', '=', r.message.branch],\n                                    ['Sub Branch', 'name', '=', r.message.custom_sub_branch]\n                                );\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                                listview.custom_sub_branch = r.message.custom_sub_branch;\n\n                            } else {\n                                // If any required fields are missing, show nothing.\n                                filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        } else if (frappe.user_roles.includes('PO Approver')) {\n                            if (r.message.custom_supplier && r.message.branch ) {\n                                filters.push(\n                                     ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                     ['Sub Branch', 'branch', '=', r.message.branch]\n                                );\n\n                                // Handle custom_sub_branch_list (Table field)\n                                if (r.message.custom_sub_branch_list && Array.isArray(r.message.custom_sub_branch_list)) {\n                                    const subBranchNames = r.message.custom_sub_branch_list\n                                        .map(item => item.custom_sub_branch)  // Assuming 'name' is the sub-branch name field\n                                        .filter(name => name); // Remove any empty/null values\n\n                                    if (subBranchNames.length > 0) {\n                                        filters.push(['Sub Branch', 'name', 'in', subBranchNames]);\n                                    }\n                                    else{\n                                         //If custom_sub_branch_list is empty\n                                        filters.push(['Sub Branch', 'name', '=', '']);\n                                    }\n                                }\n                                else if(r.message.custom_sub_branch){\n                                      filters.push(['Sub Branch', 'name', '=', r.message.custom_sub_branch]); //use custom_sub_branch\n                                }\n                                else {\n                                    // If custom_sub_branch_list is missing or invalid, show nothing.\n                                    filters.push(['Sub Branch', 'name', '=', '']);\n                                }\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                                listview.custom_sub_branch_list = r.message.custom_sub_branch_list;\n\n                            }\n                            else{\n                                // If any required fields are missing, show nothing.\n                                 filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        } else if (frappe.user_roles.includes('Requisition Approver')) {\n                            if (r.message.custom_supplier && r.message.branch) {\n                                filters.push(\n                                    ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                    ['Sub Branch', 'branch', '=', r.message.branch]\n                                );\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                            } else {\n                                // If any required fields are missing, show nothing.\n                                filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        }\n\n                        listview.filter_area.add(filters);\n                        listview.refresh();\n                        _hideFilterControls(listview);\n\n                        let message = '';\n                        if (frappe.user_roles.includes('PO Approver')) {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier, branch, and sub-branch list.');\n                        } else if (frappe.user_roles.includes('Requisition Approver')) {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier and branch.');\n                        } else {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier, branch, and sub-branch.');\n                        }\n                        \n                        frappe.show_alert({\n                            message: message,\n                            indicator: 'info'\n                        });\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            //For Person Raising Request\n            if (listview.custom_supplier && listview.branch && listview.custom_sub_branch && frappe.user_roles.includes('Person Raising Request')) {\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch &&\n                    f[0] === 'Sub Branch' && f[1] === 'name' && f[3] === listview.custom_sub_branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                        ['Sub Branch', 'name', '=', listview.custom_sub_branch]\n                    ]);\n                }\n            }\n            //For PO Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('PO Approver')){\n                let current_filters = listview.filter_area.get();\n                let subBranchNames = [];\n                if(listview.custom_sub_branch_list){\n                    subBranchNames = listview.custom_sub_branch_list.map(f=> f.custom_sub_branch);\n                }\n\n                let filters_present = current_filters.every(f => {\n                    if (f[1] === 'custom_supplier') {\n                        return f[3] === listview.custom_supplier;\n                    } else if (f[1] === 'branch') {\n                        return f[3] === listview.branch;\n                    } else if (f[0] === 'Sub Branch' && f[1] === 'name') {\n                        return subBranchNames.includes(f[3]) || f[3] === listview.custom_sub_branch; //for custom_sub_branch\n                    }\n                    return true; // For other filters, don't interfere\n                });\n\n                if (!filters_present) {\n                    let filters = [\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                    ];\n                    if (subBranchNames.length > 0){\n                        filters.push(['Sub Branch', 'name', 'in', subBranchNames])\n                    }\n                    else if(listview.custom_sub_branch){\n                        filters.push(['Sub Branch', 'name', '=', listview.custom_sub_branch]); //use custom_sub_branch\n                    }\n\n                    listview.filter_area.add(filters);\n                }\n            }\n            //For Requisition Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('Requisition Approver')){\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch]\n                    ]);\n                }\n            }\n            _hideFilterControls(listview);\n        }\n    },\n\n    before_refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            if (listview.custom_supplier && listview.branch && listview.custom_sub_branch && frappe.user_roles.includes('Person Raising Request')) {\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch &&\n                    f[0] === 'Sub Branch' && f[1] === 'name' && f[3] === listview.custom_sub_branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                        ['Sub Branch', 'name', '=', listview.custom_sub_branch]\n                    ]);\n                }\n            }\n            //For PO Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('PO Approver')){\n                let current_filters = listview.filter_area.get();\n                let subBranchNames = [];\n                if(listview.custom_sub_branch_list){\n                    subBranchNames = listview.custom_sub_branch_list.map(f=> f.custom_sub_branch);\n                }\n                let filters_present = current_filters.every(f => {\n                    if (f[1] === 'custom_supplier') {\n                        return f[3] === listview.custom_supplier;\n                    } else if (f[1] === 'branch') {\n                        return f[3] === listview.branch;\n                    } else if (f[0] === 'Sub Branch' && f[1] === 'name') {\n                        return subBranchNames.includes(f[3]) || f[3] === listview.custom_sub_branch;  //for custom_sub_branch\n                    }\n                    return true; // For other filters, don't interfere\n                });\n\n                if (!filters_present) {\n                    let filters = [\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                    ];\n                    if (subBranchNames.length > 0){\n                        filters.push(['Sub Branch', 'name', 'in', subBranchNames])\n                    }\n                    else if(listview.custom_sub_branch){\n                        filters.push(['Sub Branch', 'name', '=', listview.custom_sub_branch]);//use custom_sub_branch\n                    }\n                    listview.filter_area.add(filters);\n                }\n            }\n            //For Requisition Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('Requisition Approver')){\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch]\n                    ]);\n                }\n            }\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_supplier', 'branch', 'custom_sub_branch', 'custom_sub_branch_list']\n                    },\n                    callback: function(r) {\n                        if (frappe.user_roles.includes('Person Raising Request')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch || !r.message.custom_sub_branch) {\n                                frappe.throw(__('You must have a supplier, branch and sub branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        } else if(frappe.user_roles.includes('PO Approver')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch ) {\n                                frappe.throw(__('You must have a supplier and branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        } else if(frappe.user_roles.includes('Requisition Approver')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch ) {\n                                frappe.throw(__('You must have a supplier and branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};\n\n// Helper function to hide filter controls (reused from the Branch script)\nfunction _hideFilterControls(listview) {\n    $('.filter-selector').hide();\n    $('.filter-button').hide();\n    $('.filter-box .filter-area').css('pointer-events', 'none');\n\n    setTimeout(() => {\n        $('.filter-tag .remove-filter').hide();\n    }, 100);\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-02-26 01:59:10.034390",
  "module": "o2o ErpNext",
  "name": "Supplier restrict",
  "script": "frappe.listview_settings['Supplier'] = {\n    onload: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || frappe.user_roles.includes('PO Approver') || frappe.user_roles.includes('Requisition Approver')) {\n            listview.filter_area.clear();\n\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_supplier']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.custom_supplier) {\n                        listview.filter_area.add([\n                            ['Supplier', 'name', '=', r.message.custom_supplier] // Filter by Supplier name\n                        ]);\n\n                        listview.custom_supplier = r.message.custom_supplier;\n\n                        listview.refresh();\n                        _hideFilterControls(listview);\n                         let message = \"\";\n                        if (frappe.user_roles.includes('PO Approver') || frappe.user_roles.includes('Requisition Approver')){\n                            message = __('The Supplier list is filtered based on your assigned supplier as PO/Requisition Approver.');\n                        }\n                        else{\n                            message = __('The Supplier list is filtered based on your assigned supplier.');\n                        }\n                        frappe.show_alert({\n                            message: message,\n                            indicator: 'info'\n                        });\n                    } else {\n                        listview.filter_area.add([\n                            ['Supplier', 'name', '=', ''] // Show nothing\n                        ]);\n                        listview.refresh();\n                        _hideFilterControls(listview);\n                        frappe.show_alert({\n                            message: __('Your Employee record is missing the required supplier information. No Suppliers are visible.'),\n                            indicator: 'warning'\n                        });\n                    }\n                }\n            });\n        }\n    },\n\n   refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || frappe.user_roles.includes('PO Approver') || frappe.user_roles.includes('Requisition Approver')) {\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f =>\n                    f[0] === 'Supplier' && f[1] === 'name' && f[3] === listview.custom_supplier\n                );\n\n                if (!supplier_filter_exists) {\n                    listview.filter_area.add([\n                        ['Supplier', 'name', '=', listview.custom_supplier]\n                    ]);\n                }\n            }\n            _hideFilterControls(listview);\n        }\n    },\n\n    before_refresh: function(listview) {\n       if (frappe.user_roles.includes('Person Raising Request') || frappe.user_roles.includes('PO Approver') || frappe.user_roles.includes('Requisition Approver')) {\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f =>\n                    f[0] === 'Supplier' && f[1] === 'name' && f[3] === listview.custom_supplier\n                );\n\n                if (!supplier_filter_exists) {\n                  listview.filter_area.add([\n                        ['Supplier', 'name', '=', listview.custom_supplier]\n                    ]);\n                }\n            }\n\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (frappe.user_roles.includes('Person Raising Request') || frappe.user_roles.includes('PO Approver') || frappe.user_roles.includes('Requisition Approver')) {\n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_supplier']\n                    },\n                    callback: function(r) {\n                         if (frappe.user_roles.includes('Person Raising Request')){\n                            if (!r.message || !r.message.custom_supplier) {\n                                frappe.throw(__('You must have a supplier assigned to your employee record to create a Supplier.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                         }\n                        else{\n                            if (!r.message || !r.message.custom_supplier) {\n                                    frappe.throw(__('You must have a supplier assigned to your employee record to create a Supplier.'));\n                                    reject();\n                            }\n                           else{\n                                resolve();\n                           }\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};\n\n// Helper function to hide filter controls\nfunction _hideFilterControls(listview) {\n    $('.filter-selector').hide();\n    $('.filter-button').hide();\n    $('.filter-box .filter-area').css('pointer-events', 'none');\n\n    setTimeout(() => {\n        $('.filter-tag .remove-filter').hide();\n    }, 100);\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-02-27 16:05:19.850617",
  "module": "o2o ErpNext",
  "name": "PO v5",
  "script": "// Store capexTotal and opexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// --- Helper Functions ---\n\n// Function to check if current user has the branch-level role\nasync function isBranchLevelUser() {\n    const user_roles = await frappe.user_roles;\n    return user_roles.includes('Person Raising Request Branch');\n}\n\nasync function getHierarchyData(frm) {\n    // Check user role to determine hierarchy level\n    const isBranchUser = await isBranchLevelUser();\n    \n    let subBranch = { message: null };\n    let branch = { message: null };\n    let supplier = { message: null };\n    \n    // For branch-level users, we only need branch and supplier\n    if (isBranchUser) {\n        if (frm.doc.custom_branch) {\n            branch = await frappe.db.get_value('Branch', frm.doc.custom_branch,\n                ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n            );\n            \n            if (branch && branch.message && branch.message.custom_supplier) {\n                supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                    ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                );\n            }\n        }\n    } \n    // For sub-branch users, get the full hierarchy\n    else {\n        if (frm.doc.custom_sub_branch) {\n            subBranch = await frappe.db.get_value('Sub Branch', frm.doc.custom_sub_branch,\n                ['branch', 'custom_supplier', 'capex_budget', 'opex_budget', 'minimum_order_value', 'maximum_order_value']\n            );\n            \n            if (subBranch && subBranch.message && subBranch.message.branch) {\n                branch = await frappe.db.get_value('Branch', subBranch.message.branch,\n                    ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n                );\n                \n                if (branch && branch.message && branch.message.custom_supplier) {\n                    supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                        ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                    );\n                }\n            }\n        }\n    }\n\n    return { subBranch, branch, supplier };\n}\n\nfunction validateMinMax(total, minValue, maxValue, entityType, entityName) {\n    if (minValue !== 0 || maxValue !== 0) {\n        if (total < minValue || total > maxValue) {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between ${entityType}'s minimum value ${format_currency(minValue)} and maximum value ${format_currency(maxValue)} for ${entityName}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction validateBudgetLimit(total, budget, budgetType, entityType, entityName) {\n    if (budget > 0 && total > budget) {\n        frappe.msgprint({\n            title: __(`${budgetType} Budget Exceeded`),\n            message: __(`Total ${budgetType} amount (${format_currency(total)}) exceeds ${entityType} ${budgetType} budget (${format_currency(budget)}) for ${entityName}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function updateBudget(entityType, entityName, budgetField, amountToDeduct) {\n    if (amountToDeduct > 0) {\n      const currentBudget = await frappe.db.get_value(entityType, entityName, [budgetField]);\n\n        if (currentBudget && currentBudget.message && flt(currentBudget.message[budgetField]) > 0) {\n            const newBudget = flt(currentBudget.message[budgetField]) - amountToDeduct;\n            await frappe.db.set_value(entityType, entityName, budgetField, newBudget);\n            frappe.show_alert({\n                message: __(`${entityType} ${budgetField.replace('_budget','').replace('custom_','').replace('_',' ').toUpperCase()} budget updated to ${format_currency(newBudget)}`),\n                indicator: 'green'\n            }, 5);\n        }\n    }\n}\n\n// --- Validation Functions ---\n\nasync function validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateSubBranchMandatory(frm) {\n    // Skip for branch-level users\n    const isBranchUser = await isBranchLevelUser();\n    if (isBranchUser) {\n        return true;\n    }\n    \n    // Only check for regular users\n    if (!frm.doc.custom_sub_branch) {\n        frappe.msgprint({\n            title: __('Missing Sub-branch'),\n            message: __('Sub-branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateHierarchy(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    // For branch-level users, just check if branch exists\n    if (isBranchUser) {\n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    } \n    // For sub-branch users, check the full hierarchy\n    else {\n        if (!subBranch || !subBranch.message) {\n            frappe.msgprint({\n                title: __('Invalid Sub-branch'),\n                message: __('Could not fetch sub-branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        if (subBranch.message.branch !== frm.doc.custom_branch) {\n            frappe.msgprint({\n                title: __('Invalid Hierarchy'),\n                message: __('Selected sub-branch does not belong to the selected branch'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    }\n}\n\nasync function validateOrderValue(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    const total = flt(frm.doc.total);\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Branch\n        if (!validateMinMax(total, flt(branch.message.custom_minimum_order_value), \n                           flt(branch.message.custom_maximum_order_value), \n                           'Branch', frm.doc.custom_branch)) {\n            return false;\n        }\n        \n        // Supplier\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Sub-Branch\n        if (!validateMinMax(total, flt(subBranch.message.minimum_order_value), \n                           flt(subBranch.message.maximum_order_value), \n                           'Sub-branch', frm.doc.custom_sub_branch)) {\n            return false;\n        }\n        \n        // Supplier (Skip Branch)\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nasync function validateBudgetDates(frm) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const { supplier } = await getHierarchyData(frm); //Get supplier\n    if (!supplier || !supplier.message) return false;\n\n    const budget_start_day = parseInt(supplier.message.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.message.custom_budget_end_date);\n\n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateBudgets(frm) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    for (const item of frm.doc.items) {\n        if (!item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(capexTotal, flt(branch.message.custom_capex_budget), \n                                    \"Capex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(opexTotal, flt(branch.message.custom_opex_budget), \n                                    \"Opex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Sub-Branch\n            if (flt(subBranch.message.capex_budget) > 0) {\n                if (!validateBudgetLimit(capexTotal, flt(subBranch.message.capex_budget), \n                                        \"Capex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Sub-branch\n            if (flt(subBranch.message.opex_budget) > 0) {\n                if (!validateBudgetLimit(opexTotal, flt(subBranch.message.opex_budget), \n                                        \"Opex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nasync function updateBudgets(frm) {\n    try {\n        const isBranchUser = await isBranchLevelUser();\n        const { subBranch, branch, supplier } = await getHierarchyData(frm);\n        \n        if (!supplier || !supplier.message) return;\n        \n        // For branch-level users\n        if (isBranchUser) {\n            if (!branch || !branch.message) return;\n            \n            // Update CAPEX Budget for Branch\n            if (branch.message.custom_capex_budget && flt(branch.message.custom_capex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Branch\n            if (branch.message.custom_opex_budget && flt(branch.message.custom_opex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        } \n        // For sub-branch users\n        else {\n            if (!subBranch || !subBranch.message) return;\n            \n            // Update CAPEX Budget for Sub-Branch\n            if (subBranch.message.capex_budget && flt(subBranch.message.capex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Sub-Branch\n            if (subBranch.message.opex_budget && flt(subBranch.message.opex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator\nasync function validateAll(frm) {\n    try {\n        // Basic validations\n        if (!await validateBranchMandatory(frm)) return false;\n        if (!await validateSubBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        if (!await validateHierarchy(frm)) return false;\n\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) { return true; }\n        }\n\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            if (!await validateOrderValue(frm)) return false;\n            if (!await validateBudgetDates(frm)) return false;\n            if (!await validateBudgets(frm)) return false;\n        }\n        return true;\n\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Set form fields based on user role\nasync function setupFormFields(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    \n    if (isBranchUser) {\n        // For branch-level users, make sub_branch non-mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 0);\n    } else {\n        // For regular users, keep sub_branch mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 1);\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function (frm) {\n        frm.custom_validate = function () {\n            return validateAll(frm);\n        };\n    },\n    onload: function(frm) {\n        setupFormFields(frm);\n    },\n    refresh: function(frm) {\n        setupFormFields(frm);\n    },\n    validate: function (frm) {\n        return validateAll(frm);\n    },\n    before_save: function (frm) {\n        return validateAll(frm);\n    },\n    after_save: function (frm) {\n       if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n            updateBudgets(frm);\n        }\n    },\n    custom_branch: function (frm) {\n        validateAll(frm);\n    },\n    custom_sub_branch: function (frm) {\n        validateAll(frm);\n    },\n    transaction_date: function (frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function (frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-02-27 11:13:51.501073",
  "module": "o2o ErpNext",
  "name": "PO v6",
  "script": "// Store capexTotal and opexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// --- Helper Functions ---\n\n// Function to check if current user has the branch-level role\nasync function isBranchLevelUser() {\n    const user_roles = await frappe.user_roles;\n    return user_roles.includes('Person Raising Request Branch');\n}\n\nasync function getHierarchyData(frm) {\n    // Check user role to determine hierarchy level\n    const isBranchUser = await isBranchLevelUser();\n    \n    let subBranch = { message: null };\n    let branch = { message: null };\n    let supplier = { message: null };\n    \n    // For branch-level users, we only need branch and supplier\n    if (isBranchUser) {\n        if (frm.doc.custom_branch) {\n            branch = await frappe.db.get_value('Branch', frm.doc.custom_branch,\n                ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n            );\n            \n            if (branch && branch.message && branch.message.custom_supplier) {\n                supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                    ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                );\n            }\n        }\n    } \n    // For sub-branch users, get the full hierarchy\n    else {\n        if (frm.doc.custom_sub_branch) {\n            subBranch = await frappe.db.get_value('Sub Branch', frm.doc.custom_sub_branch,\n                ['branch', 'custom_supplier', 'capex_budget', 'opex_budget', 'minimum_order_value', 'maximum_order_value']\n            );\n            \n            if (subBranch && subBranch.message && subBranch.message.branch) {\n                branch = await frappe.db.get_value('Branch', subBranch.message.branch,\n                    ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n                );\n                \n                if (branch && branch.message && branch.message.custom_supplier) {\n                    supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                        ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                    );\n                }\n            }\n        }\n    }\n\n    return { subBranch, branch, supplier };\n}\n\nfunction validateMinMax(total, minValue, maxValue, entityType, entityName) {\n    if (minValue !== 0 || maxValue !== 0) {\n        if (total < minValue || total > maxValue) {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between ${entityType}'s minimum value ${format_currency(minValue)} and maximum value ${format_currency(maxValue)} for ${entityName}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction validateBudgetLimit(total, budget, budgetType, entityType, entityName) {\n    if (budget > 0 && total > budget) {\n        frappe.msgprint({\n            title: __(`${budgetType} Budget Exceeded`),\n            message: __(`Total ${budgetType} amount (${format_currency(total)}) exceeds ${entityType} ${budgetType} budget (${format_currency(budget)}) for ${entityName}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function updateBudget(entityType, entityName, budgetField, amountToDeduct) {\n    if (amountToDeduct > 0) {\n      const currentBudget = await frappe.db.get_value(entityType, entityName, [budgetField]);\n\n        if (currentBudget && currentBudget.message && flt(currentBudget.message[budgetField]) > 0) {\n            const newBudget = flt(currentBudget.message[budgetField]) - amountToDeduct;\n            await frappe.db.set_value(entityType, entityName, budgetField, newBudget);\n            frappe.show_alert({\n                message: __(`${entityType} ${budgetField.replace('_budget','').replace('custom_','').replace('_',' ').toUpperCase()} budget updated to ${format_currency(newBudget)}`),\n                indicator: 'green'\n            }, 5);\n        }\n    }\n}\n\n// --- Validation Functions ---\n\nasync function validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateSubBranchMandatory(frm) {\n    // Skip for branch-level users\n    const isBranchUser = await isBranchLevelUser();\n    if (isBranchUser) {\n        return true;\n    }\n    \n    // Only check for regular users\n    if (!frm.doc.custom_sub_branch) {\n        frappe.msgprint({\n            title: __('Missing Sub-branch'),\n            message: __('Sub-branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateHierarchy(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    // For branch-level users, just check if branch exists\n    if (isBranchUser) {\n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    } \n    // For sub-branch users, check the full hierarchy\n    else {\n        if (!subBranch || !subBranch.message) {\n            frappe.msgprint({\n                title: __('Invalid Sub-branch'),\n                message: __('Could not fetch sub-branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        if (subBranch.message.branch !== frm.doc.custom_branch) {\n            frappe.msgprint({\n                title: __('Invalid Hierarchy'),\n                message: __('Selected sub-branch does not belong to the selected branch'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    }\n}\n\nasync function validateOrderValue(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    const total = flt(frm.doc.total);\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Branch\n        if (!validateMinMax(total, flt(branch.message.custom_minimum_order_value), \n                           flt(branch.message.custom_maximum_order_value), \n                           'Branch', frm.doc.custom_branch)) {\n            return false;\n        }\n        \n        // Supplier\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Sub-Branch\n        if (!validateMinMax(total, flt(subBranch.message.minimum_order_value), \n                           flt(subBranch.message.maximum_order_value), \n                           'Sub-branch', frm.doc.custom_sub_branch)) {\n            return false;\n        }\n        \n        // Supplier (Skip Branch)\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nasync function validateBudgetDates(frm) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const { supplier } = await getHierarchyData(frm); //Get supplier\n    if (!supplier || !supplier.message) return false;\n\n    const budget_start_day = parseInt(supplier.message.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.message.custom_budget_end_date);\n\n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateBudgets(frm) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    for (const item of frm.doc.items) {\n        if (!item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(capexTotal, flt(branch.message.custom_capex_budget), \n                                    \"Capex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(opexTotal, flt(branch.message.custom_opex_budget), \n                                    \"Opex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Sub-Branch\n            if (flt(subBranch.message.capex_budget) > 0) {\n                if (!validateBudgetLimit(capexTotal, flt(subBranch.message.capex_budget), \n                                        \"Capex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Sub-branch\n            if (flt(subBranch.message.opex_budget) > 0) {\n                if (!validateBudgetLimit(opexTotal, flt(subBranch.message.opex_budget), \n                                        \"Opex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nasync function updateBudgets(frm) {\n    try {\n        const isBranchUser = await isBranchLevelUser();\n        const { subBranch, branch, supplier } = await getHierarchyData(frm);\n        \n        if (!supplier || !supplier.message) return;\n        \n        // For branch-level users\n        if (isBranchUser) {\n            if (!branch || !branch.message) return;\n            \n            // Update CAPEX Budget for Branch\n            if (branch.message.custom_capex_budget && flt(branch.message.custom_capex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Branch\n            if (branch.message.custom_opex_budget && flt(branch.message.custom_opex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        } \n        // For sub-branch users\n        else {\n            if (!subBranch || !subBranch.message) return;\n            \n            // Update CAPEX Budget for Sub-Branch\n            if (subBranch.message.capex_budget && flt(subBranch.message.capex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Sub-Branch\n            if (subBranch.message.opex_budget && flt(subBranch.message.opex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator\nasync function validateAll(frm) {\n    try {\n        // Basic validations\n        if (!await validateBranchMandatory(frm)) return false;\n        if (!await validateSubBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        if (!await validateHierarchy(frm)) return false;\n\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) { return true; }\n        }\n\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            if (!await validateOrderValue(frm)) return false;\n            if (!await validateBudgetDates(frm)) return false;\n            if (!await validateBudgets(frm)) return false;\n        }\n        return true;\n\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Set form fields based on user role\nasync function setupFormFields(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    \n    if (isBranchUser) {\n        // For branch-level users, make sub_branch non-mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 0);\n    } else {\n        // For regular users, keep sub_branch mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 1);\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function (frm) {\n        frm.custom_validate = function () {\n            return validateAll(frm);\n        };\n    },\n    onload: function(frm) {\n        setupFormFields(frm);\n    },\n    refresh: function(frm) {\n        setupFormFields(frm);\n    },\n    validate: function (frm) {\n        return validateAll(frm);\n    },\n    before_save: function (frm) {\n        return validateAll(frm);\n    },\n    after_save: function (frm) {\n       if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n            updateBudgets(frm);\n        }\n    },\n    custom_branch: function (frm) {\n        validateAll(frm);\n    },\n    custom_sub_branch: function (frm) {\n        validateAll(frm);\n    },\n    transaction_date: function (frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function (frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-11 19:29:48.331271",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt merge v5",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstSubBranch = firstDoc.custom_sub_branch; // Fetch sub-branch\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        // Fetch all receipts first to validate supplier, branch, and sub-branch\n                                        const receiptPromises = selected_docs.map(doc => \n                                            new Promise((resolve, reject) => {\n                                                frappe.call({\n                                                    method: 'frappe.client.get',\n                                                    args: { \n                                                        doctype: 'Purchase Receipt', \n                                                        name: doc.name \n                                                    },\n                                                    callback: function(r) {\n                                                        if (r.message) {\n                                                            resolve(r.message);\n                                                        } else {\n                                                            reject('Failed to fetch receipt');\n                                                        }\n                                                    }\n                                                });\n                                            })\n                                        );\n\n                                        Promise.all(receiptPromises)\n                                            .then(receipts => {\n                                                // Validate that all receipts have the same supplier, branch, and sub-branch\n                                                const mismatchedSupplier = receipts.some(receipt => receipt.supplier !== firstSupplier);\n                                                const mismatchedBranch = receipts.some(receipt => receipt.custom_branch !== firstBranch);\n                                                const mismatchedSubBranch = receipts.some(receipt => receipt.custom_sub_branch !== firstSubBranch);\n\n                                                if (mismatchedSupplier) {\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Receipts cannot be merged because suppliers are different.')\n                                                    });\n                                                    return;\n                                                }\n\n                                                if (mismatchedBranch) {\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Receipts cannot be merged because branches are different.')\n                                                    });\n                                                    return;\n                                                }\n\n                                                if (mismatchedSubBranch) {\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Receipts cannot be merged because sub-branches are different.')\n                                                    });\n                                                    return;\n                                                }\n\n                                                frappe.call({\n                                                    method: 'frappe.client.get',\n                                                    args: {\n                                                        doctype: 'Purchase Taxes and Charges Template',\n                                                        name: firstTaxesAndCharges\n                                                    },\n                                                    callback: function(tax_template_response) {\n                                                        try {\n                                                            if (!tax_template_response.message) {\n                                                                throw new Error('Failed to fetch tax template');\n                                                            }\n\n                                                            const tax_template = tax_template_response.message;\n                                                            let consolidatedItems = [];\n                                                            let totalGrandTotal = 0;\n                                                            let totalFreightAmount = 0;\n                                                            let freightCostEntries = [];\n\n                                                            // Process receipts data for consolidated items\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                freightCostEntries.push({\n                                                                    purchase_receipt: receipt.name,\n                                                                    hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                    quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                    gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                    rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                    total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                    cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                    sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                    igst: flt(receipt.custom_igst_amount || 0),\n                                                                    amount: flt(receipt.custom_total_freight_amount || 0)\n                                                                });\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                custom_sub_branch: firstSubBranch, // Add sub-branch to Purchase Invoice\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        } catch (error) {\n                                                            console.error('Error in tax template processing:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error in tax template processing: ') + error.message\n                                                            });\n                                                        }\n                                                    }\n                                                });\n                                            })\n                                            .catch(error => {\n                                                console.error('Error processing receipts:', error);\n                                                frappe.msgprint({\n                                                    title: __('Error'),\n                                                    indicator: 'red',\n                                                    message: __('Error processing receipts: ') + error\n                                                });\n                                            });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-11 19:30:07.096437",
  "module": "o2o ErpNext",
  "name": "Freight Tax Calculate",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    before_save: function(frm) {\n        // Call the custom freight tax calculation function\n        calculate_freight_tax_distribution(frm);\n    },\n    \n    // Additional handler to recalculate when tax category changes\n    tax_category: function(frm) {\n        calculate_freight_tax_distribution(frm);\n    }\n});\n\n// Function to calculate freight tax and distribute it according to tax category\nfunction calculate_freight_tax_distribution(frm) {\n    // Get freight amount and total freight amount\n    let freight_amount = frm.doc.custom_freight_amount;\n    let total_freight_amount = frm.doc.custom_total_freight_amount;\n    let tax_category = frm.doc.tax_category;\n    \n    // Default to 0 if empty or null\n    if(freight_amount === \"\" || freight_amount === null || isNaN(freight_amount)) {\n        freight_amount = 0;\n    }\n    \n    if(total_freight_amount === \"\" || total_freight_amount === null || isNaN(total_freight_amount)) {\n        total_freight_amount = 0;\n    }\n    \n    // Calculate freight tax by subtracting freight amount from total freight amount\n    let freight_tax = total_freight_amount - freight_amount;\n    \n    // Reset tax distribution fields\n    frm.set_value('custom_cgst_amount', 0);\n    frm.set_value('custom_sgst_amount', 0);\n    frm.set_value('custom_igst_amount', 0);\n    \n    // Distribute tax based on tax_category\n    if (tax_category === \"In-State\") {\n        // Split the tax into CGST and SGST (half each)\n        let half_tax = freight_tax / 2;\n        frm.set_value('custom_cgst_amount', half_tax);\n        frm.set_value('custom_sgst_amount', half_tax);\n    } else if (tax_category === \"Out-State\") {\n        // Put the entire tax amount into IGST\n        frm.set_value('custom_igst_amount', freight_tax);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-03-11 20:00:14.407272",
  "module": "o2o ErpNext",
  "name": "PI Tax calculate",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        // Check if any of the GST summary fields are 0 (or not set)\n        let shouldShowButton = false;\n        \n        // Check 5%, 12%, 18%, and 28% goods value fields\n        let fieldValues = {\n            'custom_5_goods_value': frm.doc.custom_5_goods_value || 0,\n            'custom_12_goods_value': frm.doc.custom_12_goods_value || 0,\n            'custom_18_goods_value': frm.doc.custom_18_goods_value || 0,\n            'custom_28_goods_value': frm.doc.custom_28_goods_value || 0\n        };\n        \n        // Check if all fields are 0 but there are items with tax templates\n        let allFieldsZero = Object.values(fieldValues).every(val => parseFloat(val) === 0);\n        let hasTaxableItems = false;\n        \n        if (frm.doc.items && frm.doc.items.length > 0) {\n            // Check if there are items with tax templates\n            hasTaxableItems = frm.doc.items.some(item => item.item_tax_template);\n        }\n        \n        // Show button if we have taxable items but all summary fields are zero\n        shouldShowButton = hasTaxableItems && allFieldsZero;\n        \n        // Add the button only if needed\n        if (shouldShowButton) {\n            frm.add_custom_button(__('Fetch GST Values'), function() {\n                fixGstValues(frm);\n            }).addClass('btn-primary');\n        }\n    }\n});\n\n// Direct function to fix GST values without relying on template fetching\nfunction fixGstValues(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) {\n        frappe.msgprint({\n            title: __('Warning'),\n            indicator: 'orange',\n            message: __('No items found in this invoice')\n        });\n        return;\n    }\n    \n    // Start processing\n    frappe.show_alert({\n        message: __('Processing GST values...'),\n        indicator: 'blue'\n    }, 3);\n    \n    // Process each item in the invoice\n    frm.doc.items.forEach(function(item) {\n        let template = item.item_tax_template || \"\";\n        let amount = flt(item.amount || 0);\n        let gstRate = 0;\n        \n        // Extract GST rate from template name\n        if (template.includes(\"GST 5%\")) {\n            gstRate = 5;\n        } else if (template.includes(\"GST 12%\")) {\n            gstRate = 12;\n        } else if (template.includes(\"GST 18%\")) {\n            gstRate = 18;\n        } else if (template.includes(\"GST 28%\")) {\n            gstRate = 28;\n        }\n        \n        // Calculate GST value\n        if (gstRate > 0) {\n            let gstnValue = flt(amount * gstRate / 100, 2);\n            \n            // Directly set the value in the item row\n            frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', gstnValue);\n            console.log(`Updated item ${item.item_code} with GSTN value ${gstnValue} (${gstRate}% of ${amount})`);\n        }\n    });\n    \n    // Calculate summary values\n    let gst_5_total = 0;\n    let gst_12_total = 0;\n    let gst_18_total = 0;\n    let gst_28_total = 0;\n    let goods_5_total = 0;\n    let goods_12_total = 0;\n    let goods_18_total = 0;\n    let goods_28_total = 0;\n    \n    frm.doc.items.forEach(function(item) {\n        let template = item.item_tax_template || \"\";\n        let amount = flt(item.amount || 0);\n        let gstnValue = flt(item.custom_gstn_value || 0);\n        \n        if (template.includes(\"GST 5%\")) {\n            gst_5_total += gstnValue;\n            goods_5_total += amount;\n        } else if (template.includes(\"GST 12%\")) {\n            gst_12_total += gstnValue;\n            goods_12_total += amount;\n        } else if (template.includes(\"GST 18%\")) {\n            gst_18_total += gstnValue;\n            goods_18_total += amount;\n        } else if (template.includes(\"GST 28%\")) {\n            gst_28_total += gstnValue;\n            goods_28_total += amount;\n        }\n    });\n    \n    // Set summary values\n    frm.set_value('custom_gst_5__ot', flt(gst_5_total, 2));\n    frm.set_value('custom_gst_12__ot', flt(gst_12_total, 2));\n    frm.set_value('custom_gst_18__ot', flt(gst_18_total, 2));\n    frm.set_value('custom_gst_28__ot', flt(gst_28_total, 2));\n    frm.set_value('custom_5_goods_value', flt(goods_5_total, 2));\n    frm.set_value('custom_12_goods_value', flt(goods_12_total, 2));\n    frm.set_value('custom_18_goods_value', flt(goods_18_total, 2));\n    frm.set_value('custom_28_goods_value', flt(goods_28_total, 2));\n    \n    // Calculate total GSTN value\n    let total_gstn = flt(gst_5_total + gst_12_total + gst_18_total + gst_28_total, 2);\n    \n    // Try to set the GSTN Value field if it exists\n    if (frm.fields_dict['gstn_value']) {\n        frm.set_value('gstn_value', total_gstn);\n    }\n    \n    // Refresh the form\n    frm.refresh_fields();\n    \n    // Remove the button after successful calculation\n    frm.page.clear_primary_action();\n    frm.refresh();\n    \n    // Show success message\n    frappe.show_alert({\n        message: __('GST values fetched successfully'),\n        indicator: 'green'\n    }, 5);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-03-06 03:04:32.106286",
  "module": "o2o ErpNext",
  "name": "Budget Auto Update",
  "script": "// Custom Script for Supplier List\nfrappe.listview_settings['Supplier'] = frappe.listview_settings['Supplier'] || {};\n\n// Extend the existing list view settings\nObject.assign(frappe.listview_settings['Supplier'], {\n    onload: function(listview) {\n        // Only show to administrators and system managers\n        if (frappe.user.has_role('System Manager') || frappe.user.has_role('Administrator')) {\n            // Add button to the list view\n            listview.page.add_inner_button(__('Setup Monthly Budget Updates'), function() {\n                frappe.confirm(\n                    'This will set up automatic budget updates for both Branch and Sub Branch doctypes to run on the 1st of every month at midnight (00:00 hrs). Continue?',\n                    function() {\n                        frappe.call({\n                            method: \"o2o_erpnext.branch_update.setup_all_budget_updates\",\n                            freeze: true,\n                            freeze_message: \"Setting up scheduled jobs...\",\n                            callback: function(r) {\n                                frappe.msgprint({\n                                    title: \"Success\",\n                                    indicator: \"green\",\n                                    message: \"Scheduled jobs have been set up. Branch and Sub Branch budgets will be automatically updated on the 1st of every month at 00:00 hours.\"\n                                });\n                            }\n                        });\n                    }\n                );\n            });\n        }\n    }\n});",
  "view": "List"
 }
]