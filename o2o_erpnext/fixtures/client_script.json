[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-15 15:13:25.770162",
  "module": "o2o ErpNext",
  "name": "change label",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        console.log(\"====++++++++++++++++++++++++++++++\")\n       \n        setTimeout(() => {\n            \n            $('.dropdown-menu a.dropdown-item').each(function() {\n                if ($(this).text().trim() === \"Return / Debit Note\") {\n                    $(this).text(\"Return / Credit Note\");\n                }\n            });\n        }, 300); \n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-04-21 13:05:54.355539",
  "module": null,
  "name": "Budget date",
  "script": "frappe.ui.form.on('Supplier', {\n    validate: function(frm) {\n        // Validate budget start date\n        let start_date = frm.doc.custom_budget_start_date;\n        if (start_date !== undefined && start_date !== null && start_date !== '') {\n            if (isNaN(start_date) || start_date < 1 || start_date > 31 || !Number.isInteger(parseFloat(start_date))) {\n                frappe.validated = false;\n                frappe.throw('Budget Start Date must be a whole number between 1 and 31');\n                return false;\n            }\n        }\n        \n        // Validate budget end date\n        let end_date = frm.doc.custom_budget_end_date;\n        if (end_date !== undefined && end_date !== null && end_date !== '') {\n            if (isNaN(end_date) || end_date < 1 || end_date > 31 || !Number.isInteger(parseFloat(end_date))) {\n                frappe.validated = false;\n                frappe.throw('Budget End Date must be a whole number between 1 and 31');\n                return false;\n            }\n        }\n    },\n    \n    // Also add real-time validation for better user experience\n    custom_budget_start_date: function(frm) {\n        validateInputField(frm, 'custom_budget_start_date');\n    },\n    \n    custom_budget_end_date: function(frm) {\n        validateInputField(frm, 'custom_budget_end_date');\n    }\n});\n\n// Function for real-time validation feedback\nfunction validateInputField(frm, fieldname) {\n    let value = frm.doc[fieldname];\n    let label = frappe.meta.get_label(frm.doctype, fieldname, frm.docname);\n    \n    if (value !== undefined && value !== null && value !== '') {\n        if (isNaN(value) || value < 1 || value > 31 || !Number.isInteger(parseFloat(value))) {\n            // Show message but don't throw (for better UX)\n            frappe.msgprint(`${label} must be a whole number between 1 and 31`);\n            // Clear the invalid value\n            frm.set_value(fieldname, '');\n        }\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 14:40:59.943879",
  "module": null,
  "name": "Auto PO Date",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Add button to manually trigger date calculation\n        frm.add_custom_button(__('Set Schedule Date'), function() {\n            set_schedule_date(frm);\n        });\n    },\n    \n    onload: function(frm) {\n        // Set schedule_date when form is first loaded\n        set_schedule_date(frm);\n    },\n    \n    transaction_date: function(frm) {\n        // Automatically set schedule_date when transaction_date changes\n        set_schedule_date(frm);\n    },\n    \n    before_save: function(frm) {\n        // Ensure schedule_date is set before saving\n        set_schedule_date(frm);\n    }\n});\n\nfunction set_schedule_date(frm) {\n    // For new documents, if transaction_date is not set, set it to today\n    if(frm.doc.__islocal && !frm.doc.transaction_date) {\n        let today = frappe.datetime.get_today();\n        frm.set_value('transaction_date', today);\n    }\n    \n    if(frm.doc.transaction_date) {\n        // Calculate schedule_date as transaction_date + 20 days\n        let transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n        let schedule_date = new Date(transaction_date);\n        schedule_date.setDate(schedule_date.getDate() + 20);\n        \n        // Format date to yyyy-mm-dd\n        let formatted_date = frappe.datetime.obj_to_str(schedule_date);\n        \n        // Only set if different to avoid triggering unnecessary events\n        if(frm.doc.schedule_date != formatted_date) {\n            frm.set_value('schedule_date', formatted_date);\n            frappe.show_alert(__('Schedule Date set to {0} (Transaction Date + 20 days)', [formatted_date]));\n        }\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-03-01 09:42:32.401327",
  "module": null,
  "name": "PR MERGE V5",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Get fiscal year first\n                frappe.call({\n                    method: 'frappe.client.get_list',\n                    args: {\n                        doctype: 'Fiscal Year',\n                        filters: {\n                            'year_start_date': ['<=', frappe.datetime.get_today()],\n                            'year_end_date': ['>=', frappe.datetime.get_today()]\n                        },\n                        fields: ['name']\n                    },\n                    callback: function(fiscal_response) {\n                        try {\n                            let display_fiscal_year = '';\n                            if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                let fiscal_year = fiscal_response.message[0].name;\n                                let start_year = fiscal_year.split('-')[0];\n                                let end_year = fiscal_year.split('-')[1];\n                                display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                            }\n\n                            frappe.call({\n                                method: 'frappe.client.get',\n                                args: { \n                                    doctype: 'Purchase Receipt', \n                                    name: selected_docs[0].name \n                                },\n                                callback: function(firstDocResponse) {\n                                    try {\n                                        if (!firstDocResponse.message) {\n                                            throw new Error('Failed to fetch first Purchase Receipt');\n                                        }\n\n                                        const firstDoc = firstDocResponse.message;\n                                        const firstVendor = firstDoc.custom_vendor;\n                                        const firstSupplier = firstDoc.supplier;\n                                        const firstBranch = firstDoc.custom_branch;\n                                        const firstTaxCategory = firstDoc.tax_category;\n                                        const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                        const isReturn = firstDoc.is_return || 0;\n                                        const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                        const supplier_address = firstDoc.supplier_address;\n                                        const shipping_address = firstDoc.shipping_address;\n                                        const billing_address = firstDoc.billing_address;\n                                        const vendor_address = firstDoc.custom_vendor_address;\n\n                                        const naming_series = isReturn ? \n                                            `DN./.${display_fiscal_year}./.###` : \n                                            `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                        if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        if (!firstBranch) {\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Branch is not set for the first selected receipt.')\n                                            });\n                                            return;\n                                        }\n\n                                        frappe.call({\n                                            method: 'frappe.client.get',\n                                            args: {\n                                                doctype: 'Purchase Taxes and Charges Template',\n                                                name: firstTaxesAndCharges\n                                            },\n                                            callback: function(tax_template_response) {\n                                                try {\n                                                    if (!tax_template_response.message) {\n                                                        throw new Error('Failed to fetch tax template');\n                                                    }\n\n                                                    const tax_template = tax_template_response.message;\n                                                    let consolidatedItems = [];\n                                                    let totalGrandTotal = 0;\n                                                    let totalFreightAmount = 0;\n                                                    let freightCostEntries = [];\n\n                                                    const promises = selected_docs.map(doc => \n                                                        new Promise((resolve, reject) => {\n                                                            frappe.call({\n                                                                method: 'frappe.client.get',\n                                                                args: { \n                                                                    doctype: 'Purchase Receipt', \n                                                                    name: doc.name \n                                                                },\n                                                                callback: function(r) {\n                                                                    if (r.message) {\n                                                                        resolve(r.message);\n                                                                    } else {\n                                                                        reject('Failed to fetch receipt');\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                    );\n\n                                                    Promise.all(promises)\n                                                        .then(receipts => {\n                                                            freightCostEntries = receipts.map(receipt => ({\n                                                                purchase_receipt: receipt.name,\n                                                                hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                igst: flt(receipt.custom_igst_amount || 0),\n                                                                amount: flt(receipt.custom_total_freight_amount || 0)\n                                                            }));\n\n                                                            receipts.forEach(receipt => {\n                                                                totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                receipt.items.forEach(item => {\n                                                                    const existingItem = consolidatedItems.find(\n                                                                        ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                             ci.custom_gstn_value === item.custom_gstn_value\n                                                                    );\n\n                                                                    if (existingItem) {\n                                                                        if (existingItem.uom !== item.uom) {\n                                                                            frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                        }\n\n                                                                        const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                        const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                        \n                                                                        existingItem.qty = newQty;\n                                                                        existingItem.amount = newAmount;\n                                                                        existingItem.rate = flt(newAmount / newQty);\n                                                                        existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                        \n                                                                        if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                        existingItem.pr_details.push({\n                                                                            pr_detail: item.name,\n                                                                            purchase_receipt: receipt.name,\n                                                                            amount: flt(item.amount),\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item\n                                                                        });\n                                                                    } else {\n                                                                        consolidatedItems.push({\n                                                                            item_code: item.item_code,\n                                                                            item_name: item.item_name,\n                                                                            qty: flt(item.qty),\n                                                                            rate: flt(item.rate),\n                                                                            amount: flt(item.amount),\n                                                                            warehouse: item.warehouse,\n                                                                            custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                            custom_gstn_value: item.custom_gstn_value,\n                                                                            uom: item.uom,\n                                                                            stock_uom: item.stock_uom,\n                                                                            conversion_factor: item.conversion_factor,\n                                                                            purchase_receipt: receipt.name,\n                                                                            pr_detail: item.name,\n                                                                            purchase_order: item.purchase_order,\n                                                                            purchase_order_item: item.purchase_order_item,\n                                                                            pr_details: [{\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            }]\n                                                                        });\n                                                                    }\n                                                                });\n                                                            });\n\n                                                            let taxes = [];\n                                                            if (tax_template.taxes) {\n                                                                taxes = tax_template.taxes.map((tax, idx) => {\n                                                                    let row_id = null;\n                                                                    if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                        if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                            row_id = tax.row_id;\n                                                                        } else {\n                                                                            frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                        }\n                                                                    }\n\n                                                                    return {\n                                                                        account_head: tax.account_head,\n                                                                        charge_type: tax.charge_type,\n                                                                        row_id: row_id,\n                                                                        description: tax.description,\n                                                                        included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                        included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                        rate: tax.rate,\n                                                                        account_currency: tax.account_currency,\n                                                                        cost_center: tax.cost_center\n                                                                    };\n                                                                });\n                                                            }\n\n                                                            const doc = {\n                                                                doctype: 'Purchase Invoice',\n                                                                naming_series: naming_series,\n                                                                custom_fiscal_year: display_fiscal_year,\n                                                                custom_vendor_code: vendor_code,\n                                                                supplier: firstSupplier,\n                                                                custom_vendor: firstVendor,\n                                                                custom_branch: firstBranch,\n                                                                tax_category: firstTaxCategory,\n                                                                taxes_and_charges: firstTaxesAndCharges,\n                                                                taxes: taxes,\n                                                                items: consolidatedItems,\n                                                                custom_grand_total: totalGrandTotal,\n                                                                custom_freight_amount: totalFreightAmount,\n                                                                update_stock: 0,\n                                                                is_return: isReturn,\n                                                                supplier_address: supplier_address,\n                                                                shipping_address: shipping_address,\n                                                                billing_address: billing_address,\n                                                                custom_vendor_address: vendor_address,\n                                                                custom_freight_cost_data: freightCostEntries\n                                                            };\n\n                                                            console.log('Creating Purchase Invoice with:', doc);\n\n                                                            frappe.call({\n                                                                method: 'frappe.client.insert',\n                                                                args: { doc: doc },\n                                                                callback: function(response) {\n                                                                    if (response.message) {\n                                                                        frappe.msgprint({\n                                                                            title: __('Success'),\n                                                                            indicator: 'green',\n                                                                            message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                        });\n\n                                                                        // Refresh listview to show updated status\n                                                                        listview.refresh();\n                                                                    } else {\n                                                                        frappe.msgprint({\n                                                                            title: __('Error'),\n                                                                            indicator: 'red',\n                                                                            message: __('Failed to create Purchase Invoice')\n                                                                        });\n                                                                    }\n                                                                }\n                                                            });\n                                                        })\n                                                        .catch(error => {\n                                                            console.error('Error processing receipts:', error);\n                                                            frappe.msgprint({\n                                                                title: __('Error'),\n                                                                indicator: 'red',\n                                                                message: __('Error processing receipts: ') + error\n                                                            });\n                                                        });\n                                                } catch (error) {\n                                                    console.error('Error in tax template processing:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error in tax template processing: ') + error.message\n                                                    });\n                                                }\n                                            }\n                                        });\n                                    } catch (error) {\n                                        console.error('Error processing first document:', error);\n                                        frappe.msgprint({\n                                            title: __('Error'),\n                                            indicator: 'red',\n                                            message: __('Error processing first document: ') + error.message\n                                        });\n                                    }\n                                }\n                            });\n                        } catch (error) {\n                            console.error('Error in fiscal year processing:', error);\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Error in fiscal year processing: ') + error.message\n                            });\n                        }\n                    }\n                });\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-04-03 01:45:34.087733",
  "module": "o2o ErpNext",
  "name": "Employee Restrict",
  "script": "frappe.listview_settings['Employee'] = {\n    // Array of roles that should have restricted access\n    restrictedRoles: ['Person Raising Request', 'Requisition Approver', 'PO Approver'],\n    \n    // Check if current user has any of the restricted roles\n    hasRestrictedRole: function() {\n        return this.restrictedRoles.some(role => frappe.user_roles.includes(role));\n    },\n    \n    onload: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Remove existing filters\n            listview.filter_area.clear();\n            \n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_sub_branch']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.custom_sub_branch) {\n                        // Add non-removable filter\n                        listview.filter_area.add([\n                            ['Employee', 'custom_sub_branch', '=', r.message.custom_sub_branch]\n                        ]);\n                        \n                        // Store the sub-branch for reference\n                        listview.custom_sub_branch = r.message.custom_sub_branch;\n                        \n                        // Refresh list\n                        listview.refresh();\n                        \n                        // Hide filter area buttons\n                        $('.filter-selector').hide();\n                        $('.filter-button').hide();\n                    } else {\n                        // If no sub-branch found, show empty list\n                        listview.filter_area.add([\n                            ['Employee', 'name', '=', '']\n                        ]);\n                        listview.refresh();\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Prevent filter removal\n            if (listview.custom_sub_branch) {\n                let current_filters = listview.filter_area.get();\n                let sub_branch_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_sub_branch' && f[3] === listview.custom_sub_branch\n                );\n                \n                if (!sub_branch_filter_exists) {\n                    // Re-add the sub-branch filter if it was removed\n                    listview.filter_area.add([\n                        ['Employee', 'custom_sub_branch', '=', listview.custom_sub_branch]\n                    ]);\n                }\n            }\n            \n            // Hide filter area and buttons\n            $('.filter-selector').hide();\n            $('.filter-button').hide();\n            $('.filter-box .filter-area').css('pointer-events', 'none');\n            \n            // Remove filter tags close button\n            setTimeout(() => {\n                $('.filter-tag .remove-filter').hide();\n            }, 100);\n        }\n    },\n\n    before_refresh: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Prevent clearing filters\n            if (listview.custom_sub_branch) {\n                let current_filters = listview.filter_area.get();\n                let sub_branch_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_sub_branch' && f[3] === listview.custom_sub_branch\n                );\n                \n                if (!sub_branch_filter_exists) {\n                    return false; // Prevent refresh if sub-branch filter was removed\n                }\n            }\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (this.hasRestrictedRole()) {\n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_sub_branch']\n                    },\n                    callback: function(r) {\n                        if (!r.message || !r.message.custom_sub_branch) {\n                            frappe.throw(__('You must have a sub-branch assigned to your employee record to create an employee.'));\n                            reject();\n                        } else {\n                            resolve();\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-21 03:43:34.868467",
  "module": "o2o ErpNext",
  "name": "GST ITEM CAL",
  "script": "frappe.ui.form.on('Purchase Order', {\n    after_save: function(frm) {\n        // Call the server-side function after save\n        frappe.call({\n            method: \"o2o_erpnext.api.purchase_order.calculate_gst_values\",\n            args: {\n                \"doc_name\": frm.doc.name\n            },\n            callback: function(r) {\n                if (r.message && r.message.status === \"success\") {\n                    // Refresh the form to show the updated values\n                    frm.reload_doc();\n                    \n                    // Show a success message\n                    frappe.show_alert({\n                        message: __(\"GST values calculated successfully\"),\n                        indicator: 'green'\n                    }, 5);\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __(\"Error\"),\n                        indicator: 'red',\n                        message: r.message.message\n                    });\n                }\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-13 04:59:21.503335",
  "module": "o2o ErpNext",
  "name": "Approver script",
  "script": "frappe.ui.form.on('Purchase Order', {\n    // Function to fetch the approver based on the custom_branch\n    refresh: function(frm) {\n        // Get the value of custom_branch that was already set by another script\n        let branchValue = frm.doc.custom_branch;\n        \n        if (branchValue) {\n            // Use the branch value to fetch the appropriate approver\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Employee',\n                    filters: {\n                        'branch': branchValue,\n                        'custom_roles': ['like', '%PO Approver%']\n                    },\n                    fields: ['employee_name', 'custom_user_email']\n                },\n                callback: function(response) {\n                    if (response.message && response.message.length > 0) {\n                        const employee = response.message[0];\n                        const fullName = employee.employee_name || '';\n                        const userEmail = employee.custom_user_email || '';\n                        \n                        const approverFormat = `${fullName}:${userEmail}`;\n                        frm.set_value('custom__approver_name_and_email', approverFormat);\n                    }\n                }\n            });\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Vendor",
  "enabled": 1,
  "modified": "2025-01-29 11:18:42.162173",
  "module": "o2o ErpNext",
  "name": "Vendor v1",
  "script": "frappe.ui.form.on('Vendor', {\n    refresh: function(frm) {\n        console.log('Refresh triggered');\n        console.log('user_id:', frm.doc.user_id);\n        console.log('email_id:', frm.doc.email_id);\n        \n        // Add custom button if user is not created/linked\n        if (!frm.doc.user_id && frm.doc.email_id) {\n            console.log('Adding Create User button');\n            frm.add_custom_button(__('Create User'), () => {\n                console.log('Create User button clicked');\n                create_vendor_user(frm);\n            }).addClass('btn-primary');\n        }\n    }\n});\n\n// Separate function for creating vendor user\nfunction create_vendor_user(frm) {\n    console.log('Creating vendor user for:', frm.doc.name);\n    \n    if (!frm.doc.email_id) {\n        frappe.throw(__(\"Please enter Email ID\"));\n        return;\n    }\n    \n    frappe.call({\n        method: \"o2o_erpnext.api.vendor.create_vendor_user\",\n        args: {\n            vendor: frm.doc.name\n        },\n        freeze: true,\n        freeze_message: __(\"Creating User...\"),\n        callback: function(r) {\n            console.log('API response:', r);\n            if (!r.exc) {\n                frm.reload_doc();\n                setTimeout(function() {\n                    cur_frm.refresh();\n                }, 1000);\n            }\n        },\n        error: function(r) {\n            console.error('API error:', r);\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-01-16 10:53:58.115896",
  "module": "o2o ErpNext",
  "name": "Supplier Restrictions",
  "script": "frappe.ui.form.on('Supplier', {\n    onload: function(frm) {\n        if (frm.is_new()) {\n            frappe.call({\n                method: 'o2o_erpnext.api.supplier_validation.check_supplier_permission',\n                callback: function(r) {\n                    if (r.message) {\n                        if (!r.message.allowed) {\n                            frappe.validated = false;\n                            frappe.msgprint({\n                                title: __('Not Allowed'),\n                                indicator: 'red',\n                                message: r.message.message\n                            });\n                            setTimeout(() => {\n                                frappe.set_route('List', 'Supplier');\n                            }, 2000);\n                        } else {\n                            frm.set_value('custom_user', frappe.session.user);\n                        }\n                    }\n                }\n            });\n        }\n    },\n    \n    validate: function(frm) {\n        if (frm.is_new()) {\n            // Check if custom_user matches current user\n            if (frm.doc.custom_user !== frappe.session.user) {\n                frappe.validated = false;\n                frappe.msgprint({\n                    title: __('Not Allowed'),\n                    indicator: 'red',\n                    message: __('You cannot modify the user assignment')\n                });\n                return false;\n            }\n            return true;\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-12-04 20:41:56.962751",
  "module": "o2o ErpNext",
  "name": "Role Profile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Role Profile'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "State",
  "enabled": 1,
  "modified": "2024-12-04 20:43:03.263179",
  "module": null,
  "name": "State Master List View",
  "script": "frappe.listview_settings['State'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "City",
  "enabled": 1,
  "modified": "2024-12-04 20:54:03.155072",
  "module": null,
  "name": "City Master List view",
  "script": "frappe.listview_settings['City'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 14:40:59.879960",
  "module": "o2o ErpNext",
  "name": "PR fetch",
  "script": "frappe.listview_settings['Purchase Order'] = {\n    hide_name_column: true,\n    onload: function(listview) {\n        listview.page.add_button(__('Print PO'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n            let pdfUrl = frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n                + \"doctype=\" + encodeURIComponent(\"Purchase Order\")\n                + \"&name=\" + encodeURIComponent(selected[0].name)\n                + \"&trigger_print=0\"\n                + \"&format=Purchase Order\"\n                + \"&no_letterhead=0\"\n                + \"&_lang=en\"\n            );\n            window.open(pdfUrl);\n        }, true).addClass('btn-primary');\n\n        listview.page.add_button(__('Print PR'), function() {\n            let selected = listview.get_checked_items();\n            if (!selected.length || selected.length > 1) {\n                frappe.msgprint('Please select one Purchase Order');\n                return;\n            }\n\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Purchase Receipt',\n                    filters: [['Purchase Receipt Item', 'purchase_order', '=', selected[0].name]],\n                    fields: ['name', 'posting_date', 'supplier', 'grand_total', 'status']\n                },\n                callback: function(r) {\n                    if (!r.message?.length) {\n                        frappe.msgprint('No Purchase Receipts found');\n                        return;\n                    }\n\n                    let d = new frappe.ui.Dialog({\n                        title: 'Select Purchase Receipt to Print',\n                        fields: [{\n                            label: 'Select Purchase Receipt',\n                            fieldname: 'selected_pr',\n                            fieldtype: 'Select',\n                            options: r.message.map(pr => ({\n                                label: `${pr.name} | ${frappe.datetime.str_to_user(pr.posting_date)} | ${format_currency(pr.grand_total)}`,\n                                value: pr.name\n                            })),\n                            reqd: 1\n                        }],\n                        primary_action_label: 'Print',\n                        primary_action(values) {\n                            frappe.set_route('print', 'Purchase Receipt', values.selected_pr);\n                            d.hide();\n                        }\n                    });\n\n                    let receipt_list = `<div class=\"receipt-list\" style=\"margin-top: 10px;\">\n                        <table class=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>Receipt No</th>\n                                    <th>Date</th>\n                                    <th>Status</th>\n                                    <th>Amount</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                            ${r.message.map(pr => `\n                                <tr>\n                                    <td>${pr.name}</td>\n                                    <td>${frappe.datetime.str_to_user(pr.posting_date)}</td>\n                                    <td>${pr.status}</td>\n                                    <td>${format_currency(pr.grand_total)}</td>\n                                </tr>\n                            `).join('')}\n                            </tbody>\n                        </table>\n                    </div>`;\n                    \n                    d.fields_dict.selected_pr.$wrapper.append(receipt_list);\n                    d.show();\n                }\n            });\n        }, true).addClass('btn-primary');\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Order'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Purchase Order'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Purchase Order'] = {\n\trefresh: function(listview) {\n\t   \t$(\"use.like-icon\").hide();\n\t}\n};\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-04-03 05:00:55.542056",
  "module": "o2o ErpNext",
  "name": "PO print script for PI",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    onload: function(listview) {\n        // Original PI & PO Print Button\n        listview.page.add_button(__('Print PI & PO'), function() {\n            let selected_docs = listview.get_checked_items();\n            \n            if (selected_docs.length === 0) {\n                frappe.msgprint('Please select a Purchase Invoice');\n                return;\n            }\n            if (selected_docs.length > 1) {\n                frappe.msgprint('Please select only one Purchase Invoice');\n                return;\n            }\n            \n            // Show loading indicator\n            frappe.show_alert({\n                message: __('Preparing PDF, please wait...'),\n                indicator: 'blue'\n            }, 3);\n            \n            // Directly open the URL that triggers the download\n            var download_url = frappe.urllib.get_full_url(\n                '/api/method/o2o_erpnext.api.merge_pdf.merge_invoice_and_po_pdfs?' +\n                'invoice_name=' + encodeURIComponent(selected_docs[0].name)\n            );\n            \n            // Use the same window.open method as your other buttons\n            var w = window.open(download_url);\n            \n            if (w) {\n                frappe.show_alert({\n                    message: __('PDF download initiated'),\n                    indicator: 'green'\n                }, 3);\n            } else {\n                frappe.show_alert({\n                    message: __('Failed to download PDF. Please enable pop-ups and try again.'),\n                    indicator: 'red'\n                }, 5);\n            }\n        });\n\n\n        // New Button: Print with Header\n        listview.page.add_button(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('With Header Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // New Button: Print without Header\n        listview.page.add_button(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800);\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};\nlistview.refresh();\nfrappe.listview_settings['Purchase Invoice'] = {\n\tonload: function(listview) {\n\t\tfrappe.route_options = {\n\t\t\t\"status\": [\"=\", \"Draft\"]\n\t\t};\n\t}\n};\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.070530",
  "module": "o2o ErpNext",
  "name": "Branch",
  "script": "frappe.ui.form.on('Branch', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_parent_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\n// frappe.ui.form.on('Shipping Address Details', {\n// \trefresh(frm) {\n// \t\t// your code here\n// \t\tfrm.set_query(\"city\", function() {\n//         return {\n//             \"filters\": {\n//                 city in state\n//             }\n//         };\n//     });\n// \t}\n// })\n\nfrappe.ui.form.on('Branch',  {\n    refresh: function(frm) {\n        frm.set_query(\"city\", \"custom_shipping_address_details\", function (doc, cdt, cdn) {\n          return {\n            \"filters\": {\n              \"State\": \"Maharashtra\",\n            },\n          };\n        });\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Branch', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.463326",
  "module": "o2o ErpNext",
  "name": "Item Master",
  "script": "frappe.ui.form.on('Item', {\n    validate: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_o2o_rates: function(frm) {\n        console.log(frm.doc.custom_o2o_rates);\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    },\n    custom_gst_slab_percentage: function(frm) {\n        if (frm.doc.custom_o2o_rates && frm.doc.custom_gst_slab_percentage) {\n            var o2o_rates = parseFloat(frm.doc.custom_o2o_rates) || 0;\n            var gst_percentage = parseFloat(frm.doc.custom_gst_slab_percentage) || 0;\n            \n            var gst_amount = o2o_rates * gst_percentage / 100;\n            amt_in_gst = gst_amount + o2o_rates;\n            frm.set_value('custom_amt_in_gst',amt_in_gst);\n            frm.refresh_field('custom_amt_in_gst');\n        }\n    }\n    \n});\n\nfrappe.ui.form.on(\"Item\", {\nrefresh:function(frm) {\n    $('.form-attachments').hide()\n    $('.form-tags').hide()\n    $('.form-share').hide()\n    $('.form-attachments').hide()\n  }\n});\n\nfrappe.ui.form.on('Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_sub_category\", function() {\n        return {\n            \"filters\": {\n                \"is_group\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Item', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            // frm.remove_custom_button('Stock Ledger', 'View');\n            // frm.remove_custom_button('Stock Balance', 'View');\n            frm.remove_custom_button('Add / Edit Prices', 'Actions');\n            frm.remove_custom_button('Duplicate');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-11 19:59:19.534576",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    },\n    supplier: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let supplier = frm.doc.supplier;\n        if (supplier) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = supplier.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_supplier_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_supplier_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 3).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            // frm.remove_custom_button('Preview');\n            frm.remove_custom_button('Stock Ledger', 'Preview');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            // frm.remove_custom_button('View');\n            frm.remove_custom_button('Asset', 'View');\n            frm.remove_custom_button('Stock Ledger', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Asset Movement', 'View');\n            frm.remove_custom_button('Purchase Return', 'Create');\n            frm.remove_custom_button('Make Stock Entry', 'Create');\n            // frm.remove_custom_button('Purchase Invoice', 'Create');\n            frm.remove_custom_button('Retention Stock Entry', 'Create');\n            frm.remove_custom_button('Close', 'Status');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Receipt\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n    },\n    custom_weight_in_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n    },\n    custom_rate_per_kg: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    },\n    custom_freight_tax_rate_: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_weight_in_kg = frm.doc.custom_weight_in_kg;\n        let custom_rate_per_kg = frm.doc.custom_rate_per_kg;\n        let tax_percent = frm.doc.custom_freight_tax_rate_;\n        let total_freight_amount = 0;\n        let freight_tax_amount = 0;\n        if(custom_weight_in_kg==\"\") {\n            custom_weight_in_kg = 0;\n        }\n        \n        if(custom_rate_per_kg==\"\") {\n            custom_rate_per_kg = 0;\n        }\n        \n        if(tax_percent==\"\") {\n            tax_percent = 0;\n        }\n        \n        let freight_amount = 0;\n        freight_amount = custom_weight_in_kg * custom_rate_per_kg;\n        \n        freight_tax_amount = freight_amount * tax_percent /100;\n        total_freight_amount = freight_amount + freight_tax_amount;\n        \n        frm.set_value('custom_freight_amount', freight_amount);\n        frm.set_value('custom_total_freight_amount', total_freight_amount);\n        \n    }\n    \n});\n\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        let total_gstn_value = 0;\n         $.each(frm.doc.items, function(i, d) {\n             \n             total_gstn_value = parseFloat(total_gstn_value) + parseFloat(d['custom_gstn_value']);\n             console.log(d);\n             console.log(total_gstn_value);\n         });\n        \n        frm.set_value('custom_total_gstn', total_gstn_value);\n    },\n});\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.540102",
  "module": "o2o ErpNext",
  "name": "Supplier Master",
  "script": "frappe.ui.form.on('Supplier', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_branch\", function() {\n        return {\n            \"filters\": {\n                \"custom_child_branch\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfunction custom_is_vendor(frm) {\n  \n                    if (custom_is_vendor = 0) {\n                        custom_branch = 1;\n                   \n                }\n            };\nfrappe.ui.form.on('Supplier', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Bank Account', 'Create');\n            frm.remove_custom_button('Pricing Rule', 'Create');\n            frm.remove_custom_button('Accounts Payable', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n            frm.remove_custom_button('Get Supplier Group Details', 'Actions');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Supplier', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Supplier\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.210238",
  "module": "o2o ErpNext",
  "name": "Purchase_Receipt_Frieght_Calc",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    // Trigger on form refresh or save\n    refresh: function(frm) {\n        // Trigger when the document is saved\n        frm.add_custom_button(__('Calculate Charges'), function() {\n            calculate_freight_and_forwarding(frm);\n        });\n        \n    },\n    // Trigger when custom fields are changed\n    freight_charges: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_weight_in_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    },\n    custom_rate_per_kg: function(frm) {\n        calculate_freight_and_forwarding(frm);\n    }\n\n});\n\nfunction calculate_freight_and_forwarding(frm) {\n    // console.log(\"here\");\n    // Add your calculation logic here\n    let custom_weight_in_kg = frm.doc.custom_weight_in_kg || 0;\n    let custom_rate_per_kg = frm.doc.custom_rate_per_kg || 0;\n    let total_freight_charges = custom_weight_in_kg * custom_rate_per_kg;\n    let freight_cnt = 0;\n    // console.log(frm.doc)\n    if (frm.doc.taxes) {\n        $.each(frm.doc.taxes || [], function (j, tax) {\n            if (tax.account_head) {\n                \n                if (tax.account_head.includes('Freight and Forwarding Charges') && freight_cnt == 0) {\n                    // console.log(\"here\"+ tax.account_head + \"  =>\" + freight_cnt);\n                    frappe.model.set_value(tax.doctype, tax.name, 'tax_amount', total_freight_charges);\n                    frm.refresh_field('purchase_taxes_and_charges');\n                    freight_cnt++;\n                } \n            }\n        });\n        \n        // return false;\n        // console.log(item)\n        \n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.503025",
  "module": "o2o ErpNext",
  "name": "Item Master List View",
  "script": "frappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"],[data-label=\"Print\"],[data-label=\"add_tags\"]').parent().parent().remove()\n};\n\n//List view menu contents remove\nfrappe.listview_settings['Item'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item'] = { // And other doctype names\n    hide_name_column: true\n}\nfrappe.listview_settings['Item'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.847564",
  "module": "o2o ErpNext",
  "name": "Item Group Master",
  "script": "//Remove form view menu contents\nfrappe.listview_settings['Item Group'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Group'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\nfrappe.listview_settings['Item Group'] = { // And other doctype names\n    hide_item_group_name_column: true\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.522104",
  "module": "o2o ErpNext",
  "name": "Supplier Master List View",
  "script": "frappe.listview_settings['Supplier'] = { // And other doctype names\n    hide_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Supplier'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\n//Remove Action button menu contents\nfrappe.listview_settings['Supplier'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.135635",
  "module": "o2o ErpNext",
  "name": "Branch Master List View",
  "script": "frappe.listview_settings['Branch'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['Branch'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Branch'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Group",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.482973",
  "module": "o2o ErpNext",
  "name": "Item Group",
  "script": "frappe.ui.form.on('Item Group', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Items');\n        }, 10);\n    }\n});\nfrappe.ui.form.on(\"Item Group\", \"validate\", function(frm) {\n    cur_frm.set_value(\"custom_created_user\", frm.doc.owner);\n});\n\n//Remove Form View Menu contents\nfrappe.ui.form.on('Item Group', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Item%20Group\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.119512",
  "module": "o2o ErpNext",
  "name": "Item Price List View",
  "script": "frappe.listview_settings['Item Price'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n        listview.page.find('[data-label=\"Dashboard\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Item Price'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.086980",
  "module": "o2o ErpNext",
  "name": "Brand Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Brand'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Brand'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.037036",
  "module": "o2o ErpNext",
  "name": "File Master List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['File'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"Home\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"New%20Folder\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import%20Zip\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['File'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export%20as%20zip\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.987375",
  "module": "o2o ErpNext",
  "name": "Data Import List View",
  "script": "//List view menu contents remove\nfrappe.listview_settings['Data Import'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Data Import'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.576602",
  "module": "o2o ErpNext",
  "name": "User Master List View",
  "script": "frappe.listview_settings['User'] = { // And other doctype names\n    hide_name_column: true\n}\n//Remove form view menu contents\nfrappe.listview_settings['User'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        // listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['User'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.227717",
  "module": "o2o ErpNext",
  "name": "User Master",
  "script": "frappe.ui.form.on('User', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Set User Permissions','Permissions');\n            frm.remove_custom_button('View Permitted Documents','Permissions');\n            frm.remove_custom_button('Create User Email');\n            }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('User', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20User\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.920644",
  "module": "o2o ErpNext",
  "name": "User Permission Master",
  "script": "frappe.ui.form.on('User Permission', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20User%20Permission\"],\\\n            [data-label=\"Customize\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('User Permission', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('View Permitted Documents');\n        }, 10);\n    }\n});\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.881342",
  "module": "o2o ErpNext",
  "name": "Role Prpfile List View",
  "script": "frappe.listview_settings['Role Profile'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['Role Profile'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.103016",
  "module": "o2o ErpNext",
  "name": "Item Price Master",
  "script": "frappe.ui.form.on('Item Price', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Item%20Price\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Brand",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.053533",
  "module": "o2o ErpNext",
  "name": "Brand Master",
  "script": "frappe.ui.form.on('Brand', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "File",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.020114",
  "module": "o2o ErpNext",
  "name": "File Master",
  "script": "frappe.ui.form.on('File', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20File\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Data Import",
  "enabled": 1,
  "modified": "2024-10-25 23:33:52.004100",
  "module": "o2o ErpNext",
  "name": "Data Import Master",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Data Import', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Data%20Import\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Workspace",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.969652",
  "module": "o2o ErpNext",
  "name": "Workspace Master",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button(\"Edit\");\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.953615",
  "module": "o2o ErpNext",
  "name": "Bank Master List View",
  "script": "frappe.listview_settings['Bank'] = { // And other doctype names\n    hide_custom_account_name_column: true\n}\n//List view menu contents remove\nfrappe.listview_settings['Bank'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Bank'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Bank",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.936970",
  "module": "o2o ErpNext",
  "name": "Bank Master",
  "script": "frappe.ui.form.on('Bank', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"New%20Bank\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "User Permission",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.900955",
  "module": "o2o ErpNext",
  "name": "User Permission List View",
  "script": "frappe.listview_settings['User Permission'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\nfrappe.listview_settings['User Permission'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Role Profile",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.864224",
  "module": "o2o ErpNext",
  "name": "Role Profile",
  "script": "//Remove Form View Menu contents\nfrappe.ui.form.on('Role Profile', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"New%20Role%20Profile\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.812253",
  "module": "o2o ErpNext",
  "name": "GST Slab List View",
  "script": "frappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Export\"]').parent().parent().remove()\n};\n//Remove form view menu contents\nfrappe.listview_settings['Gst Slab'] = {\n    refresh(listview) {\n        listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n        listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n    }\n}\nfrappe.listview_settings['Gst Slab'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Gst Slab",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.830655",
  "module": "o2o ErpNext",
  "name": "GST Slab",
  "script": "frappe.ui.form.on('Gst Slab', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Rename\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Reconciliation",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.685804",
  "module": "o2o ErpNext",
  "name": "Stock Reconciliation",
  "script": "frappe.ui.form.on('Stock Reconciliation', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Fetch Items from Warehouse');\n            frm.remove_custom_button('Product Bundle', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.794939",
  "module": "o2o ErpNext",
  "name": "Stock Entry",
  "script": "\nfrappe.ui.form.on('Stock Entry', {\n    refresh(frm) {\n        setTimeout(() => {\n            frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Invoice', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Get Items From');\n            frm.remove_custom_button('Bill of Materials', 'Get Items From');\n            frm.remove_custom_button('Expired Batches', 'Get Items From');\n            frm.remove_custom_button('Transit Entry', 'Get Items From');\n            frm.remove_custom_button('Material Request', 'Create');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Homepage",
  "enabled": 1,
  "modified": "2024-10-25 23:33:51.340426",
  "module": "o2o ErpNext",
  "name": "Homepage",
  "script": "frappe.ui.form.on('Homepage', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Stock Projected Qty', 'View');\n            }, 10);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:24:16.027936",
  "module": "o2o ErpNext",
  "name": "Purchase invoice List View",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    button: {\n        show: function(doc) {\n            return true;\n        },\n        get_label: function() {\n            return __('<i class=\"fa fa-print\" style=\"font-size:20px;color:red\"></i>');\n        },\n        get_description: function(doc) {\n            return __('Print {0}', [doc.name])\n        },\n        action: function(doc) {\n            //frappe.set_route(\"/app/print/Purchase Invoice/\" + doc.name);\n            \n            var objWindowOpenResult = window.open(frappe.urllib.get_full_url(\"/api/method/frappe.utils.print_format.download_pdf?\"\n              + \"doctype=\" + encodeURIComponent(\"Purchase Invoice\")\n              + \"&name=\" + encodeURIComponent(doc.name)\n              + \"&trigger_print=0\"\n              + \"&format=Without Header Final Purchase Invoice\"\n              + \"&no_letterhead=0\"\n              + \"&_lang=en\"\n            ));\n\n            if(!objWindowOpenResult) {\n              msgprint(__(\"Please set permission for pop-up windows in your browser!\")); return;\n            }\n        }\n    }\n}\n//List view menu contents remove\n// frappe.listview_settings['Purchase Invoice'] = {\n//     refresh(listview) {\n//         listview.page.menu.find('[data-label=\"User%20Permissions\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Role%20Permissions%20Manager\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Import\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"Toggle%20Sidebar\"]').parent().hide();\n//         listview.page.menu.find('[data-label=\"List%Settings\"]').parent().hide();\n//     }\n// }\nfrappe.listview_settings['Purchase Invoice'].onload = function(listview) {\n\t\tlistview.page.actions.find('[data-label=\"Edit\"],[data-label=\"Print\"],[data-label=\"Export\"],[data-label=\"Assign%20To\"],[data-label=\"Apply%20Assignment%20Rule\"],[data-label=\"Add%20Tags\"]').parent().parent().remove()\n};\n\n// Remove ID column from listing\n// frappe.listview_settings['Purchase Invoice'] = { // And other doctype names\n//     hide_name_column: true\n// }\n\n\n\n\n\n\n\n\n\n",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:11:07.883406",
  "module": "o2o ErpNext",
  "name": "Purchase invoice",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"supplier\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor\": 0,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"shipping_address\", function() {\n        return {\n            \"filters\": {\n                \"is_shipping_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"billing_address\", function() {\n        return {\n            \"filters\": {\n                \"is_primary_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on('Purchase Invoice', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tfrm.set_query(\"custom_vendor_address\", function() {\n        return {\n            \"filters\": {\n                \"custom_is_vendor_address\": 1,\n            }\n        };\n    });\n\t}\n})\n\nfrappe.ui.form.on(\"Purchase Invoice Item\", \"custom_gstn_value\", function(frm, cdt, cdn) {\n\n   var items = frm.doc.custom_gstn_value\n   var total = 0\n   for(var i in items) {\n\ttotal = total + items[i].custom_gstn_value\n\t}\n\n\tfrm.set_value(\"custom_gst_28__ot\",total)\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        // This function will run when the form is loaded\n        // You can initialize fields or set default values here if needed\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    },\n    custom_vendor: function (frm) {\n        // This function triggers when `supplier_code` field is modified\n        let custom_vendor = frm.doc.custom_vendor;\n        if (custom_vendor) {\n            // Get the first 3 characters of the supplier_code\n            let codeSubstring = custom_vendor.substring(0, 5).toUpperCase();\n            \n            // Set the substring to another field or use it as needed\n            frm.set_value('custom_vendor_code', codeSubstring);\n        } else {\n            // Clear the substring field if supplier_code is empty\n            frm.set_value('custom_vendor_code', '');\n        }\n    }\n});\n\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n    },\n    onload: function (frm) {\n        if (!frm.doc.fiscal_year) {\n            // Fetch the current fiscal year based on the current date\n            frappe.call({\n                method: 'frappe.client.get_list',\n                args: {\n                    doctype: 'Fiscal Year',\n                    filters: {\n                        'year_start_date': ['<=', frappe.datetime.get_today()],\n                        'year_end_date': ['>=', frappe.datetime.get_today()]\n                    },\n                    fields: ['name']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.length > 0) {\n                        var fiscal_year = r.message[0].name;\n                        var start_year = fiscal_year.split('-')[0];\n                        var end_year = fiscal_year.split('-')[1];\n                        display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);    \n                        console.log(\"==>\" + fiscal_year)\n                        frm.set_value('custom_fiscal_year', display_fiscal_year);\n                    }\n                }\n            });\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    is_return: function(frm) {\n        if (frm.doc.is_return == 1) {\n            frm.set_value('naming_series','DN./.{custom_fiscal_year}./.###');\n        } else{\n            frm.set_value('naming_series','{custom_vendor_code}./.{custom_fiscal_year}./.###');\n        }\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh(frm) {\n        setTimeout(() => {\n            // frm.remove_custom_button('Get Items From');\n            frm.remove_custom_button('Purchase Order', 'Get Items From');\n            frm.remove_custom_button('Purchase Receipt', 'Get Items From');\n            frm.remove_custom_button('Accounting Ledger', 'Preview');\n            frm.remove_custom_button('Payment Request', 'Create');\n            frm.remove_custom_button('Block Invoice', 'Create');\n            frm.remove_custom_button('Payment', 'Create');\n            // frm.remove_custom_button('Return / Debit Note', 'Create');\n            frm.remove_custom_button('Purchase Receipt', 'View');\n            frm.remove_custom_button('Accounting Ledger', 'View');\n        }, 10);\n    }\n});\n//Remove Form View Menu contents\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        setTimeout( () => {\n            // frm.page.remove_inner_button('Print');\n            // frm.page.remove_inner_button('Customer', 'Create');\n            // frm.page.remove_inner_button('Quotation', 'Create');\n            // frm.page.remove_inner_button('Add to Prospect', 'Action');\n            frm.page.menu.find('[data-label=\"Create%20%3E%20Customer\"],\\\n            [data-label=\"Print\"],\\\n            [data-label=\"Email\"],\\\n            [data-label=\"Links\"],\\\n            [data-label=\"Jump%20to%20field\"],\\\n            [data-label=\"Duplicate\"],\\\n            [data-label=\"Send%20SMS\"],\\\n            [data-label=\"Copy%20to%20Clipboard\"],\\\n            [data-label=\"Reload\"],\\\n            [data-label=\"Delete\"],\\\n            [data-label=\"Remind%20Me\"],\\\n            [data-label=\"Undo\"],\\\n            [data-label=\"Redo\"],\\\n            [data-label=\"Repeat\"],\\\n            [data-label=\"New%20Purchase%20Invoice\"],\\\n            [data-label=\"Action%20%3E%20Add%20to%20Prospect\"]').parent().parent().remove();\n        }, 10);\n    }\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n    onload: function (frm) {\n        let freight_amount = frm.doc.custom_freight_amount;\n        let freight_tax_amount = (freight_amount * 18) /100;\n        frm.set_value('custom_freight_taxes', freight_tax_amount);\n    },\n});\n\nfrappe.ui.form.on('Purchase Invoice', {\n    refresh: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n        \n    },\n    onload: function (frm) {\n        // This function will run when the form is refreshed\n        // You can initialize or manipulate fields here if needed\n        let total_cgst = 0;\n        let total_sgst = 0;\n        let total_igst = 0;\n    \n        frm.doc.items.forEach(function(item_detail) {\n            if (item_detail.cgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_cgst = parseFloat(total_cgst) + item_detail.cgst_amount;\n            }\n            \n            if (item_detail.sgst_amount >0) {  \n                // Set both rate and amount to 0\n                total_sgst = parseFloat(total_sgst) + item_detail.sgst_amount;\n            }\n            \n            if (item_detail.igst_amount >0) {  \n                // Set both rate and amount to 0\n                total_igst = parseFloat(total_igst) + item_detail.igst_amount;\n            }\n        \n        });\n        frm.set_value('custom_total_cgst', total_cgst);\n        frm.set_value('custom_total_sgst', total_sgst);\n        frm.set_value('custom_total_igst', total_igst);\n    },\n});\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2024-11-08 09:23:55.953956",
  "module": "o2o ErpNext",
  "name": "Purchase invoice print button",
  "script": "frappe.listview_settings['Purchase Invoice'] = {\n    add_fields: ['name', 'supplier'],\n    \n    onload: function(listview) {\n        // Print with Header\n        listview.page.add_action_item(__('Print with Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Final Purchase Invoice') +\n                                    '&no_letterhead=0' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n\n        // Print without Header\n        listview.page.add_action_item(__('Print without Header'), function() {\n            const selected_docs = listview.get_checked_items();\n            if (selected_docs.length > 0) {\n                let successful_prints = 0;\n                \n                // Process each selected document\n                selected_docs.forEach((doc, index) => {\n                    frappe.model.with_doc('Purchase Invoice', doc.name, function() {\n                        setTimeout(() => {\n                            var w = window.open(\n                                frappe.urllib.get_full_url(\n                                    '/api/method/frappe.utils.print_format.download_pdf?' +\n                                    'doctype=' + encodeURIComponent('Purchase Invoice') +\n                                    '&name=' + encodeURIComponent(doc.name) +\n                                    '&format=' + encodeURIComponent('Without Header Final Purchase Invoice') +\n                                    '&no_letterhead=1' +\n                                    '&_lang=en'\n                                )\n                            );\n                            \n                            if (w) {\n                                successful_prints++;\n                                // Show success message after all prints are initiated\n                                if (index === selected_docs.length - 1) {\n                                    frappe.show_alert({\n                                        message: __(`Successfully initiated print for ${successful_prints} invoice(s)`),\n                                        indicator: 'green'\n                                    }, 5);\n                                }\n                            } else {\n                                frappe.show_alert({\n                                    message: __(`Failed to print ${doc.name}. Please enable pop-ups and try again.`),\n                                    indicator: 'red'\n                                }, 5);\n                            }\n                        }, index * 800); // Add delay between prints to prevent browser blocking\n                    });\n                });\n            } else {\n                frappe.show_alert({\n                    message: __('Please select at least one Purchase Invoice'),\n                    indicator: 'yellow'\n                }, 3);\n            }\n        });\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-04-07 16:58:26.650985",
  "module": "o2o ErpNext",
  "name": "Employee v2",
  "script": "frappe.ui.form.on('Employee', {\n    refresh: function(frm) {\n        // Add custom button if user is not created/linked\n        if (!frm.doc.user_id && frm.doc.custom_user_email) {\n            frm.add_custom_button(__('Create User'), function() {\n                frm.events.show_password_dialog(frm);\n            }).addClass('btn-primary');\n        }\n        \n        // Add reset password button if user is already linked\n        if (frm.doc.user_id) {\n            frm.add_custom_button(__('Reset Password'), function() {\n                frm.events.show_reset_password_dialog(frm);\n            }).addClass('btn-primary');\n        }\n    },\n    \n    show_password_dialog: function(frm) {\n        if (!frm.doc.custom_user_email) {\n            frappe.throw(__(\"Please enter Email in Custom User Email field\"));\n            return;\n        }\n        \n        // Create a dialog to ask for password\n        let d = new frappe.ui.Dialog({\n            title: __('Create User'),\n            fields: [\n                {\n                    label: __('Email'),\n                    fieldname: 'email',\n                    fieldtype: 'Data',\n                    default: frm.doc.custom_user_email,\n                    read_only: 1\n                },\n                {\n                    label: __('Set Password'),\n                    fieldname: 'set_password',\n                    fieldtype: 'Check',\n                    default: 0,\n                    description: __('If unchecked, default password \"admin@123\" will be used')\n                },\n                {\n                    label: __('Password'),\n                    fieldname: 'password',\n                    fieldtype: 'Password',\n                    depends_on: 'set_password'\n                },\n                {\n                    label: __('Confirm Password'),\n                    fieldname: 'confirm_password',\n                    fieldtype: 'Password',\n                    depends_on: 'set_password'\n                }\n            ],\n            primary_action_label: __('Create'),\n            primary_action: function(values) {\n                if (values.set_password) {\n                    // Validate password\n                    if (!values.password) {\n                        frappe.throw(__(\"Please enter password\"));\n                        return;\n                    }\n                    if (values.password != values.confirm_password) {\n                        frappe.throw(__(\"Passwords do not match\"));\n                        return;\n                    }\n                    if (values.password.length < 8) {\n                        frappe.throw(__(\"Password must be at least 8 characters long\"));\n                        return;\n                    }\n                }\n                \n                d.hide();\n                frm.events.create_user(frm, values.set_password ? values.password : null);\n            }\n        });\n        \n        d.show();\n    },\n    \n    create_user: function(frm, password) {\n        frappe.call({\n            method: \"o2o_erpnext.api.employee.create_user\",\n            args: {\n                employee: frm.doc.name,\n                email: frm.doc.custom_user_email,\n                password: password\n            },\n            freeze: true,\n            freeze_message: __(\"Creating User...\"),\n            callback: function(r) {\n                if (!r.exc) {\n                    // Force reload the form\n                    frm.reload_doc();\n                    // Refresh the form\n                    setTimeout(function() {\n                        cur_frm.refresh();\n                    }, 1000);\n                }\n            }\n        });\n    },\n    \n    show_reset_password_dialog: function(frm) {\n        if (!frm.doc.user_id) {\n            frappe.throw(__(\"No user linked to this employee\"));\n            return;\n        }\n        \n        // Create a dialog to ask for the new password\n        let d = new frappe.ui.Dialog({\n            title: __('Reset User Password'),\n            fields: [\n                {\n                    label: __('User'),\n                    fieldname: 'user',\n                    fieldtype: 'Data',\n                    default: frm.doc.user_id,\n                    read_only: 1\n                },\n                {\n                    label: __('New Password'),\n                    fieldname: 'password',\n                    fieldtype: 'Password',\n                    reqd: 1\n                },\n                {\n                    label: __('Confirm Password'),\n                    fieldname: 'confirm_password',\n                    fieldtype: 'Password',\n                    reqd: 1\n                }\n            ],\n            primary_action_label: __('Reset Password'),\n            primary_action: function(values) {\n                // Validate password\n                if (values.password != values.confirm_password) {\n                    frappe.throw(__(\"Passwords do not match\"));\n                    return;\n                }\n                if (values.password.length < 8) {\n                    frappe.throw(__(\"Password must be at least 8 characters long\"));\n                    return;\n                }\n                \n                d.hide();\n                frm.events.reset_password(frm, values.password);\n            }\n        });\n        \n        d.show();\n    },\n    \n    reset_password: function(frm, password) {\n        frappe.call({\n            method: \"o2o_erpnext.api.employee.reset_user_password\",\n            args: {\n                employee: frm.doc.name,\n                password: password\n            },\n            freeze: true,\n            freeze_message: __(\"Resetting Password...\"),\n            callback: function(r) {\n                if (!r.exc) {\n                    frappe.show_alert({\n                        message: __(\"Password reset successfully\"),\n                        indicator: 'green'\n                    });\n                }\n            }\n        });\n    }\n});\n\n//Date of joining auto set\n// frappe.ui.form.on('Employee', {\n//     onload: function(frm) {\n//         // Only set the date if it's a new document (not saved yet)\n//         if (frm.is_new()) {\n//             // Get current date\n//             let currentDate = new Date();\n            \n//             // Subtract 6 months from current date\n//             currentDate.setMonth(currentDate.getMonth() - 6);\n            \n//             // Format the date to YYYY-MM-DD as required by ERPNext date fields\n//             let year = currentDate.getFullYear();\n//             let month = String(currentDate.getMonth() + 1).padStart(2, '0');\n//             let day = String(currentDate.getDate()).padStart(2, '0');\n            \n//             let formattedDate = year + '-' + month + '-' + day;\n            \n//             // Set the date_of_birth field\n//             frm.set_value('date_of_birth', formattedDate);\n//         }\n//     }\n// });\n\n//Date of joining auto set with hiddepn property\nfrappe.ui.form.on('Employee', {\n    onload: function(frm) {\n        // Only set the date if it's a new document (not saved yet)\n        if (frm.is_new()) {\n            // Get current date\n            let currentDate = new Date();\n            \n            // Subtract 6 months from current date\n            currentDate.setMonth(currentDate.getMonth() - 6);\n            \n            // Format the date to YYYY-MM-DD as required by ERPNext date fields\n            let year = currentDate.getFullYear();\n            let month = String(currentDate.getMonth() + 1).padStart(2, '0');\n            let day = String(currentDate.getDate()).padStart(2, '0');\n            \n            let formattedDate = year + '-' + month + '-' + day;\n            \n            // Set the date_of_birth field\n            frm.set_value('date_of_birth', formattedDate);\n            \n            // Hide the date_of_birth field\n            frm.set_df_property('date_of_birth', 'hidden', 1);\n        }\n    },\n    \n    refresh: function(frm) {\n        // Also hide the field on refresh for existing documents\n        frm.set_df_property('date_of_birth', 'hidden', 1);\n    }\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-21 03:45:21.690422",
  "module": "o2o ErpNext",
  "name": "Purchase order v1",
  "script": "frappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Set vendor filters based on supplier\n        if(frm.doc.supplier) {\n            set_vendor_filters(frm);\n        }\n\n        if (!frm.doc.__islocal) return;\n        \n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_and_set_purchase_order_defaults',\n            freeze: true,\n            freeze_message: __('Validating...'),\n            callback: function(r) {\n                if (r.exc) {\n                    return;\n                }\n                \n                if (r.message && r.message.status === 'success' && r.message.data) {\n                    // Set the default values\n                    if (r.message.data.supplier) {\n                        frm.set_value('supplier', r.message.data.supplier);\n                    }\n                    if (r.message.data.custom_branch) {\n                        frm.set_value('custom_branch', r.message.data.custom_branch);\n                    }\n                    \n                    // Set approver name and email if provided by the API\n                    if (r.message.data.custom__approver_name_and_email) {\n                        frm.set_value('custom__approver_name_and_email', r.message.data.custom__approver_name_and_email);\n                    }\n                    if (r.message.data.custom_sub_branch) {\n                        frm.set_value('custom_sub_branch', r.message.data.custom_sub_branch);\n                    }\n                }\n            }\n        });\n\n        // Hide UI elements\n        $('.form-attachments, .form-tags, .form-share').hide();\n\n        // Remove standard buttons\n        setTimeout(() => {\n            const buttonsToRemove = [\n                'Get Items From',\n                'Update Items',\n                'Payment',\n                'Payment Request',\n                'Purchase Invoice',\n                'Link to Material Request',\n                'Update Rate as per Last Purchase',\n                'Print',\n                'Download',\n                'Hold',\n                'Close'\n            ];\n\n            buttonsToRemove.forEach(btn => frm.remove_custom_button(btn));\n            \n            // Remove menu items\n            const menuItemsToRemove = [\n                'Print',\n                'Email',\n                'Links',\n                'Duplicate',\n                'Send SMS',\n                'Copy to Clipboard',\n                'Reload',\n                'Remind Me',\n                'Undo',\n                'Redo',\n                'Repeat',\n                'New Purchase Order'\n            ];\n\n            menuItemsToRemove.forEach(item => {\n                const selector = `[data-label=\"${encodeURIComponent(item)}\"]`;\n                frm.page.menu.find(selector).parent().parent().remove();\n            });\n        }, 10);\n    },\n\n    validate: function(frm) {\n        frm.set_value(\"custom_created_user\", frm.doc.owner);\n        calculate_and_set_gst_value(frm);\n    },\n\n    onload: function(frm) {\n        updateSupplierCode(frm);\n        updateOrderCode(frm);\n        calculate_and_set_gst_value(frm);\n    },\n\n    supplier: function(frm) {\n        updateSupplierCode(frm);\n        \n        if(frm.doc.supplier) {\n            // Clear vendor when supplier changes\n            frm.set_value('custom_vendor', '');\n            \n            // Set new vendor filters\n            set_vendor_filters(frm);\n        }\n    },\n\n    transaction_date: function(frm) {\n        updateOrderCode(frm);\n    },\n    \n    // Add branch change handler\n    custom_branch: function(frm) {\n        if(frm.doc.custom_branch) {\n            set_branch_approver(frm);\n        }\n    }\n});\n\n// Helper Functions\nfunction updateSupplierCode(frm) {\n    const supplier = frm.doc.supplier;\n    frm.set_value('custom_supplier_code', \n        supplier ? supplier.substring(0, 3).toUpperCase() : '');\n}\n\nfunction updateOrderCode(frm) {\n    if (frm.doc.docstatus !== 0) return;\n    \n    const date = new Date(frm.doc.transaction_date);\n    const days = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'];\n    const dayOfWeek = days[date.getDay()];\n    const yearYY = date.getFullYear().toString().slice(-2);\n    \n    frm.set_value('custom_order_code', `POA${dayOfWeek}${yearYY}`);\n}\n\n// New function to set branch approver\nfunction set_branch_approver(frm) {\n    // Only proceed if we have a branch and the document has been saved (has a name)\n    if(!frm.doc.custom_branch || frm.doc.__islocal) return;\n    \n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.set_branch_approver_for_purchase_order',\n        args: {\n            purchase_order_name: frm.doc.name\n        },\n        freeze: true,\n        freeze_message: __('Finding Branch Approver...'),\n        callback: function(r) {\n            if (r.message) {\n                if (r.message.status === 'success') {\n                    frappe.show_alert({\n                        message: __('Branch Approver set successfully'),\n                        indicator: 'green'\n                    }, 5);\n                    frm.refresh_field('custom__approver_name_and_email');\n                } else if (r.message.status === 'warning') {\n                    frappe.show_alert({\n                        message: __(r.message.message),\n                        indicator: 'orange'\n                    }, 5);\n                } else if (r.message.status === 'error') {\n                    frappe.throw(__(r.message.message));\n                }\n            }\n        }\n    });\n}\n\nfunction calculate_and_set_gst_value(frm) {\n    // console.log(frm.doc.items)\n    $.each(frm.doc.items || [], function (i, item) {\n        let total_sgst = 0;\n        let total_cgst = 0;\n        let total_igst = 0;\n        \n        if (item.sgst_amount == null) { // This checks for both null and undefined\n            item.sgst_amount = 0;\n        }\n        \n        if (item.cgst_amount == null) { // This checks for both null and undefined\n            item.cgst_amount = 0;\n        }\n        \n        if (item.igst_amount == null) { // This checks for both null and undefined\n            item.igst_amount = 0;\n        }\n        \n        if (item.net_amount == null) { // This checks for both null and undefined\n            item.net_amount = 0;\n        }\n\n        let total_tax = 0;\n        let grand_total = 0;\n        // frappe.msgprint(item.sgst_amount +\" => \"+ item.cgst_amount+\"=>\" + item.igst_amount)\n        total_tax = parseFloat(item.sgst_amount) + parseFloat(item.cgst_amount) + parseFloat(item.igst_amount);\n        \n        // console.log( \"total taxt\"+total_tax)\n        grand_total = parseFloat(item.net_amount) + parseFloat(total_tax);\n        // console.log(grand_total);\n        // console.log(\"grand total \" + grand_total)\n        // console.log(\"herere\")\n        // console.log(gst_value);\n        // Set the GST value in the custom field of the item\n        frappe.model.set_value(item.doctype, item.name, 'custom_gstn_value', total_tax);\n        frappe.model.set_value(item.doctype, item.name, 'custom_grand_total', grand_total);\n        frm.refresh_field('items');\n        \n    });\n}\n\n\nfunction set_vendor_filters(frm) {\n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.get_supplier_vendors',\n        args: {\n            supplier: frm.doc.supplier\n        },\n        callback: function(r) {\n            if(r.message) {\n                let allowed_vendors = r.message;\n                \n                // Set filters on vendor field\n                frm.set_query('custom_vendor', function() {\n                    return {\n                        filters: {\n                            'name': ['in', allowed_vendors.length ? allowed_vendors : ['NONE']]\n                        }\n                    };\n                });\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Branch",
  "enabled": 1,
  "modified": "2025-04-03 04:05:37.819364",
  "module": "o2o ErpNext",
  "name": "Branch Restrict",
  "script": "frappe.listview_settings['Branch'] = {\n    // Array of roles that should have restricted access\n    restrictedRoles: ['Person Raising Request', 'Requisition Approver', 'PO Approver'],\n    \n    // Check if current user has any of the restricted roles\n    hasRestrictedRole: function() {\n        return this.restrictedRoles.some(role => frappe.user_roles.includes(role));\n    },\n    \n    onload: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Remove existing filters\n            listview.filter_area.clear();\n            \n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_supplier']\n                },\n                callback: function(r) {\n                    if (r.message && r.message.custom_supplier) {\n                        // Add non-removable filter\n                        listview.filter_area.add([\n                            ['Branch', 'custom_supplier', '=', r.message.custom_supplier]\n                        ]);\n                        \n                        // Store the supplier for reference\n                        listview.custom_supplier = r.message.custom_supplier;\n                        \n                        // Refresh list\n                        listview.refresh();\n                        \n                        // Hide filter area buttons\n                        $('.filter-selector').hide();\n                        $('.filter-button').hide();\n                    } else {\n                        // If no supplier found, show empty list\n                        listview.filter_area.add([\n                            ['Branch', 'name', '=', '']\n                        ]);\n                        listview.refresh();\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Prevent filter removal\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier\n                );\n                \n                if (!supplier_filter_exists) {\n                    // Re-add the supplier filter if it was removed\n                    listview.filter_area.add([\n                        ['Branch', 'custom_supplier', '=', listview.custom_supplier]\n                    ]);\n                }\n            }\n            \n            // Hide filter area and buttons\n            $('.filter-selector').hide();\n            $('.filter-button').hide();\n            $('.filter-box .filter-area').css('pointer-events', 'none');\n            \n            // Remove filter tags close button\n            setTimeout(() => {\n                $('.filter-tag .remove-filter').hide();\n            }, 100);\n        }\n    },\n\n    before_refresh: function(listview) {\n        if (this.hasRestrictedRole()) {\n            // Prevent clearing filters\n            if (listview.custom_supplier) {\n                let current_filters = listview.filter_area.get();\n                let supplier_filter_exists = current_filters.some(f => \n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier\n                );\n                \n                if (!supplier_filter_exists) {\n                    return false; // Prevent refresh if supplier filter was removed\n                }\n            }\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (this.hasRestrictedRole()) {\n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_supplier']\n                    },\n                    callback: function(r) {\n                        if (!r.message || !r.message.custom_supplier) {\n                            frappe.throw(__('You must have a supplier assigned to your employee record to create a branch.'));\n                            reject();\n                        } else {\n                            resolve();\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sub Branch",
  "enabled": 1,
  "modified": "2025-02-28 21:59:46.432558",
  "module": "o2o ErpNext",
  "name": "Sub Branch Restrict",
  "script": "frappe.listview_settings['Sub Branch'] = {\n    onload: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            listview.filter_area.clear();\n\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'user_id': frappe.session.user },\n                    fieldname: ['custom_supplier', 'branch', 'custom_sub_branch', 'custom_sub_branch_list']\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        let filters = [];\n                        if (frappe.user_roles.includes('Person Raising Request')){\n                            if (r.message.custom_supplier && r.message.branch && r.message.custom_sub_branch){\n                                filters.push(\n                                    ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                    ['Sub Branch', 'branch', '=', r.message.branch],\n                                    ['Sub Branch', 'name', '=', r.message.custom_sub_branch]\n                                );\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                                listview.custom_sub_branch = r.message.custom_sub_branch;\n\n                            } else {\n                                // If any required fields are missing, show nothing.\n                                filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        } else if (frappe.user_roles.includes('PO Approver')) {\n                            if (r.message.custom_supplier && r.message.branch ) {\n                                filters.push(\n                                     ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                     ['Sub Branch', 'branch', '=', r.message.branch]\n                                );\n\n                                // Handle custom_sub_branch_list (Table field)\n                                if (r.message.custom_sub_branch_list && Array.isArray(r.message.custom_sub_branch_list)) {\n                                    const subBranchNames = r.message.custom_sub_branch_list\n                                        .map(item => item.custom_sub_branch)  // Assuming 'name' is the sub-branch name field\n                                        .filter(name => name); // Remove any empty/null values\n\n                                    if (subBranchNames.length > 0) {\n                                        filters.push(['Sub Branch', 'name', 'in', subBranchNames]);\n                                    }\n                                    else{\n                                         //If custom_sub_branch_list is empty\n                                        filters.push(['Sub Branch', 'name', '=', '']);\n                                    }\n                                }\n                                else if(r.message.custom_sub_branch){\n                                      filters.push(['Sub Branch', 'name', '=', r.message.custom_sub_branch]); //use custom_sub_branch\n                                }\n                                else {\n                                    // If custom_sub_branch_list is missing or invalid, show nothing.\n                                    filters.push(['Sub Branch', 'name', '=', '']);\n                                }\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                                listview.custom_sub_branch_list = r.message.custom_sub_branch_list;\n\n                            }\n                            else{\n                                // If any required fields are missing, show nothing.\n                                 filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        } else if (frappe.user_roles.includes('Requisition Approver')) {\n                            if (r.message.custom_supplier && r.message.branch) {\n                                filters.push(\n                                    ['Sub Branch', 'custom_supplier', '=', r.message.custom_supplier],\n                                    ['Sub Branch', 'branch', '=', r.message.branch]\n                                );\n                                listview.custom_supplier = r.message.custom_supplier;\n                                listview.branch = r.message.branch;\n                            } else {\n                                // If any required fields are missing, show nothing.\n                                filters.push(['Sub Branch', 'name', '=', '']);\n                            }\n                        }\n\n                        listview.filter_area.add(filters);\n                        listview.refresh();\n                        _hideFilterControls(listview);\n\n                        let message = '';\n                        if (frappe.user_roles.includes('PO Approver')) {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier, branch, and sub-branch list.');\n                        } else if (frappe.user_roles.includes('Requisition Approver')) {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier and branch.');\n                        } else {\n                            message = __('The Sub Branch list is filtered based on your assigned supplier, branch, and sub-branch.');\n                        }\n                        \n                        frappe.show_alert({\n                            message: message,\n                            indicator: 'info'\n                        });\n                    }\n                }\n            });\n        }\n    },\n\n    refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            //For Person Raising Request\n            if (listview.custom_supplier && listview.branch && listview.custom_sub_branch && frappe.user_roles.includes('Person Raising Request')) {\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch &&\n                    f[0] === 'Sub Branch' && f[1] === 'name' && f[3] === listview.custom_sub_branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                        ['Sub Branch', 'name', '=', listview.custom_sub_branch]\n                    ]);\n                }\n            }\n            //For PO Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('PO Approver')){\n                let current_filters = listview.filter_area.get();\n                let subBranchNames = [];\n                if(listview.custom_sub_branch_list){\n                    subBranchNames = listview.custom_sub_branch_list.map(f=> f.custom_sub_branch);\n                }\n\n                let filters_present = current_filters.every(f => {\n                    if (f[1] === 'custom_supplier') {\n                        return f[3] === listview.custom_supplier;\n                    } else if (f[1] === 'branch') {\n                        return f[3] === listview.branch;\n                    } else if (f[0] === 'Sub Branch' && f[1] === 'name') {\n                        return subBranchNames.includes(f[3]) || f[3] === listview.custom_sub_branch; //for custom_sub_branch\n                    }\n                    return true; // For other filters, don't interfere\n                });\n\n                if (!filters_present) {\n                    let filters = [\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                    ];\n                    if (subBranchNames.length > 0){\n                        filters.push(['Sub Branch', 'name', 'in', subBranchNames])\n                    }\n                    else if(listview.custom_sub_branch){\n                        filters.push(['Sub Branch', 'name', '=', listview.custom_sub_branch]); //use custom_sub_branch\n                    }\n\n                    listview.filter_area.add(filters);\n                }\n            }\n            //For Requisition Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('Requisition Approver')){\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch]\n                    ]);\n                }\n            }\n            _hideFilterControls(listview);\n        }\n    },\n\n    before_refresh: function(listview) {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            if (listview.custom_supplier && listview.branch && listview.custom_sub_branch && frappe.user_roles.includes('Person Raising Request')) {\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch &&\n                    f[0] === 'Sub Branch' && f[1] === 'name' && f[3] === listview.custom_sub_branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                        ['Sub Branch', 'name', '=', listview.custom_sub_branch]\n                    ]);\n                }\n            }\n            //For PO Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('PO Approver')){\n                let current_filters = listview.filter_area.get();\n                let subBranchNames = [];\n                if(listview.custom_sub_branch_list){\n                    subBranchNames = listview.custom_sub_branch_list.map(f=> f.custom_sub_branch);\n                }\n                let filters_present = current_filters.every(f => {\n                    if (f[1] === 'custom_supplier') {\n                        return f[3] === listview.custom_supplier;\n                    } else if (f[1] === 'branch') {\n                        return f[3] === listview.branch;\n                    } else if (f[0] === 'Sub Branch' && f[1] === 'name') {\n                        return subBranchNames.includes(f[3]) || f[3] === listview.custom_sub_branch;  //for custom_sub_branch\n                    }\n                    return true; // For other filters, don't interfere\n                });\n\n                if (!filters_present) {\n                    let filters = [\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch],\n                    ];\n                    if (subBranchNames.length > 0){\n                        filters.push(['Sub Branch', 'name', 'in', subBranchNames])\n                    }\n                    else if(listview.custom_sub_branch){\n                        filters.push(['Sub Branch', 'name', '=', listview.custom_sub_branch]);//use custom_sub_branch\n                    }\n                    listview.filter_area.add(filters);\n                }\n            }\n            //For Requisition Approver\n            else if(listview.custom_supplier && listview.branch && frappe.user_roles.includes('Requisition Approver')){\n                let current_filters = listview.filter_area.get();\n                let filters_present = current_filters.some(f =>\n                    f[1] === 'custom_supplier' && f[3] === listview.custom_supplier &&\n                    f[1] === 'branch' && f[3] === listview.branch\n                );\n\n                if (!filters_present) {\n                    listview.filter_area.add([\n                        ['Sub Branch', 'custom_supplier', '=', listview.custom_supplier],\n                        ['Sub Branch', 'branch', '=', listview.branch]\n                    ]);\n                }\n            }\n        }\n        return true;\n    },\n\n    before_new: function() {\n        if (frappe.user_roles.includes('Person Raising Request') || \n            frappe.user_roles.includes('PO Approver') || \n            frappe.user_roles.includes('Requisition Approver')) {\n            \n            return new Promise((resolve, reject) => {\n                frappe.call({\n                    method: 'frappe.client.get_value',\n                    args: {\n                        doctype: 'Employee',\n                        filters: { 'user_id': frappe.session.user },\n                        fieldname: ['custom_supplier', 'branch', 'custom_sub_branch', 'custom_sub_branch_list']\n                    },\n                    callback: function(r) {\n                        if (frappe.user_roles.includes('Person Raising Request')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch || !r.message.custom_sub_branch) {\n                                frappe.throw(__('You must have a supplier, branch and sub branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        } else if(frappe.user_roles.includes('PO Approver')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch ) {\n                                frappe.throw(__('You must have a supplier and branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        } else if(frappe.user_roles.includes('Requisition Approver')){\n                            if (!r.message || !r.message.custom_supplier || !r.message.branch ) {\n                                frappe.throw(__('You must have a supplier and branch assigned to your employee record to create a Sub Branch.'));\n                                reject();\n                            } else {\n                                resolve();\n                            }\n                        }\n                    }\n                });\n            });\n        }\n        return true;\n    }\n};\n\n// Helper function to hide filter controls (reused from the Branch script)\nfunction _hideFilterControls(listview) {\n    $('.filter-selector').hide();\n    $('.filter-button').hide();\n    $('.filter-box .filter-area').css('pointer-events', 'none');\n\n    setTimeout(() => {\n        $('.filter-tag .remove-filter').hide();\n    }, 100);\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-04-03 04:02:30.402302",
  "module": "o2o ErpNext",
  "name": "Supplier restrict",
  "script": "frappe.listview_settings['Supplier'] = {\n    // Track the state to prevent duplicate operations\n    supplier_value: null,\n    filter_initialized: false,\n    \n    onload: function(listview) {\n        // Save reference\n        this.listview = listview;\n        \n        // IMPORTANT: Check if user is Administrator or doesn't have restricted role - exit early\n        if (this.isAdministrator() || !this.hasRestrictedRole()) {\n            // User is Administrator or doesn't have restricted role, do nothing and allow normal operation\n            console.log(\"User is Administrator or doesn't have restricted role, skipping supplier filter\");\n            return;\n        }\n        \n        // Only initialize once for restricted users\n        if (!this.filter_initialized) {\n            console.log(\"Initializing supplier filter for restricted user\");\n            this.initializeFilter();\n        }\n    },\n    \n    isAdministrator: function() {\n        // Check if current user is Administrator\n        return frappe.user_roles.includes('Administrator');\n    },\n    \n    hasRestrictedRole: function() {\n        var restricted_roles = ['Person Raising Request', 'Requisition Approver', 'PO Approver'];\n        for (var i = 0; i < restricted_roles.length; i++) {\n            if (frappe.user_roles.includes(restricted_roles[i])) {\n                return true;\n            }\n        }\n        // If we reach here, user doesn't have any restricted roles\n        return false;\n    },\n    \n    initializeFilter: function() {\n        // Prevent multiple initializations\n        this.filter_initialized = true;\n        \n        var me = this;\n        \n        // Use a one-time non-async call to get the supplier\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Employee',\n                filters: { 'user_id': frappe.session.user },\n                fieldname: ['custom_supplier']\n            },\n            async: false, // Make it synchronous\n            callback: function(r) {\n                if (r.message && r.message.custom_supplier) {\n                    me.supplier_value = r.message.custom_supplier;\n                    console.log(\"Detected supplier value:\", me.supplier_value);\n                    \n                    // Apply filter one time only\n                    me.applyFilter();\n                    \n                    // Apply UI restrictions one time\n                    me.applyUIRestrictions();\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`You are viewing your assigned supplier: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    // No supplier assigned\n                    frappe.show_alert({\n                        message: __('No supplier is assigned to your employee record.'),\n                        indicator: 'red'\n                    }, 5);\n                    \n                    // Apply empty filter\n                    me.listview.filter_area.clear();\n                    me.listview.filter_area.add([\n                        ['Supplier', 'name', '=', '_nonexistent_']\n                    ]);\n                    \n                    // Apply UI restrictions\n                    me.applyUIRestrictions();\n                }\n            }\n        });\n    },\n    \n    applyFilter: function() {\n        // Only proceed if we have a supplier and listview\n        if (!this.supplier_value || !this.listview) return;\n        \n        console.log(\"Applying supplier filter:\", this.supplier_value);\n        \n        // Clear any existing filters\n        this.listview.filter_area.clear();\n        \n        // Add our filter\n        this.listview.filter_area.add([\n            ['Supplier', 'name', '=', this.supplier_value]\n        ]);\n        \n        // Override the get method to ensure our filter always stays applied\n        var originalGet = this.listview.filter_area.get;\n        var supplier = this.supplier_value;\n        \n        this.listview.filter_area.get = function() {\n            var filters = originalGet.apply(this, arguments);\n            \n            // Check if our filter exists\n            var hasSupplierFilter = filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'name' && f[3] === supplier) ||\n                       (f.fieldname === 'name' && f.value === supplier);\n            });\n            \n            // If not, add it back to the filters array without triggering a refresh\n            if (!hasSupplierFilter) {\n                filters.push(['Supplier', 'name', '=', supplier]);\n            }\n            \n            return filters;\n        };\n        \n        // Override the clear method to prevent complete clearing\n        var originalClear = this.listview.filter_area.clear;\n        \n        this.listview.filter_area.clear = function() {\n            // Call original clear\n            originalClear.apply(this, arguments);\n            \n            // Immediately re-add our filter without triggering refresh\n            this.filters.push({\n                fieldname: 'name',\n                label: 'Name',\n                condition: '=',\n                value: supplier\n            });\n        };\n    },\n    \n    applyUIRestrictions: function() {\n        var style = document.createElement('style');\n        style.id = 'supplier-restriction-style';\n        style.innerHTML = `\n            .filter-selector, .filter-button, .tag-filters-area, .clear-filters { \n                display: none !important; \n            }\n            .filter-box .filter-area { \n                pointer-events: none !important; \n            }\n            .filter-tag .remove-filter {\n                display: none !important;\n            }\n            .list-row-check, .list-select-all {\n                display: none !important;\n            }\n        `;\n        \n        // Only add the style if it doesn't exist\n        if (!document.getElementById('supplier-restriction-style')) {\n            document.head.appendChild(style);\n        }\n        \n        // Hide the new supplier button\n        setTimeout(function() {\n            $('.page-actions .btn-primary').hide();\n        }, 100);\n    },\n    \n    refresh: function(listview) {\n        // Exit immediately if user is Administrator or doesn't have restricted role\n        if (this.isAdministrator() || !this.hasRestrictedRole()) {\n            return;\n        }\n        \n        // Update listview reference\n        this.listview = listview;\n        \n        // Initialize if not already done\n        if (!this.filter_initialized) {\n            this.initializeFilter();\n        }\n        \n        // Re-apply UI restrictions on every refresh\n        this.applyUIRestrictions();\n        \n        // Add a guard to prevent loops\n        if (this.is_refreshing) return;\n        this.is_refreshing = true;\n        \n        // Check and ensure our filter is still applied\n        try {\n            if (this.supplier_value) {\n                var current_filters = listview.filter_area.get();\n                \n                // Check if our filter exists\n                var hasFilter = current_filters.some(function(f) {\n                    return (Array.isArray(f) && f[1] === 'name' && f[3] === this.supplier_value) ||\n                           (f.fieldname === 'name' && f.value === this.supplier_value);\n                }, this);\n                \n                // Only re-apply if missing and not already refreshing\n                if (!hasFilter && !this.is_reapplying) {\n                    this.is_reapplying = true;\n                    \n                    // Re-apply filter silently without triggering another refresh\n                    setTimeout(function() {\n                        listview.filter_area.filters.push({\n                            fieldname: 'name',\n                            label: 'Name',\n                            condition: '=',\n                            value: this.supplier_value\n                        });\n                        \n                        this.is_reapplying = false;\n                    }.bind(this), 0);\n                }\n            }\n        } catch (e) {\n            console.error(\"Error in refresh handler:\", e);\n        }\n        \n        // Release the guard\n        setTimeout(function() {\n            this.is_refreshing = false;\n        }.bind(this), 500);\n    },\n    \n    before_new: function() {\n        // Allow Administrator to create suppliers regardless of other roles\n        if (this.isAdministrator()) {\n            return true;\n        }\n        \n        // Only prevent new supplier creation for restricted roles\n        if (this.hasRestrictedRole()) {\n            frappe.throw(__('You do not have permission to create new suppliers.'));\n            return false;\n        }\n        \n        // Allow normal creation for non-restricted roles\n        return true;\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-21 03:43:43.902726",
  "module": "o2o ErpNext",
  "name": "PO v5",
  "script": "// Store capexTotal and opexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// --- Helper Functions ---\n\n// Function to check if current user has the branch-level role\nasync function isBranchLevelUser() {\n    const user_roles = await frappe.user_roles;\n    return user_roles.includes('Person Raising Request Branch');\n}\n\nasync function getHierarchyData(frm) {\n    // Check user role to determine hierarchy level\n    const isBranchUser = await isBranchLevelUser();\n    \n    let subBranch = { message: null };\n    let branch = { message: null };\n    let supplier = { message: null };\n    \n    // For branch-level users, we only need branch and supplier\n    if (isBranchUser) {\n        if (frm.doc.custom_branch) {\n            branch = await frappe.db.get_value('Branch', frm.doc.custom_branch,\n                ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n            );\n            \n            if (branch && branch.message && branch.message.custom_supplier) {\n                supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                    ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                );\n            }\n        }\n    } \n    // For sub-branch users, get the full hierarchy\n    else {\n        if (frm.doc.custom_sub_branch) {\n            subBranch = await frappe.db.get_value('Sub Branch', frm.doc.custom_sub_branch,\n                ['branch', 'custom_supplier', 'capex_budget', 'opex_budget', 'minimum_order_value', 'maximum_order_value']\n            );\n            \n            if (subBranch && subBranch.message && subBranch.message.branch) {\n                branch = await frappe.db.get_value('Branch', subBranch.message.branch,\n                    ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n                );\n                \n                if (branch && branch.message && branch.message.custom_supplier) {\n                    supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                        ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                    );\n                }\n            }\n        }\n    }\n\n    return { subBranch, branch, supplier };\n}\n\nfunction validateMinMax(total, minValue, maxValue, entityType, entityName) {\n    if (minValue !== 0 || maxValue !== 0) {\n        if (total < minValue || total > maxValue) {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between ${entityType}'s minimum value ${format_currency(minValue)} and maximum value ${format_currency(maxValue)} for ${entityName}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction validateBudgetLimit(total, budget, budgetType, entityType, entityName) {\n    if (budget > 0 && total > budget) {\n        frappe.msgprint({\n            title: __(`${budgetType} Budget Exceeded`),\n            message: __(`Total ${budgetType} amount (${format_currency(total)}) exceeds ${entityType} ${budgetType} budget (${format_currency(budget)}) for ${entityName}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function updateBudget(entityType, entityName, budgetField, amountToDeduct) {\n    if (amountToDeduct > 0) {\n      const currentBudget = await frappe.db.get_value(entityType, entityName, [budgetField]);\n\n        if (currentBudget && currentBudget.message && flt(currentBudget.message[budgetField]) > 0) {\n            const newBudget = flt(currentBudget.message[budgetField]) - amountToDeduct;\n            await frappe.db.set_value(entityType, entityName, budgetField, newBudget);\n            frappe.show_alert({\n                message: __(`${entityType} ${budgetField.replace('_budget','').replace('custom_','').replace('_',' ').toUpperCase()} budget updated to ${format_currency(newBudget)}`),\n                indicator: 'green'\n            }, 5);\n        }\n    }\n}\n\n// --- Validation Functions ---\n\nasync function validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateSubBranchMandatory(frm) {\n    // Skip for branch-level users\n    const isBranchUser = await isBranchLevelUser();\n    if (isBranchUser) {\n        return true;\n    }\n    \n    // Only check for regular users\n    if (!frm.doc.custom_sub_branch) {\n        frappe.msgprint({\n            title: __('Missing Sub-branch'),\n            message: __('Sub-branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateHierarchy(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    // For branch-level users, just check if branch exists\n    if (isBranchUser) {\n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    } \n    // For sub-branch users, check the full hierarchy\n    else {\n        if (!subBranch || !subBranch.message) {\n            frappe.msgprint({\n                title: __('Invalid Sub-branch'),\n                message: __('Could not fetch sub-branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        if (subBranch.message.branch !== frm.doc.custom_branch) {\n            frappe.msgprint({\n                title: __('Invalid Hierarchy'),\n                message: __('Selected sub-branch does not belong to the selected branch'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    }\n}\n\nasync function validateOrderValue(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    const total = flt(frm.doc.total);\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Branch\n        if (!validateMinMax(total, flt(branch.message.custom_minimum_order_value), \n                           flt(branch.message.custom_maximum_order_value), \n                           'Branch', frm.doc.custom_branch)) {\n            return false;\n        }\n        \n        // Supplier\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Sub-Branch\n        if (!validateMinMax(total, flt(subBranch.message.minimum_order_value), \n                           flt(subBranch.message.maximum_order_value), \n                           'Sub-branch', frm.doc.custom_sub_branch)) {\n            return false;\n        }\n        \n        // Supplier (Skip Branch)\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nasync function validateBudgetDates(frm) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const { supplier } = await getHierarchyData(frm); //Get supplier\n    if (!supplier || !supplier.message) return false;\n\n    const budget_start_day = parseInt(supplier.message.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.message.custom_budget_end_date);\n\n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateBudgets(frm) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    for (const item of frm.doc.items) {\n        if (!item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(capexTotal, flt(branch.message.custom_capex_budget), \n                                    \"Capex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(opexTotal, flt(branch.message.custom_opex_budget), \n                                    \"Opex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Sub-Branch\n            if (flt(subBranch.message.capex_budget) > 0) {\n                if (!validateBudgetLimit(capexTotal, flt(subBranch.message.capex_budget), \n                                        \"Capex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Sub-branch\n            if (flt(subBranch.message.opex_budget) > 0) {\n                if (!validateBudgetLimit(opexTotal, flt(subBranch.message.opex_budget), \n                                        \"Opex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nasync function updateBudgets(frm) {\n    try {\n        const isBranchUser = await isBranchLevelUser();\n        const { subBranch, branch, supplier } = await getHierarchyData(frm);\n        \n        if (!supplier || !supplier.message) return;\n        \n        // For branch-level users\n        if (isBranchUser) {\n            if (!branch || !branch.message) return;\n            \n            // Update CAPEX Budget for Branch\n            if (branch.message.custom_capex_budget && flt(branch.message.custom_capex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Branch\n            if (branch.message.custom_opex_budget && flt(branch.message.custom_opex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        } \n        // For sub-branch users\n        else {\n            if (!subBranch || !subBranch.message) return;\n            \n            // Update CAPEX Budget for Sub-Branch\n            if (subBranch.message.capex_budget && flt(subBranch.message.capex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Sub-Branch\n            if (subBranch.message.opex_budget && flt(subBranch.message.opex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator\nasync function validateAll(frm) {\n    try {\n        // Basic validations\n        if (!await validateBranchMandatory(frm)) return false;\n        if (!await validateSubBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        if (!await validateHierarchy(frm)) return false;\n\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) { return true; }\n        }\n\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            if (!await validateOrderValue(frm)) return false;\n            if (!await validateBudgetDates(frm)) return false;\n            if (!await validateBudgets(frm)) return false;\n        }\n        return true;\n\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Set form fields based on user role\nasync function setupFormFields(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    \n    if (isBranchUser) {\n        // For branch-level users, make sub_branch non-mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 0);\n    } else {\n        // For regular users, keep sub_branch mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 1);\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function (frm) {\n        frm.custom_validate = function () {\n            return validateAll(frm);\n        };\n    },\n    onload: function(frm) {\n        setupFormFields(frm);\n    },\n    refresh: function(frm) {\n        setupFormFields(frm);\n    },\n    validate: function (frm) {\n        return validateAll(frm);\n    },\n    before_save: function (frm) {\n        return validateAll(frm);\n    },\n    after_save: function (frm) {\n       if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n            updateBudgets(frm);\n        }\n    },\n    custom_branch: function (frm) {\n        validateAll(frm);\n    },\n    custom_sub_branch: function (frm) {\n        validateAll(frm);\n    },\n    transaction_date: function (frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function (frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-02-27 11:13:51.501073",
  "module": "o2o ErpNext",
  "name": "PO v6",
  "script": "// Store capexTotal and opexTotal globally\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\n// --- Helper Functions ---\n\n// Function to check if current user has the branch-level role\nasync function isBranchLevelUser() {\n    const user_roles = await frappe.user_roles;\n    return user_roles.includes('Person Raising Request Branch');\n}\n\nasync function getHierarchyData(frm) {\n    // Check user role to determine hierarchy level\n    const isBranchUser = await isBranchLevelUser();\n    \n    let subBranch = { message: null };\n    let branch = { message: null };\n    let supplier = { message: null };\n    \n    // For branch-level users, we only need branch and supplier\n    if (isBranchUser) {\n        if (frm.doc.custom_branch) {\n            branch = await frappe.db.get_value('Branch', frm.doc.custom_branch,\n                ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n            );\n            \n            if (branch && branch.message && branch.message.custom_supplier) {\n                supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                    ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                );\n            }\n        }\n    } \n    // For sub-branch users, get the full hierarchy\n    else {\n        if (frm.doc.custom_sub_branch) {\n            subBranch = await frappe.db.get_value('Sub Branch', frm.doc.custom_sub_branch,\n                ['branch', 'custom_supplier', 'capex_budget', 'opex_budget', 'minimum_order_value', 'maximum_order_value']\n            );\n            \n            if (subBranch && subBranch.message && subBranch.message.branch) {\n                branch = await frappe.db.get_value('Branch', subBranch.message.branch,\n                    ['custom_supplier', 'custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value']\n                );\n                \n                if (branch && branch.message && branch.message.custom_supplier) {\n                    supplier = await frappe.db.get_value('Supplier', branch.message.custom_supplier,\n                        ['custom_capex_budget', 'custom_opex_budget', 'custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date']\n                    );\n                }\n            }\n        }\n    }\n\n    return { subBranch, branch, supplier };\n}\n\nfunction validateMinMax(total, minValue, maxValue, entityType, entityName) {\n    if (minValue !== 0 || maxValue !== 0) {\n        if (total < minValue || total > maxValue) {\n            frappe.msgprint({\n                title: __('Invalid Order Value'),\n                message: __(`Total order value (${format_currency(total)}) must be between ${entityType}'s minimum value ${format_currency(minValue)} and maximum value ${format_currency(maxValue)} for ${entityName}`),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction validateBudgetLimit(total, budget, budgetType, entityType, entityName) {\n    if (budget > 0 && total > budget) {\n        frappe.msgprint({\n            title: __(`${budgetType} Budget Exceeded`),\n            message: __(`Total ${budgetType} amount (${format_currency(total)}) exceeds ${entityType} ${budgetType} budget (${format_currency(budget)}) for ${entityName}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function updateBudget(entityType, entityName, budgetField, amountToDeduct) {\n    if (amountToDeduct > 0) {\n      const currentBudget = await frappe.db.get_value(entityType, entityName, [budgetField]);\n\n        if (currentBudget && currentBudget.message && flt(currentBudget.message[budgetField]) > 0) {\n            const newBudget = flt(currentBudget.message[budgetField]) - amountToDeduct;\n            await frappe.db.set_value(entityType, entityName, budgetField, newBudget);\n            frappe.show_alert({\n                message: __(`${entityType} ${budgetField.replace('_budget','').replace('custom_','').replace('_',' ').toUpperCase()} budget updated to ${format_currency(newBudget)}`),\n                indicator: 'green'\n            }, 5);\n        }\n    }\n}\n\n// --- Validation Functions ---\n\nasync function validateBranchMandatory(frm) {\n    if (!frm.doc.custom_branch) {\n        frappe.msgprint({\n            title: __('Missing Branch'),\n            message: __('Branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateSubBranchMandatory(frm) {\n    // Skip for branch-level users\n    const isBranchUser = await isBranchLevelUser();\n    if (isBranchUser) {\n        return true;\n    }\n    \n    // Only check for regular users\n    if (!frm.doc.custom_sub_branch) {\n        frappe.msgprint({\n            title: __('Missing Sub-branch'),\n            message: __('Sub-branch is mandatory for Purchase Order'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nfunction validateTransactionDateMandatory(frm) {\n    if (!frm.doc.transaction_date) {\n        frappe.msgprint({\n            title: __('Missing Date'),\n            message: __('Transaction Date is mandatory'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateHierarchy(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    // For branch-level users, just check if branch exists\n    if (isBranchUser) {\n        if (!branch || !branch.message) {\n            frappe.msgprint({\n                title: __('Invalid Branch'),\n                message: __('Could not fetch branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    } \n    // For sub-branch users, check the full hierarchy\n    else {\n        if (!subBranch || !subBranch.message) {\n            frappe.msgprint({\n                title: __('Invalid Sub-branch'),\n                message: __('Could not fetch sub-branch details'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        \n        if (subBranch.message.branch !== frm.doc.custom_branch) {\n            frappe.msgprint({\n                title: __('Invalid Hierarchy'),\n                message: __('Selected sub-branch does not belong to the selected branch'),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n        return true;\n    }\n}\n\nasync function validateOrderValue(frm) {\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    const total = flt(frm.doc.total);\n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Branch\n        if (!validateMinMax(total, flt(branch.message.custom_minimum_order_value), \n                           flt(branch.message.custom_maximum_order_value), \n                           'Branch', frm.doc.custom_branch)) {\n            return false;\n        }\n        \n        // Supplier\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Sub-Branch\n        if (!validateMinMax(total, flt(subBranch.message.minimum_order_value), \n                           flt(subBranch.message.maximum_order_value), \n                           'Sub-branch', frm.doc.custom_sub_branch)) {\n            return false;\n        }\n        \n        // Supplier (Skip Branch)\n        if (!validateMinMax(total, flt(supplier.message.custom_minimum_order_value), \n                           flt(supplier.message.custom_maximum_order_value), \n                           'Supplier', branch.message.custom_supplier)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nasync function validateBudgetDates(frm) {\n    const transaction_date = frappe.datetime.str_to_obj(frm.doc.transaction_date);\n    const transaction_day = transaction_date.getDate();\n    const { supplier } = await getHierarchyData(frm); //Get supplier\n    if (!supplier || !supplier.message) return false;\n\n    const budget_start_day = parseInt(supplier.message.custom_budget_start_date);\n    const budget_end_day = parseInt(supplier.message.custom_budget_end_date);\n\n    if (transaction_day < budget_start_day || transaction_day > budget_end_day) {\n        frappe.msgprint({\n            title: __('Invalid Transaction Date'),\n            message: __(`Transaction date day (${transaction_day}) must be within supplier's budget days range: ${budget_start_day} to ${budget_end_day}`),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n    return true;\n}\n\nasync function validateBudgets(frm) {\n    let capexTotal = 0;\n    let opexTotal = 0;\n\n    if (!frm.doc.items || frm.doc.items.length === 0) { return true; }\n\n    for (const item of frm.doc.items) {\n        if (!item.custom_product_type) {\n            frappe.msgprint({\n                title: __('Product Type Missing'),\n                message: __('Product Type must be set for item: ' + (item.item_code || item.idx)),\n                indicator: 'red'\n            });\n            frappe.validated = false;\n            return false;\n        }\n\n        let itemAmount = flt(item.amount);\n        if (itemAmount) {\n            if (item.custom_product_type === 'Capex') {\n                capexTotal += itemAmount;\n            } else if (item.custom_product_type === 'Opex') {\n                opexTotal += itemAmount;\n            }\n        }\n    }\n\n    storedCapexTotal = capexTotal;\n    storedOpexTotal = opexTotal;\n    \n    const isBranchUser = await isBranchLevelUser();\n    const { subBranch, branch, supplier } = await getHierarchyData(frm);\n    \n    if (!supplier || !supplier.message) return false;\n    \n    // For branch-level users\n    if (isBranchUser) {\n        if (!branch || !branch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(capexTotal, flt(branch.message.custom_capex_budget), \n                                    \"Capex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Branch\n            if (!validateBudgetLimit(opexTotal, flt(branch.message.custom_opex_budget), \n                                    \"Opex\", \"Branch\", frm.doc.custom_branch)) {\n                return false;\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    } \n    // For sub-branch users\n    else {\n        if (!subBranch || !subBranch.message) return false;\n        \n        // Validate CAPEX\n        if (capexTotal > 0) {\n            // Sub-Branch\n            if (flt(subBranch.message.capex_budget) > 0) {\n                if (!validateBudgetLimit(capexTotal, flt(subBranch.message.capex_budget), \n                                        \"Capex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(capexTotal, flt(supplier.message.custom_capex_budget), \n                                    \"Capex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n        \n        // Validate OPEX\n        if (opexTotal > 0) {\n            // Sub-branch\n            if (flt(subBranch.message.opex_budget) > 0) {\n                if (!validateBudgetLimit(opexTotal, flt(subBranch.message.opex_budget), \n                                        \"Opex\", \"Sub-branch\", frm.doc.custom_sub_branch)) {\n                    return false;\n                }\n            }\n            \n            // Supplier\n            if (!validateBudgetLimit(opexTotal, flt(supplier.message.custom_opex_budget), \n                                    \"Opex\", \"Supplier\", branch.message.custom_supplier)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nasync function updateBudgets(frm) {\n    try {\n        const isBranchUser = await isBranchLevelUser();\n        const { subBranch, branch, supplier } = await getHierarchyData(frm);\n        \n        if (!supplier || !supplier.message) return;\n        \n        // For branch-level users\n        if (isBranchUser) {\n            if (!branch || !branch.message) return;\n            \n            // Update CAPEX Budget for Branch\n            if (branch.message.custom_capex_budget && flt(branch.message.custom_capex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Branch\n            if (branch.message.custom_opex_budget && flt(branch.message.custom_opex_budget) > 0) {\n                await updateBudget('Branch', frm.doc.custom_branch, 'custom_opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        } \n        // For sub-branch users\n        else {\n            if (!subBranch || !subBranch.message) return;\n            \n            // Update CAPEX Budget for Sub-Branch\n            if (subBranch.message.capex_budget && flt(subBranch.message.capex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'capex_budget', storedCapexTotal);\n            }\n            \n            // Update CAPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_capex_budget', storedCapexTotal);\n            }\n            \n            // Update OPEX Budget for Sub-Branch\n            if (subBranch.message.opex_budget && flt(subBranch.message.opex_budget) > 0) {\n                await updateBudget('Sub Branch', frm.doc.custom_sub_branch, 'opex_budget', storedOpexTotal);\n            }\n            \n            // Update OPEX Budget for Supplier\n            if (branch && branch.message && branch.message.custom_supplier) {\n                await updateBudget('Supplier', branch.message.custom_supplier, 'custom_opex_budget', storedOpexTotal);\n            }\n        }\n    } catch (error) {\n        console.error('Error updating budgets:', error);\n        frappe.msgprint({\n            title: __('Error'),\n            message: __('Failed to update budgets'),\n            indicator: 'red'\n        });\n    }\n}\n\n// Main Orchestrator\nasync function validateAll(frm) {\n    try {\n        // Basic validations\n        if (!await validateBranchMandatory(frm)) return false;\n        if (!await validateSubBranchMandatory(frm)) return false;\n        if (!validateTransactionDateMandatory(frm)) return false;\n        if (!await validateHierarchy(frm)) return false;\n\n        if (!frm.doc.items || frm.doc.items.length === 0) {\n            if (!frm.doc.__unsaved) { return true; }\n        }\n\n        if (frm.doc.items && frm.doc.items.length > 0) {\n            if (!await validateOrderValue(frm)) return false;\n            if (!await validateBudgetDates(frm)) return false;\n            if (!await validateBudgets(frm)) return false;\n        }\n        return true;\n\n    } catch (error) {\n        console.error('Validation Error:', error);\n        frappe.msgprint({\n            title: __('Validation Error'),\n            message: __('An error occurred during validation. Please try again.'),\n            indicator: 'red'\n        });\n        frappe.validated = false;\n        return false;\n    }\n}\n\n// Set form fields based on user role\nasync function setupFormFields(frm) {\n    const isBranchUser = await isBranchLevelUser();\n    \n    if (isBranchUser) {\n        // For branch-level users, make sub_branch non-mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 0);\n    } else {\n        // For regular users, keep sub_branch mandatory\n        frm.set_df_property('custom_sub_branch', 'reqd', 1);\n    }\n}\n\n// Event Handlers\nfrappe.ui.form.on('Purchase Order', {\n    setup: function (frm) {\n        frm.custom_validate = function () {\n            return validateAll(frm);\n        };\n    },\n    onload: function(frm) {\n        setupFormFields(frm);\n    },\n    refresh: function(frm) {\n        setupFormFields(frm);\n    },\n    validate: function (frm) {\n        return validateAll(frm);\n    },\n    before_save: function (frm) {\n        return validateAll(frm);\n    },\n    after_save: function (frm) {\n       if ((storedCapexTotal > 0 || storedOpexTotal > 0) && frm.doc.custom_branch) {\n            updateBudgets(frm);\n        }\n    },\n    custom_branch: function (frm) {\n        validateAll(frm);\n    },\n    custom_sub_branch: function (frm) {\n        validateAll(frm);\n    },\n    transaction_date: function (frm) {\n        validateAll(frm);\n    }\n});\n\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    items_remove: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    custom_product_type: function (frm, cdt, cdn) {\n        validateAll(frm);\n    },\n    amount: function (frm, cdt, cdn) {\n        validateAll(frm);\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-04-04 14:23:50.817646",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt merge v5",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Check for linked Purchase Invoices first - ADDED CODE\n                let receiptsChecked = 0;\n                let receiptsWithInvoices = [];\n\n                selected_docs.forEach(doc => {\n                    frappe.call({\n                        method: \"o2o_erpnext.api.purchase_receipt.check_linked_purchase_invoices\",\n                        args: {\n                            \"purchase_receipt\": doc.name\n                        },\n                        callback: function(r) {\n                            receiptsChecked++;\n                            \n                            if (r.message && r.message.success && r.message.has_active_invoices) {\n                                receiptsWithInvoices.push({\n                                    receipt: doc.name,\n                                    invoices: r.message.invoices || []\n                                });\n                            }\n                            \n                            // Once all checks are complete\n                            if (receiptsChecked === selected_docs.length) {\n                                if (receiptsWithInvoices.length > 0) {\n                                    // Format error message\n                                    let message = __('Cannot create Purchase Invoice. The following Purchase Receipts already have active linked invoices:') + '<br><br>';\n                                    \n                                    receiptsWithInvoices.forEach(r => {\n                                        message += `<strong>${r.receipt}</strong>: ` + \n                                            r.invoices.map(inv => `${inv.name} (${inv.status})`).join(', ') + '<br>';\n                                    });\n                                    \n                                    frappe.msgprint({\n                                        title: __('Cannot Create Purchase Invoice'),\n                                        indicator: 'red',\n                                        message: message\n                                    });\n                                    return;\n                                } else {\n                                    // No linked invoices found, proceed with original flow\n                                    proceedWithPurchaseInvoiceCreation();\n                                }\n                            }\n                        }\n                    });\n                });\n\n                // Original flow wrapped in a function - ADDED CODE\n                function proceedWithPurchaseInvoiceCreation() {\n                    // Get fiscal year first\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Fiscal Year',\n                            filters: {\n                                'year_start_date': ['<=', frappe.datetime.get_today()],\n                                'year_end_date': ['>=', frappe.datetime.get_today()]\n                            },\n                            fields: ['name']\n                        },\n                        callback: function(fiscal_response) {\n                            try {\n                                let display_fiscal_year = '';\n                                if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                    let fiscal_year = fiscal_response.message[0].name;\n                                    let start_year = fiscal_year.split('-')[0];\n                                    let end_year = fiscal_year.split('-')[1];\n                                    display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                                }\n\n                                frappe.call({\n                                    method: 'frappe.client.get',\n                                    args: { \n                                        doctype: 'Purchase Receipt', \n                                        name: selected_docs[0].name \n                                    },\n                                    callback: function(firstDocResponse) {\n                                        try {\n                                            if (!firstDocResponse.message) {\n                                                throw new Error('Failed to fetch first Purchase Receipt');\n                                            }\n\n                                            const firstDoc = firstDocResponse.message;\n                                            const firstVendor = firstDoc.custom_vendor;\n                                            const firstSupplier = firstDoc.supplier;\n                                            const firstBranch = firstDoc.custom_branch;\n                                            const firstSubBranch = firstDoc.custom_sub_branch; // Fetch sub-branch\n                                            const firstTaxCategory = firstDoc.tax_category;\n                                            const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                            const isReturn = firstDoc.is_return || 0;\n                                            const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                            const supplier_address = firstDoc.supplier_address;\n                                            const shipping_address = firstDoc.shipping_address;\n                                            const billing_address = firstDoc.billing_address;\n                                            const vendor_address = firstDoc.custom_vendor_address;\n\n                                            const naming_series = isReturn ? \n                                                `DN./.${display_fiscal_year}./.###` : \n                                                `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                            if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                                frappe.msgprint({\n                                                    title: __('Error'),\n                                                    indicator: 'red',\n                                                    message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                                });\n                                                return;\n                                            }\n\n                                            if (!firstBranch) {\n                                                frappe.msgprint({\n                                                    title: __('Error'),\n                                                    indicator: 'red',\n                                                    message: __('Branch is not set for the first selected receipt.')\n                                                });\n                                                return;\n                                            }\n\n                                            // Fetch all receipts first to validate supplier, branch, and sub-branch\n                                            const receiptPromises = selected_docs.map(doc => \n                                                new Promise((resolve, reject) => {\n                                                    frappe.call({\n                                                        method: 'frappe.client.get',\n                                                        args: { \n                                                            doctype: 'Purchase Receipt', \n                                                            name: doc.name \n                                                        },\n                                                        callback: function(r) {\n                                                            if (r.message) {\n                                                                resolve(r.message);\n                                                            } else {\n                                                                reject('Failed to fetch receipt');\n                                                            }\n                                                        }\n                                                    });\n                                                })\n                                            );\n\n                                            Promise.all(receiptPromises)\n                                                .then(receipts => {\n                                                    // Validate that all receipts have the same supplier, branch, and sub-branch\n                                                    const mismatchedSupplier = receipts.some(receipt => receipt.supplier !== firstSupplier);\n                                                    const mismatchedBranch = receipts.some(receipt => receipt.custom_branch !== firstBranch);\n                                                    const mismatchedSubBranch = receipts.some(receipt => receipt.custom_sub_branch !== firstSubBranch);\n\n                                                    if (mismatchedSupplier) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because suppliers are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    if (mismatchedBranch) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because branches are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    if (mismatchedSubBranch) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because sub-branches are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    frappe.call({\n                                                        method: 'frappe.client.get',\n                                                        args: {\n                                                            doctype: 'Purchase Taxes and Charges Template',\n                                                            name: firstTaxesAndCharges\n                                                        },\n                                                        callback: function(tax_template_response) {\n                                                            try {\n                                                                if (!tax_template_response.message) {\n                                                                    throw new Error('Failed to fetch tax template');\n                                                                }\n\n                                                                const tax_template = tax_template_response.message;\n                                                                let consolidatedItems = [];\n                                                                let totalGrandTotal = 0;\n                                                                let totalFreightAmount = 0;\n                                                                let freightCostEntries = [];\n\n                                                                // Process receipts data for consolidated items\n                                                                receipts.forEach(receipt => {\n                                                                    totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                    totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                    freightCostEntries.push({\n                                                                        purchase_receipt: receipt.name,\n                                                                        hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                        quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                        gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                        rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                        total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                        cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                        sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                        igst: flt(receipt.custom_igst_amount || 0),\n                                                                        amount: flt(receipt.custom_total_freight_amount || 0)\n                                                                    });\n\n                                                                    receipt.items.forEach(item => {\n                                                                        const existingItem = consolidatedItems.find(\n                                                                            ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                                ci.custom_gstn_value === item.custom_gstn_value\n                                                                        );\n\n                                                                        if (existingItem) {\n                                                                            if (existingItem.uom !== item.uom) {\n                                                                                frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                            }\n\n                                                                            const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                            const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                            \n                                                                            existingItem.qty = newQty;\n                                                                            existingItem.amount = newAmount;\n                                                                            existingItem.rate = flt(newAmount / newQty);\n                                                                            existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                            \n                                                                            if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                            existingItem.pr_details.push({\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            });\n                                                                        } else {\n                                                                            consolidatedItems.push({\n                                                                                item_code: item.item_code,\n                                                                                item_name: item.item_name,\n                                                                                qty: flt(item.qty),\n                                                                                rate: flt(item.rate),\n                                                                                amount: flt(item.amount),\n                                                                                warehouse: item.warehouse,\n                                                                                custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                                custom_gstn_value: item.custom_gstn_value,\n                                                                                uom: item.uom,\n                                                                                stock_uom: item.stock_uom,\n                                                                                conversion_factor: item.conversion_factor,\n                                                                                purchase_receipt: receipt.name,\n                                                                                pr_detail: item.name,\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item,\n                                                                                pr_details: [{\n                                                                                    pr_detail: item.name,\n                                                                                    purchase_receipt: receipt.name,\n                                                                                    amount: flt(item.amount),\n                                                                                    purchase_order: item.purchase_order,\n                                                                                    purchase_order_item: item.purchase_order_item\n                                                                                }]\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                });\n\n                                                                let taxes = [];\n                                                                if (tax_template.taxes) {\n                                                                    taxes = tax_template.taxes.map((tax, idx) => {\n                                                                        let row_id = null;\n                                                                        if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                            if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                                row_id = tax.row_id;\n                                                                            } else {\n                                                                                frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                            }\n                                                                        }\n\n                                                                        return {\n                                                                            account_head: tax.account_head,\n                                                                            charge_type: tax.charge_type,\n                                                                            row_id: row_id,\n                                                                            description: tax.description,\n                                                                            included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                            included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                            rate: tax.rate,\n                                                                            account_currency: tax.account_currency,\n                                                                            cost_center: tax.cost_center\n                                                                        };\n                                                                    });\n                                                                }\n\n                                                                const doc = {\n                                                                    doctype: 'Purchase Invoice',\n                                                                    naming_series: naming_series,\n                                                                    custom_fiscal_year: display_fiscal_year,\n                                                                    custom_vendor_code: vendor_code,\n                                                                    supplier: firstSupplier,\n                                                                    custom_vendor: firstVendor,\n                                                                    custom_branch: firstBranch,\n                                                                    custom_sub_branch: firstSubBranch, // Add sub-branch to Purchase Invoice\n                                                                    tax_category: firstTaxCategory,\n                                                                    taxes_and_charges: firstTaxesAndCharges,\n                                                                    taxes: taxes,\n                                                                    items: consolidatedItems,\n                                                                    custom_grand_total: totalGrandTotal,\n                                                                    custom_freight_amount: totalFreightAmount,\n                                                                    update_stock: 0,\n                                                                    is_return: isReturn,\n                                                                    supplier_address: supplier_address,\n                                                                    shipping_address: shipping_address,\n                                                                    billing_address: billing_address,\n                                                                    custom_vendor_address: vendor_address,\n                                                                    custom_freight_cost_data: freightCostEntries\n                                                                };\n\n                                                                console.log('Creating Purchase Invoice with:', doc);\n\n                                                                frappe.call({\n                                                                    method: 'frappe.client.insert',\n                                                                    args: { doc: doc },\n                                                                    callback: function(response) {\n                                                                        if (response.message) {\n                                                                            frappe.msgprint({\n                                                                                title: __('Success'),\n                                                                                indicator: 'green',\n                                                                                message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                            });\n\n                                                                            // Refresh listview to show updated status\n                                                                            listview.refresh();\n                                                                        } else {\n                                                                            frappe.msgprint({\n                                                                                title: __('Error'),\n                                                                                indicator: 'red',\n                                                                                message: __('Failed to create Purchase Invoice')\n                                                                            });\n                                                                        }\n                                                                    }\n                                                                });\n                                                            } catch (error) {\n                                                                console.error('Error in tax template processing:', error);\n                                                                frappe.msgprint({\n                                                                    title: __('Error'),\n                                                                    indicator: 'red',\n                                                                    message: __('Error in tax template processing: ') + error.message\n                                                                });\n                                                            }\n                                                        }\n                                                    });\n                                                })\n                                                .catch(error => {\n                                                    console.error('Error processing receipts:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error processing receipts: ') + error\n                                                    });\n                                                });\n                                        } catch (error) {\n                                            console.error('Error processing first document:', error);\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Error processing first document: ') + error.message\n                                            });\n                                        }\n                                    }\n                                });\n                            } catch (error) {\n                                console.error('Error in fiscal year processing:', error);\n                                frappe.msgprint({\n                                    title: __('Error'),\n                                    indicator: 'red',\n                                    message: __('Error in fiscal year processing: ') + error.message\n                                });\n                            }\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-04-03 14:36:08.635583",
  "module": "o2o ErpNext",
  "name": "Freight Tax Calculate",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    before_save: function(frm) {\n        // Call the custom freight tax calculation function\n        calculate_freight_tax_distribution(frm);\n    },\n    \n    // Additional handler to recalculate when tax category changes\n    tax_category: function(frm) {\n        calculate_freight_tax_distribution(frm);\n    },\n\n    // Add handlers for post-submission changes\n    custom_freight_amount: function(frm) {\n        if (frm.doc.docstatus === 1) { // 1 = Submitted status\n            calculate_freight_tax_distribution(frm);\n            // Save the document after calculation\n            frm.save('Update');\n        }\n    },\n    \n    custom_total_freight_amount: function(frm) {\n        if (frm.doc.docstatus === 1) { // 1 = Submitted status\n            calculate_freight_tax_distribution(frm);\n            // Save the document after calculation\n            frm.save('Update');\n        }\n    },\n\n    // Run calculations on form load for submitted documents\n    refresh: function(frm) {\n        if (frm.doc.docstatus === 1) {\n            // Make fields editable after submission\n            frm.set_df_property('custom_freight_amount', 'read_only', 0);\n            frm.set_df_property('custom_total_freight_amount', 'read_only', 0);\n        }\n    }\n});\n\n// Function to calculate freight tax and distribute it according to tax category\nfunction calculate_freight_tax_distribution(frm) {\n    // Get freight amount and total freight amount\n    let freight_amount = frm.doc.custom_freight_amount;\n    let total_freight_amount = frm.doc.custom_total_freight_amount;\n    let tax_category = frm.doc.tax_category;\n    \n    // Default to 0 if empty or null\n    if(freight_amount === \"\" || freight_amount === null || isNaN(freight_amount)) {\n        freight_amount = 0;\n    }\n    \n    if(total_freight_amount === \"\" || total_freight_amount === null || isNaN(total_freight_amount)) {\n        total_freight_amount = 0;\n    }\n    \n    // Calculate freight tax by subtracting freight amount from total freight amount\n    let freight_tax = total_freight_amount - freight_amount;\n    \n    // Reset tax distribution fields\n    frm.set_value('custom_cgst_amount', 0);\n    frm.set_value('custom_sgst_amount', 0);\n    frm.set_value('custom_igst_amount', 0);\n    \n    // Distribute tax based on tax_category\n    if (tax_category === \"In-State\") {\n        // Split the tax into CGST and SGST (half each)\n        let half_tax = freight_tax / 2;\n        frm.set_value('custom_cgst_amount', half_tax);\n        frm.set_value('custom_sgst_amount', half_tax);\n    } else if (tax_category === \"Out-State\") {\n        // Put the entire tax amount into IGST\n        frm.set_value('custom_igst_amount', freight_tax);\n    }\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-03-18 07:59:01.408944",
  "module": "o2o ErpNext",
  "name": "PI Tax calculate",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    after_save: function(frm) {\n        // Call the server-side function after save\n        frappe.call({\n            method: \"o2o_erpnext.api.purchase_invoice.calculate_gst_values_for_purchase_invoice\",\n            args: {\n                \"doc_name\": frm.doc.name\n            },\n            callback: function(r) {\n                if (r.message && r.message.status === \"success\") {\n                    // Refresh the form to show the updated values\n                    frm.reload_doc();\n                    \n                    // Show a success message\n                    frappe.show_alert({\n                        message: __(\"GST values calculated successfully\"),\n                        indicator: 'green'\n                    }, 5);\n                } else if (r.message && r.message.status === \"error\") {\n                    frappe.msgprint({\n                        title: __(\"Error\"),\n                        indicator: 'red',\n                        message: r.message.message\n                    });\n                }\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-03-06 03:04:32.106286",
  "module": "o2o ErpNext",
  "name": "Budget Auto Update",
  "script": "// Custom Script for Supplier List\nfrappe.listview_settings['Supplier'] = frappe.listview_settings['Supplier'] || {};\n\n// Extend the existing list view settings\nObject.assign(frappe.listview_settings['Supplier'], {\n    onload: function(listview) {\n        // Only show to administrators and system managers\n        if (frappe.user.has_role('System Manager') || frappe.user.has_role('Administrator')) {\n            // Add button to the list view\n            listview.page.add_inner_button(__('Setup Monthly Budget Updates'), function() {\n                frappe.confirm(\n                    'This will set up automatic budget updates for both Branch and Sub Branch doctypes to run on the 1st of every month at midnight (00:00 hrs). Continue?',\n                    function() {\n                        frappe.call({\n                            method: \"o2o_erpnext.branch_update.setup_all_budget_updates\",\n                            freeze: true,\n                            freeze_message: \"Setting up scheduled jobs...\",\n                            callback: function(r) {\n                                frappe.msgprint({\n                                    title: \"Success\",\n                                    indicator: \"green\",\n                                    message: \"Scheduled jobs have been set up. Branch and Sub Branch budgets will be automatically updated on the 1st of every month at 00:00 hours.\"\n                                });\n                            }\n                        });\n                    }\n                );\n            });\n        }\n    }\n});",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-03-12 11:30:39.894864",
  "module": "o2o ErpNext",
  "name": "filter for PI",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    onload: function(frm) {\n        // This runs when the form first loads\n        clearShippingAddressFilter(frm);\n    },\n    refresh: function(frm) {\n        // This runs on every refresh\n        clearShippingAddressFilter(frm);\n    },\n    company: function(frm) {\n        // This runs when company field changes\n        clearShippingAddressFilter(frm);\n    }\n});\n\nfunction clearShippingAddressFilter(frm) {\n    // Method to override only the shipping_address filtering\n    \n    // For shipping_address only\n    frm.set_query(\"shipping_address\", function() {\n        return {\n            query: \"frappe.contacts.doctype.address.address.address_query\",\n            filters: {} // Empty filters to show all addresses\n        };\n    });\n    \n    // Clear any cached queries for shipping_address\n    if(frm.fields_dict.shipping_address) {\n        frm.fields_dict.shipping_address.get_query = function() {\n            return {\n                query: \"frappe.contacts.doctype.address.address.address_query\",\n                filters: {}\n            };\n        };\n    }\n    \n    // Force UI refresh of the shipping_address field\n    frm.refresh_field(\"shipping_address\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-03-12 11:30:27.399468",
  "module": "o2o ErpNext",
  "name": "filter for PR",
  "script": "frappe.ui.form.on('Purchase Receipt', {\n    onload: function(frm) {\n        // This runs when the form first loads\n        clearShippingAddressFilter(frm);\n    },\n    refresh: function(frm) {\n        // This runs on every refresh\n        clearShippingAddressFilter(frm);\n    },\n    company: function(frm) {\n        // This runs when company field changes\n        clearShippingAddressFilter(frm);\n    }\n});\n\nfunction clearShippingAddressFilter(frm) {\n    // Method to override only the shipping_address filtering\n    \n    // For shipping_address only\n    frm.set_query(\"shipping_address\", function() {\n        return {\n            query: \"frappe.contacts.doctype.address.address.address_query\",\n            filters: {} // Empty filters to show all addresses\n        };\n    });\n    \n    // Clear any cached queries for shipping_address\n    if(frm.fields_dict.shipping_address) {\n        frm.fields_dict.shipping_address.get_query = function() {\n            return {\n                query: \"frappe.contacts.doctype.address.address.address_query\",\n                filters: {}\n            };\n        };\n    }\n    \n    // Force UI refresh of the shipping_address field\n    frm.refresh_field(\"shipping_address\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 14:40:59.822478",
  "module": "o2o ErpNext",
  "name": "filter for PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    onload: function(frm) {\n        // This runs when the form first loads\n        clearShippingAddressFilter(frm);\n    },\n    refresh: function(frm) {\n        // This runs on every refresh\n        clearShippingAddressFilter(frm);\n    },\n    company: function(frm) {\n        // This runs when company field changes\n        clearShippingAddressFilter(frm);\n    }\n});\nfunction clearShippingAddressFilter(frm) {\n    // Method to override only the shipping_address filtering\n\n    // For shipping_address only\n    frm.set_query(\"shipping_address\", function() {\n        return {\n            query: \"frappe.contacts.doctype.address.address.address_query\",\n            filters: {} // Empty filters to show all addresses\n        };\n    });\n\n    // Clear any cached queries for shipping_address\n    if(frm.fields_dict.shipping_address) {\n        frm.fields_dict.shipping_address.get_query = function() {\n            return {\n                query: \"frappe.contacts.doctype.address.address.address_query\",\n                filters: {}\n            };\n        };\n    }\n\n    // Force UI refresh of the shipping_address field\n    frm.refresh_field(\"shipping_address\");\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-03-21 03:43:25.502881",
  "module": "o2o ErpNext",
  "name": "Address Setup PO",
  "script": "frappe.ui.form.on('Purchase Order', {\n    setup: function(frm) {\n        // Override the company change handler which might be setting the shipping address\n        if (frm.cscript.company) {\n            let original_company_handler = frm.cscript.company;\n            frm.cscript.company = function(doc) {\n                // Call the original handler\n                original_company_handler(doc);\n                \n                // Apply our branch/sub-branch addresses\n                setTimeout(function() {\n                    check_and_apply_branch_addresses(frm);\n                }, 300); // Small delay to ensure our code runs after\n            };\n        }\n        \n        // Also override the address change handlers if they exist\n        if (frm.cscript.shipping_address) {\n            let original_shipping_handler = frm.cscript.shipping_address;\n            frm.cscript.shipping_address = function(doc) {\n                // Call original handler\n                original_shipping_handler(doc);\n                \n                // Check if we need to revert to branch/sub-branch address\n                setTimeout(function() {\n                    check_and_apply_branch_addresses(frm);\n                }, 300);\n            };\n        }\n    },\n    \n    // Handler for sub-branch changes\n    custom_sub_branch: function(frm) {\n        check_and_apply_branch_addresses(frm);\n    },\n    \n    // Handler for branch changes\n    custom_branch: function(frm) {\n        check_and_apply_branch_addresses(frm);\n    },\n    \n    // Add validation to ensure our addresses stay set\n    validate: function(frm) {\n        check_and_apply_branch_addresses(frm, true);\n    },\n    \n    // Add a handler when the form refreshes\n    refresh: function(frm) {\n        setTimeout(function() {\n            check_and_apply_branch_addresses(frm);\n        }, 300);\n    }\n});\n\n// Helper function to check and apply branch/sub-branch addresses\nfunction check_and_apply_branch_addresses(frm, async_false = false) {\n    const sub_branch = frm.doc.custom_sub_branch;\n    const branch = frm.doc.custom_branch;\n    \n    // Only proceed if we have either branch or sub-branch\n    if (!sub_branch && !branch) return;\n    \n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.fetch_branch_or_sub_branch_addresses',\n        args: {\n            'purchase_order_name': frm.doc.__islocal ? null : frm.docname,\n            'sub_branch': sub_branch,\n            'branch': branch\n        },\n        async: !async_false, // Make synchronous if needed (for validation)\n        callback: function(response) {\n            if (response.message && response.message.status === 'success') {\n                // If this is a new document, we'll set the values directly\n                if (frm.doc.__islocal) {\n                    if (response.message.billing_address) {\n                        frm.set_value('supplier_address', response.message.billing_address);\n                    }\n                    if (response.message.shipping_address) {\n                        frm.set_value('shipping_address', response.message.shipping_address);\n                    }\n                } else {\n                    // For existing documents, the server has already updated the values\n                    // We just need to refresh the form fields silently\n                    frm.refresh_fields(['supplier_address', 'shipping_address']);\n                }\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sub Branch",
  "enabled": 1,
  "modified": "2025-04-03 04:07:42.693997",
  "module": "o2o ErpNext",
  "name": "Create Address Sub Branch",
  "script": "frappe.ui.form.on('Sub Branch', {\n    refresh: function(frm) {\n        // Clear existing custom buttons\n        frm.remove_custom_button('Create Address');\n        frm.remove_custom_button('Delete Address');\n        \n        // Check if addresses exist\n        let billing_exists = frm.doc.address ? true : false;\n        let shipping_exists = frm.doc.custom_shipping_address ? true : false;\n        \n        // Always show the Create Address button\n        frm.add_custom_button(__('Create Address'), function() {\n            // Show dialog to select address type\n            frappe.prompt([\n                {\n                    fieldname: 'address_type',\n                    label: __('Address Type'),\n                    fieldtype: 'Select',\n                    options: 'Billing\\nShipping',\n                    reqd: 1\n                }\n            ], function(values) {\n                // After selecting address type, create a dialog matching the address form\n                let address_type = values.address_type;\n                \n                let d = new frappe.ui.Dialog({\n                    title: __('New Address'),\n                    fields: [\n                        // Section 1: Address Details\n                        {\n                            fieldname: 'address_section',\n                            fieldtype: 'Section Break',\n                            label: __('Address Details')\n                        },\n                        {\n                            fieldname: 'address_line1',\n                            label: __('Address Line 1'),\n                            fieldtype: 'Data',\n                            reqd: 1\n                        },\n                        {\n                            fieldname: 'address_line2',\n                            label: __('Address Line 2'),\n                            fieldtype: 'Data'\n                        },\n                        {\n                            fieldname: 'city',\n                            label: __('City/Town'),\n                            fieldtype: 'Data',\n                            reqd: 1\n                        },\n                        {\n                            fieldname: 'state',\n                            label: __('State/Province'),\n                            fieldtype: 'Select',\n                            options: '\\nAndaman and Nicobar Islands\\nAndhra Pradesh\\nArunachal Pradesh\\nAssam\\nBihar\\nChandigarh\\nChhattisgarh\\nDadra and Nagar Haveli and Daman and Diu\\nDelhi\\nGoa\\nGujarat\\nHaryana\\nHimachal Pradesh\\nJammu and Kashmir\\nJharkhand\\nKarnataka\\nKerala\\nLadakh\\nLakshadweep\\nMadhya Pradesh\\nMaharashtra\\nManipur\\nMeghalaya\\nMizoram\\nNagaland\\nOdisha\\nPuducherry\\nPunjab\\nRajasthan\\nSikkim\\nTamil Nadu\\nTelangana\\nTripura\\nUttar Pradesh\\nUttarakhand\\nWest Bengal',\n                            reqd: 1,\n                            change: function() {\n                                let state = d.get_value('state');\n                                if (!state) return;\n                                \n                                // Default tax category\n                                let tax_category = 'In-State';\n                                \n                                // If we have supplier information, check state directly from supplier\n                                if (frm.doc.custom_supplier) {\n                                    frappe.db.get_value('Supplier', frm.doc.custom_supplier, 'custom_vendor_state')\n                                        .then(supplier_data => {\n                                            if (supplier_data && supplier_data.message && supplier_data.message.custom_vendor_state) {\n                                                let vendor_state = supplier_data.message.custom_vendor_state;\n                                                \n                                                // Compare states\n                                                if (state.toLowerCase() === vendor_state.toLowerCase()) {\n                                                    tax_category = 'In-State';\n                                                } else {\n                                                    tax_category = 'Out-State';\n                                                }\n                                                \n                                                // Set the tax category\n                                                d.set_value('tax_category', tax_category);\n                                            }\n                                        })\n                                        .catch(err => {\n                                            console.error(\"Error fetching supplier state:\", err);\n                                            // Set default tax category on error\n                                            d.set_value('tax_category', tax_category);\n                                        });\n                                } else {\n                                    // Set default tax category if no supplier\n                                    d.set_value('tax_category', tax_category);\n                                }\n                            }\n                        },\n                        {\n                            fieldname: 'country',\n                            label: __('Country'),\n                            fieldtype: 'Link',\n                            options: 'Country',\n                            default: 'India',\n                            reqd: 1\n                        },\n                        {\n                            fieldname: 'pincode',\n                            label: __('Postal Code'),\n                            fieldtype: 'Data',\n                            reqd: 1\n                        },\n                        // Column Break\n                        {\n                            fieldname: 'col_break1',\n                            fieldtype: 'Column Break'\n                        },\n                        {\n                            fieldname: 'is_primary_address',\n                            label: __('Preferred Billing Address'),\n                            fieldtype: 'Check',\n                            default: address_type === 'Billing' ? 1 : 0\n                        },\n                        {\n                            fieldname: 'is_shipping_address',\n                            label: __('Preferred Shipping Address'),\n                            fieldtype: 'Check',\n                            default: address_type === 'Shipping' ? 1 : 0\n                        },\n                        {\n                            fieldname: 'disabled',\n                            label: __('Disabled'),\n                            fieldtype: 'Check',\n                            default: 0\n                        },\n                        // Section 2: Tax Details\n                        {\n                            fieldname: 'tax_section',\n                            fieldtype: 'Section Break',\n                            label: __('Tax Details')\n                        },\n                        {\n                            fieldname: 'gstin',\n                            label: __('GSTIN / UIN'),\n                            fieldtype: 'Data'\n                        },\n                        {\n                            fieldname: 'tax_category',\n                            label: __('Tax Category'),\n                            fieldtype: 'Link',\n                            options: 'Tax Category',\n                            default: 'In-State',\n                            reqd: 1\n                        },\n                        {\n                            fieldname: 'col_break2',\n                            fieldtype: 'Column Break'\n                        },\n                        {\n                            fieldname: 'gst_category',\n                            label: __('GST Category'),\n                            fieldtype: 'Select',\n                            options: 'Registered Regular\\nRegistered Composition\\nUnregistered\\nOverseas\\nUIN Holders\\nSEZ\\nDeemed Export',\n                            default: 'Unregistered'\n                        }\n                    ],\n                    primary_action_label: __('Save'),\n                    primary_action: function() {\n                        let values = d.get_values();\n                        \n                        // Call server-side method to create address\n                        frappe.call({\n                            method: \"create_address\",\n                            doc: frm.doc,\n                            args: {\n                                address_type: address_type,\n                                address_data: values\n                            },\n                            callback: function(r) {\n                                if (r.message && r.message.status === \"success\") {\n                                    frm.reload_doc();\n                                    d.hide();\n                                }\n                            }\n                        });\n                    }\n                });\n                \n                d.show();\n                \n                // Add \"Edit Full Form\" button\n                d.$wrapper.find('.modal-footer').prepend(`\n                    <button class=\"btn btn-default edit-full-form\">\n                        ${__('Edit Full Form')}\n                    </button>\n                `);\n                \n                // Handle Edit Full Form button click\n                d.$wrapper.find('.edit-full-form').on('click', function() {\n                    d.hide();\n                    \n                    // Create temporary address and open in full form\n                    let tmp_address = frappe.model.get_new_doc(\"Address\");\n                    frappe.set_route(\"Form\", \"Address\", tmp_address.name);\n                });\n            }, __('Select Address Type'), __('Next'));\n        }).addClass('btn-primary');\n        \n        // Show Delete Address button only if addresses exist\n        if (billing_exists || shipping_exists) {\n            frm.add_custom_button(__('Delete Address'), function() {\n                // Show a dialog with checkboxes for addresses\n                let fields = [];\n                \n                if (billing_exists) {\n                    fields.push({\n                        fieldname: 'delete_billing',\n                        label: __('Delete Billing Address'),\n                        fieldtype: 'Check',\n                        default: 0\n                    });\n                }\n                \n                if (shipping_exists) {\n                    fields.push({\n                        fieldname: 'delete_shipping',\n                        label: __('Delete Shipping Address'),\n                        fieldtype: 'Check',\n                        default: 0\n                    });\n                }\n                \n                frappe.prompt(\n                    fields,\n                    function(values) {\n                        let addresses_to_delete = [];\n                        \n                        // Prepare for update\n                        let update_fields = {};\n                        \n                        if (billing_exists && values.delete_billing) {\n                            addresses_to_delete.push(frm.doc.address);\n                            update_fields.address = '';\n                            update_fields.custom_billing_address_details = '';\n                        }\n                        \n                        if (shipping_exists && values.delete_shipping) {\n                            addresses_to_delete.push(frm.doc.custom_shipping_address);\n                            update_fields.custom_shipping_address = '';\n                            update_fields.custom_shipping_address_details = '';\n                        }\n                        \n                        if (addresses_to_delete.length === 0) {\n                            frappe.msgprint(__('No addresses selected for deletion'));\n                            return;\n                        }\n                        \n                        // First update sub branch to remove references\n                        frappe.model.set_value(frm.doctype, frm.docname, update_fields);\n                        frm.save().then(() => {\n                            // After saving Sub Branch, delete addresses one by one\n                            let deletion_promises = addresses_to_delete.map(addr => {\n                                return frappe.call({\n                                    method: 'frappe.client.delete',\n                                    args: {\n                                        doctype: 'Address',\n                                        name: addr\n                                    }\n                                });\n                            });\n                            \n                            Promise.all(deletion_promises).then(() => {\n                                frappe.msgprint(__('Selected addresses deleted'));\n                                frm.refresh();\n                            }).catch(err => {\n                                console.error(\"Error deleting addresses:\", err);\n                                frappe.msgprint(__('Error deleting some addresses. Please refresh and try again.'));\n                                frm.refresh();\n                            });\n                        });\n                    },\n                    __('Select Addresses to Delete'),\n                    __('Delete')\n                );\n            }).addClass('btn-primary');\n        }\n    }\n});",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 14:44:15.905898",
  "module": "o2o ErpNext",
  "name": "Purchase order v2",
  "script": "// Patch Frappe's check_if_latest method to always return true for Purchase Orders\n// and protect address fields from being overridden\n(function() {\n    if (typeof frappe !== 'undefined' && frappe.model) {\n        // Store the original check_if_latest method\n        const original_check_if_latest = frappe.model.check_if_latest;\n        \n        // Override the method\n        frappe.model.check_if_latest = function(doctype, doc, frm) {\n            // Skip timestamp check for Purchase Orders\n            if (doctype === \"Purchase Order\") {\n                return true;\n            }\n            // For other doctypes, use the original method\n            return original_check_if_latest.apply(this, arguments);\n        };\n        \n        console.log(\"Timestamp check disabled for Purchase Orders\");\n    }\n    \n    // Patch Frappe's set_value method for shipping_address and supplier_address\n   \n    //////\n})();\n\n// Store capexTotal and opexTotal globally for budget updates\nlet storedCapexTotal = 0;\nlet storedOpexTotal = 0;\n\nfrappe.ui.form.on('Purchase Order', {\n    setup: function(frm) {\n        // Set up custom validation\n        frm.custom_validate = function() {\n            return validate_purchase_order(frm);\n        };\n    },\n\n    refresh: function(frm) {\n        // Set vendor filters based on supplier\n        if(frm.doc.supplier) {\n            set_vendor_filters(frm);\n        }\n\n        // Only for new documents, call branch address\n        if (frm.doc.__islocal && (frm.doc.custom_branch || frm.doc.custom_sub_branch)) {\n            call_check_and_apply_branch_addresses(frm);\n        }\n\n        // Only run defaults for new documents\n        if (!frm.doc.__islocal) {\n            // Set form fields based on role\n            frappe.call({\n                method: 'o2o_erpnext.api.purchase_order.is_branch_level_user',\n                callback: function(r) {\n                    const isBranchUser = r.message;\n                    \n                    if (isBranchUser) {\n                        frm.set_df_property('custom_sub_branch', 'reqd', 0);\n                    } else {\n                        frm.set_df_property('custom_sub_branch', 'reqd', 1);\n                    }\n                }\n            });\n            \n            return;\n        }\n        \n        // Get defaults for new document\n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_and_set_purchase_order_defaults',\n            freeze: true,\n            freeze_message: __('Setting defaults...'),\n            callback: function(r) {\n                if (r.exc) return;\n                \n                if (r.message && r.message.status === 'success' && r.message.data) {\n                    // Set the default values in a batch to minimize DOM updates\n                    const updates = {};\n                    \n                    if (r.message.data.supplier) updates.supplier = r.message.data.supplier;\n                    if (r.message.data.custom_branch) updates.custom_branch = r.message.data.custom_branch;\n                    if (r.message.data.custom__approver_name_and_email) updates.custom__approver_name_and_email = r.message.data.custom__approver_name_and_email;\n                    if (r.message.data.custom_sub_branch) updates.custom_sub_branch = r.message.data.custom_sub_branch;\n                    if (r.message.data.custom_supplier_code) updates.custom_supplier_code = r.message.data.custom_supplier_code;\n                    if (r.message.data.custom_order_code) updates.custom_order_code = r.message.data.custom_order_code;\n                    \n                    // Add the combined name+email fields\n                    if (r.message.data.custom_requisition_approver_name_and_email) \n                        updates.custom_requisition_approver_name_and_email = r.message.data.custom_requisition_approver_name_and_email;\n                    \n                    // Add the separate email-only fields\n                    if (r.message.data.custom_po_approver_email)\n                        updates.custom_po_approver_email = r.message.data.custom_po_approver_email;\n                    if (r.message.data.custom_requisition_approver_email)\n                        updates.custom_requisition_approver_email = r.message.data.custom_requisition_approver_email;\n                    \n                    // Apply all updates at once\n                    frm.set_value(updates);\n                }\n            }\n        });\n\n        // Hide UI elements\n        $('.form-attachments, .form-tags, .form-share').hide();\n\n        // Remove standard buttons\n        setTimeout(() => {\n            const buttonsToRemove = [\n                'Get Items From', 'Update Items', 'Payment', 'Payment Request',\n                'Purchase Invoice', 'Link to Material Request', 'Update Rate as per Last Purchase',\n                'Print', 'Download', 'Hold', 'Close'\n            ];\n\n            buttonsToRemove.forEach(btn => frm.remove_custom_button(btn));\n            \n            // Remove menu items\n            const menuItemsToRemove = [\n                'Print', 'Email', 'Links', 'Duplicate', 'Send SMS',\n                'Copy to Clipboard', 'Reload', 'Remind Me', 'Undo',\n                'Redo', 'Repeat', 'New Purchase Order'\n            ];\n\n            menuItemsToRemove.forEach(item => {\n                const selector = `[data-label=\"${encodeURIComponent(item)}\"]`;\n                frm.page.menu.find(selector).parent().parent().remove();\n            });\n        }, 10);\n        \n        // Add custom buttons\n        frm.add_custom_button(__('Calculate GST'), function() {\n            if (!frm.doc.__islocal) {\n                call_calculate_gst_server(frm);\n            } else {\n                calculate_gst_preview(frm);\n            }\n        });\n        \n        // Add button to validate without saving\n        frm.add_custom_button(__('Validate'), function() {\n            validate_purchase_order(frm);\n        });\n    },\n\n    validate: function(frm) {\n        frm.set_value(\"custom_created_user\", frm.doc.owner);\n        return validate_purchase_order(frm);\n    },\n\n    before_save: function(frm) {\n        // Tell the system to ignore version conflicts\n        frm.doc.__save_with_options = true;\n        frm.doc.ignore_version = true;\n    },\n\n    // Consolidated after_save handler\n    after_save: function(frm) {\n        // First calculate GST\n        frappe.call({\n            method: \"o2o_erpnext.api.purchase_order.calculate_gst_values\",\n            args: {\n                \"doc_name\": frm.doc.name\n            },\n            callback: function(r) {\n                // Then update budgets after GST calculation is complete\n                frappe.call({\n                    method: 'o2o_erpnext.api.purchase_order.update_budgets_for_po',\n                    args: {\n                        doc_name: frm.doc.name,\n                        is_new: frm.doc.__islocal || frm.doc.__unsaved\n                    },\n                    callback: function(budget_r) {\n                        if (budget_r.message) {\n                            if (budget_r.message.status === 'success') {\n                                if (budget_r.message.updates && budget_r.message.updates.length > 0) {\n                                    budget_r.message.updates.forEach(update => {\n                                        frappe.show_alert({\n                                            message: __(update),\n                                            indicator: 'green'\n                                        }, 5);\n                                    });\n                                } else {\n                                    // Show message even if no updates\n                                    frappe.show_alert({\n                                        message: __(\"Budget check completed\"),\n                                        indicator: 'blue'\n                                    }, 3);\n                                }\n                            } else if (budget_r.message.status === 'error') {\n                                frappe.show_alert({\n                                    title: __('Budget Update Error'),\n                                    message: __(budget_r.message.message),\n                                    indicator: 'red'\n                                });\n                            }\n                        }\n                        \n                        // Reload the document to show all changes\n                        // frm.reload_doc();\n                    }\n                });\n            }\n        });\n    },\n\n    supplier: function(frm) {\n        if(frm.doc.supplier) {\n            // Clear vendor when supplier changes\n            frm.set_value('custom_vendor', '');\n            \n            // Set new vendor filters\n            set_vendor_filters(frm);\n            \n            // Check approval flow and clear requisition approver if needed\n            frappe.db.get_value('Supplier', frm.doc.supplier, 'custom_approval_flow', (r) => {\n                if (r && r.custom_approval_flow !== '3 way') {\n                    // Clear requisition approver fields for non-3-way approval flow\n                    frm.set_value('custom_requisition_approver_name_and_email', '');\n                    frm.set_value('custom_requisition_approver_email', '');\n                }\n            });\n        }\n    },\n    \n    custom_branch: function(frm) {\n        // Apply branch/sub-branch addresses when branch changes\n        call_check_and_apply_branch_addresses(frm);\n        \n        if(frm.doc.custom_branch && !frm.doc.__islocal) {\n            // Set branch approver\n            frappe.call({\n                method: 'o2o_erpnext.api.purchase_order.set_branch_approver_for_purchase_order',\n                args: {\n                    purchase_order_name: frm.doc.name\n                },\n                freeze: true,\n                freeze_message: __('Finding Branch Approver...'),\n                callback: function(r) {\n                    if (r.message) {\n                        if (r.message.status === 'success') {\n                            frappe.show_alert({\n                                message: __('Branch Approver set successfully'),\n                                indicator: 'green'\n                            }, 5);\n                            // Refresh both the combined field and email-only field\n                            frm.refresh_field('custom__approver_name_and_email');\n                            frm.refresh_field('custom_po_approver_email');\n                        } else if (r.message.status === 'warning') {\n                            frappe.show_alert({\n                                message: __(r.message.message),\n                                indicator: 'orange'\n                            }, 5);\n                        } else if (r.message.status === 'error') {\n                            frappe.throw(__(r.message.message));\n                        }\n                    }\n                }\n            });\n            \n            // Re-validate\n            validate_purchase_order(frm);\n        }\n    },\n    \n    custom_sub_branch: function(frm) {\n        // Apply branch/sub-branch addresses when sub-branch changes\n        call_check_and_apply_branch_addresses(frm);\n        \n        // Set requisition approver when sub-branch changes (for saved documents)\n        if(frm.doc.custom_sub_branch && !frm.doc.__islocal && frm.doc.supplier) {\n            // First check supplier's approval flow\n            frappe.db.get_value('Supplier', frm.doc.supplier, 'custom_approval_flow', (r) => {\n                if (r && r.custom_approval_flow === '3 way') {\n                    // Only set requisition approver for 3-way approval flow\n                    frappe.call({\n                        method: 'o2o_erpnext.api.purchase_order.set_requisition_approver_for_purchase_order',\n                        args: {\n                            purchase_order_name: frm.doc.name\n                        },\n                        freeze: true,\n                        freeze_message: __('Finding Requisition Approver...'),\n                        callback: function(r) {\n                            if (r.message) {\n                                if (r.message.status === 'success') {\n                                    frappe.show_alert({\n                                        message: __('Requisition Approver set successfully'),\n                                        indicator: 'green'\n                                    }, 5);\n                                    // Refresh both the combined field and email-only field\n                                    frm.refresh_field('custom_requisition_approver_name_and_email');\n                                    frm.refresh_field('custom_requisition_approver_email');\n                                } else if (r.message.status === 'warning') {\n                                    frappe.show_alert({\n                                        message: __(r.message.message),\n                                        indicator: 'orange'\n                                    }, 5);\n                                } else if (r.message.status === 'error') {\n                                    frappe.throw(__(r.message.message));\n                                }\n                            }\n                        }\n                    });\n                } else {\n                    // For non-3-way approval, clear any existing requisition approver\n                    frm.set_value('custom_requisition_approver_name_and_email', '');\n                    frm.set_value('custom_requisition_approver_email', '');\n                }\n            });\n        }\n        \n        // Re-validate\n        validate_purchase_order(frm);\n    },\n    \n    transaction_date: function(frm) {\n        validate_purchase_order(frm);\n    }\n});\n\n// Child table event handlers\nfrappe.ui.form.on('Purchase Order Item', {\n    items_add: function(frm, cdt, cdn) {\n        validate_purchase_order(frm);\n    },\n    \n    items_remove: function(frm, cdt, cdn) {\n        validate_purchase_order(frm);\n    },\n    \n    custom_product_type: function(frm, cdt, cdn) {\n        validate_purchase_order(frm);\n    },\n    \n    amount: function(frm, cdt, cdn) {\n        validate_purchase_order(frm);\n    }\n});\n\n// Helper function to apply branch addresses server-side\nfunction call_check_and_apply_branch_addresses(frm, async_false = false) {\n    const sub_branch = frm.doc.custom_sub_branch;\n    const branch = frm.doc.custom_branch;\n    \n    // Only proceed if we have either branch or sub-branch\n    if (!sub_branch && !branch) return;\n    \n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.fetch_branch_or_sub_branch_addresses',\n        args: {\n            'purchase_order_name': frm.doc.__islocal ? null : frm.docname,\n            'sub_branch': sub_branch,\n            'branch': branch\n        },\n        async: !async_false, // Make synchronous if needed (for validation)\n        callback: function(response) {\n            if (response.message && response.message.status === 'success') {\n                // If this is a new document, we'll set the values directly\n                if (frm.doc.__islocal) {\n                    if (response.message.billing_address) {\n                        frm.set_value('supplier_address', response.message.billing_address);\n                    }\n                    if (response.message.shipping_address) {\n                        frm.set_value('shipping_address', response.message.shipping_address);\n                    }\n                } else {\n                    // For existing documents, the server has already updated the values\n                    // We just need to refresh the form fields silently\n                    frm.refresh_fields(['supplier_address', 'shipping_address']);\n                }\n            }\n        }\n    });\n}\n\n// Helper function to validate purchase order\nfunction validate_purchase_order(frm) {\n    if (frm.doc.__islocal) {\n        // For unsaved documents, validate client-side\n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_purchase_order',\n            args: {\n                doc_json: JSON.stringify(frm.doc)\n            },\n            async: false,\n            callback: function(r) {\n                if (r.message) {\n                    if (r.message.status === 'error') {\n                        if (r.message.message) {\n                            frappe.show_alert({\n                                title: __('Validation Error'),\n                                message: __(r.message.message),\n                                indicator: 'red'\n                            });\n                            frappe.validated = false;\n                            return false;\n                        }\n                    }\n                    \n                    // Check individual validations\n                    if (r.message.validations) {\n                        for (const key in r.message.validations) {\n                            const validation = r.message.validations[key];\n                            if (validation.status === 'error') {\n                                frappe.show_alert({\n                                    title: __('Validation Error'),\n                                    message: __(validation.message),\n                                    indicator: 'red'\n                                });\n                                frappe.validated = false;\n                                return false;\n                            }\n                        }\n                    }\n                    \n                    // Store CAPEX/OPEX totals for budget updates\n                    storedCapexTotal = r.message.capex_total || 0;\n                    storedOpexTotal = r.message.opex_total || 0;\n                }\n            }\n        });\n    } else {\n        // For saved documents, validate on server\n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.validate_purchase_order',\n            args: {\n                doc_name: frm.doc.name\n            },\n            async: false,\n            callback: function(r) {\n                if (r.message) {\n                    if (r.message.status === 'error') {\n                        if (r.message.message) {\n                            frappe.show_alert({\n                                title: __('Validation Error'),\n                                message: __(r.message.message),\n                                indicator: 'red'\n                            });\n                            frappe.validated = false;\n                            return false;\n                        }\n                    }\n                    \n                    // Check individual validations\n                    if (r.message.validations) {\n                        for (const key in r.message.validations) {\n                            const validation = r.message.validations[key];\n                            if (validation.status === 'error') {\n                                frappe.show_alert({\n                                    title: __('Validation Error'),\n                                    message: __(validation.message),\n                                    indicator: 'red'\n                                });\n                                frappe.validated = false;\n                                return false;\n                            }\n                        }\n                    }\n                    \n                    // Store CAPEX/OPEX totals for budget updates\n                    storedCapexTotal = r.message.capex_total || 0;\n                    storedOpexTotal = r.message.opex_total || 0;\n                }\n            }\n        });\n    }\n    \n    return true;\n}\n\n// Helper function to call server-side GST calculation\nfunction call_calculate_gst_server(frm) {\n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.calculate_gst_values',\n        args: {\n            doc_name: frm.doc.name\n        },\n        freeze: true,\n        freeze_message: __('Calculating GST...'),\n        callback: function(r) {\n            if (r.message && r.message.status === 'success') {\n                frappe.show_alert({\n                    indicator: 'green'\n                }, 5);\n                frm.refresh();\n            } else {\n                frappe.show_alert({\n                    message: __('Error calculating GST values'),\n                    indicator: 'red'\n                }, 5);\n            }\n        }\n    });\n}\n\n// For new documents, preview GST calculation without saving\nfunction calculate_gst_preview(frm) {\n    // First prepare item data to send to server\n    const items = frm.doc.items || [];\n    if (items.length === 0) {\n        frappe.show_alert({\n            message: __('No items to calculate GST for'),\n            indicator: 'orange'\n        }, 5);\n        return;\n    }\n    \n    const items_data = items.map(item => ({\n        name: item.name,\n        sgst_amount: item.sgst_amount || 0,\n        cgst_amount: item.cgst_amount || 0,\n        igst_amount: item.igst_amount || 0,\n        net_amount: item.net_amount || 0\n    }));\n    \n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.calculate_item_gst_values',\n        args: {\n            items_json: JSON.stringify(items_data)\n        },\n        freeze: true,\n        freeze_message: __('Calculating GST...'),\n        callback: function(r) {\n            if (r.message && r.message.status === 'success' && r.message.data) {\n                // Update the local doc with calculated values\n                for (const calc_item of r.message.data) {\n                    const local_item = frm.doc.items.find(i => i.name === calc_item.name);\n                    if (local_item) {\n                        local_item.custom_gstn_value = calc_item.custom_gstn_value;\n                        local_item.custom_grand_total = calc_item.custom_grand_total;\n                    }\n                }\n                frm.refresh_field('items');\n                frappe.show_alert({\n                    message: __('GST values calculated'),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                frappe.show_alert({\n                    message: __('Error calculating GST values'),\n                    indicator: 'red'\n                }, 5);\n            }\n        }\n    });\n}\n\n// Function to set vendor filters\nfunction set_vendor_filters(frm) {\n    frappe.call({\n        method: 'o2o_erpnext.api.purchase_order.get_supplier_vendors',\n        args: {\n            supplier: frm.doc.supplier\n        },\n        callback: function(r) {\n            if(r.message) {\n                let allowed_vendors = r.message;\n                \n                // Set filters on vendor field\n                frm.set_query('custom_vendor', function() {\n                    return {\n                        filters: {\n                            'name': ['in', allowed_vendors.length ? allowed_vendors : ['NONE']]\n                        }\n                    };\n                });\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-04-04 12:22:16.159411",
  "module": "o2o ErpNext",
  "name": "PO budget display",
  "script": "frappe.ui.form.on('Purchase Order', {\n    // Keep all other handlers\n    \n    refresh: function(frm) {\n        // Call other refresh functionality first\n        \n        // Add budget indicators if we have branch information\n        if (frm.doc.custom_branch) {\n            // Clear any existing custom indicators\n            frm.dashboard.clear_headline();\n            \n            // Get user context first, then retrieve budget data\n            getUserContext().then(userContext => {\n                if (!userContext) return;\n                \n                // Get budget data with context\n                frappe.call({\n                    method: 'o2o_erpnext.api.purchase_order.get_current_budgets',\n                    args: {\n                        branch: frm.doc.custom_branch,\n                        sub_branch: frm.doc.custom_sub_branch\n                    },\n                    callback: function(r) {\n                        if (r.message) {\n                            const budgets = r.message;\n                            \n                            // Format budget values\n                            const format_currency = function(value) {\n                                if (value === null || value === undefined) return \"N/A\";\n                                return frappe.format(value, {fieldtype: \"Currency\"});\n                            };\n                            \n                            // Get the budget values based on user role\n                            let capex_budget, opex_budget, label;\n                            let showCapex = userContext.showCapexBudget;\n                            let showOpex = userContext.showOpexBudget;\n                            \n                            if (budgets.is_branch_user) {\n                                // For branch users, show branch budgets\n                                if (budgets.branch) {\n                                    capex_budget = format_currency(budgets.branch.custom_capex_budget);\n                                    opex_budget = format_currency(budgets.branch.custom_opex_budget);\n                                    label = \"Branch\";\n                                } else {\n                                    capex_budget = \"N/A\";\n                                    opex_budget = \"N/A\";\n                                    label = \"Branch\";\n                                }\n                            } else {\n                                // For sub-branch users, show sub-branch budgets\n                                if (budgets.sub_branch) {\n                                    capex_budget = format_currency(budgets.sub_branch.capex_budget);\n                                    opex_budget = format_currency(budgets.sub_branch.opex_budget);\n                                    label = \"Sub Branch\";\n                                } else {\n                                    capex_budget = \"N/A\";\n                                    opex_budget = \"N/A\";\n                                    label = \"Sub Branch\";\n                                }\n                            }\n                            \n                            // Build headline HTML with conditional sections based on supplier settings\n                            let headlineHTML = '<div style=\"display: flex; justify-content: space-around; width: 100%;\">';\n                            \n                            // Only show CAPEX section if supplier settings allow it\n                            if (showCapex) {\n                                headlineHTML += `\n                                    <div style=\"text-align: center; padding: 5px 15px; border-radius: 4px; background-color: #f0f4f9; border: 1px solid #d1d8dd;\">\n                                        <div style=\"font-weight: bold; color: #8d99a6; font-size: 12px;\">${label} CAPEX Budget</div>\n                                        <div style=\"font-weight: bold; font-size: 16px;\">${capex_budget}</div>\n                                    </div>`;\n                            }\n                            \n                            // Only show OPEX section if supplier settings allow it\n                            if (showOpex) {\n                                headlineHTML += `\n                                    <div style=\"text-align: center; padding: 5px 15px; border-radius: 4px; background-color: #f0f4f9; border: 1px solid #d1d8dd;\">\n                                        <div style=\"font-weight: bold; color: #8d99a6; font-size: 12px;\">${label} OPEX Budget</div>\n                                        <div style=\"font-weight: bold; font-size: 16px;\">${opex_budget}</div>\n                                    </div>`;\n                            }\n                            \n                            headlineHTML += '</div>';\n                            \n                            // Only set headline if at least one budget should be shown\n                            if (showCapex || showOpex) {\n                                frm.dashboard.set_headline(headlineHTML);\n                            } else {\n                                frm.dashboard.clear_headline();\n                            }\n                        } else {\n                            // If no data, clear the headline\n                            frm.dashboard.clear_headline();\n                        }\n                    }\n                });\n            });\n        }\n    },\n    \n    custom_branch: function(frm) {\n        // Execute existing custom_branch code\n        \n        // Refresh to update budget indicators\n        frm.refresh();\n    },\n    \n    custom_sub_branch: function(frm) {\n        // Execute existing custom_sub_branch code\n        \n        // Refresh to update budget indicators\n        frm.refresh();\n    }\n});\n\n// Helper function to get user context including supplier settings\nfunction getUserContext() {\n    return new Promise((resolve, reject) => {\n        // Get employee details for the current user\n        frappe.call({\n            method: \"frappe.client.get\",\n            args: {\n                doctype: \"Employee\",\n                filters: {\n                    user_id: ['=', frappe.session.user]\n                },\n                fields: [\"custom_supplier\", \"branch\", \"custom_sub_branch\"]\n            },\n            callback(employeeResponse) {\n                if (employeeResponse && employeeResponse.message) {\n                    const employee = employeeResponse.message;\n                    \n                    // If we have a supplier, get its settings\n                    if (employee.custom_supplier) {\n                        frappe.call({\n                            method: \"frappe.client.get\",\n                            args: {\n                                doctype: \"Supplier\",\n                                filters: {\n                                    name: employee.custom_supplier\n                                },\n                                fields: [\"custom_show_capex_budget\", \"custom_show_opex_budget\", \"supplier_name\"]\n                            },\n                            callback(supplierResponse) {\n                                if (supplierResponse && supplierResponse.message) {\n                                    const supplier = supplierResponse.message;\n                                    \n                                    // Return complete context\n                                    resolve({\n                                        employee: employee,\n                                        supplier: supplier.supplier_name,\n                                        showCapexBudget: supplier.custom_show_capex_budget,\n                                        showOpexBudget: supplier.custom_show_opex_budget\n                                    });\n                                } else {\n                                    // Return partial context if supplier retrieval fails\n                                    resolve({\n                                        employee: employee,\n                                        showCapexBudget: true,\n                                        showOpexBudget: true\n                                    });\n                                }\n                            }\n                        });\n                    } else {\n                        // Return partial context if no supplier is linked\n                        resolve({\n                            employee: employee,\n                            showCapexBudget: true,\n                            showOpexBudget: true\n                        });\n                    }\n                } else {\n                    // Resolve with null if no employee found\n                    resolve(null);\n                }\n            }\n        });\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 14:44:15.957278",
  "module": "o2o ErpNext",
  "name": "Po Transactions",
  "script": "// Budget Transaction functionality for Purchase Order\nfrappe.ui.form.on('Purchase Order', {\n    refresh: function(frm) {\n        // Only add dashboard for existing documents\n        if (!frm.doc.__islocal) {\n            // Add budget display section\n            try {\n                frm.dashboard.add_section(\n                    `<div class=\"row\">\n                        <div class=\"col-xs-6\">\n                            <div style=\"border: 1px solid #d1d8dd; border-radius: 4px; padding: 10px; text-align: center; background-color: #f5f7fa; margin: 5px;\">\n                                <div style=\"font-weight: bold; color: #8d99a6;\">CAPEX Budget Used</div>\n                                <div style=\"font-size: 16px; font-weight: bold;\">${frappe.format(frm.doc.custom_last_capex_total || 0, {fieldtype: \"Currency\"})}</div>\n                            </div>\n                        </div>\n                        <div class=\"col-xs-6\">\n                            <div style=\"border: 1px solid #d1d8dd; border-radius: 4px; padding: 10px; text-align: center; background-color: #f5f7fa; margin: 5px;\">\n                                <div style=\"font-weight: bold; color: #8d99a6;\">OPEX Budget Used</div>\n                                <div style=\"font-size: 16px; font-weight: bold;\">${frappe.format(frm.doc.custom_last_opex_total || 0, {fieldtype: \"Currency\"})}</div>\n                            </div>\n                        </div>\n                    </div>`\n                );\n                \n                // Add button to view budget transactions\n                if (frm.doc.custom_budget_transactions) {\n                    frm.add_custom_button(__('View Budget Transactions'), function() {\n                        frappe.route_options = {\n                            \"reference_doctype\": \"Purchase Order\",\n                            \"reference_name\": frm.doc.name\n                        };\n                        frappe.set_route(\"List\", \"Budget Transaction\");\n                    }, __(\"Budget\"));\n                }\n            } catch (e) {\n                console.error(\"Error rendering budget dashboard:\", e);\n            }\n        }\n    },\n\n    after_save: function(frm) {\n        // Call the budget update function\n        frappe.call({\n            method: 'o2o_erpnext.api.purchase_order.update_budgets_for_po',\n            args: {\n                doc_name: frm.doc.name,\n                is_new: frm.doc.__islocal\n            },\n            callback: function(r) {\n                if (r.message && r.message.status === 'success') {\n                    // Display budget updates\n                    if (r.message.updates && r.message.updates.length > 0) {\n                        r.message.updates.forEach(update => {\n                            frappe.show_alert({\n                                message: __(update),\n                                indicator: 'green'\n                            }, 5);\n                        });\n                    }\n                    \n                    // Refresh the form\n                    // frm.reload_doc();\n                }\n            }\n        });\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item Price",
  "enabled": 1,
  "modified": "2025-04-05 11:11:17.155571",
  "module": "o2o ErpNext",
  "name": "Item Price Filter",
  "script": "frappe.listview_settings['Item Price'] = {\n    // Track state to prevent duplicate operations\n    filter_initialized: false,\n    supplier_value: null,\n    \n    onload: function(listview) {\n        // Store reference to listview\n        this.listview = listview;\n        \n        // Exit early for Administrator\n        if (this.isAdministrator()) {\n            console.log(\"User is Administrator, skipping filter\");\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            console.log(\"User doesn't have Supplier, Requisition Approver, or PO Approver role, skipping filter\");\n            return;\n        }\n        \n        // Apply filter once per page load\n        if (!this.filter_initialized) {\n            console.log(\"Initializing supplier filter for restricted user\");\n            this.initializeSupplierFilter();\n        }\n    },\n    \n    isAdministrator: function() {\n        // Check if current user is Administrator\n        return frappe.user_roles.includes('Administrator');\n    },\n    \n    hasSupplierRole: function() {\n        // Check if user has Supplier role\n        return frappe.user_roles.includes('Supplier');\n    },\n    \n    hasApproverRole: function() {\n        // Check if user has either Requisition Approver or PO Approver role\n        return frappe.user_roles.includes('Requisition Approver') || \n               frappe.user_roles.includes('PO Approver');\n    },\n    \n    initializeSupplierFilter: function() {\n        // Mark as initialized to prevent duplicate calls\n        this.filter_initialized = true;\n        \n        var me = this;\n        \n        // Different supplier lookup logic based on role\n        if (this.hasSupplierRole()) {\n            // For Supplier role - Get supplier directly linked to user\n            this.getSupplierFromUser();\n        } else if (this.hasApproverRole()) {\n            // For Approver roles - Get supplier through employee\n            this.getSupplierFromEmployee();\n        }\n    },\n    \n    getSupplierFromUser: function() {\n        var me = this;\n        \n        // Get the supplier linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Supplier',\n                filters: { 'custom_user': frappe.session.user },\n                fieldname: ['name']\n            },\n            callback: function(r) {\n                if (r.message && r.message.name) {\n                    me.supplier_value = r.message.name;\n                    console.log(\"Found supplier for current user:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing price list items for your supplier account: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to current user\");\n                    frappe.show_alert({\n                        message: __('No supplier is linked to your user account.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    getSupplierFromEmployee: function() {\n        var me = this;\n        \n        // First get the employee linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Employee',\n                filters: { 'user_id': frappe.session.user },\n                fieldname: ['name', 'custom_supplier']\n            },\n            callback: function(r) {\n                if (r.message && r.message.custom_supplier) {\n                    me.supplier_value = r.message.custom_supplier;\n                    console.log(\"Found supplier from employee record:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing price list items for your associated supplier: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to employee record\");\n                    frappe.show_alert({\n                        message: __('No supplier is associated with your employee record.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    applySupplierFilter: function(supplier) {\n        if (!supplier || !this.listview) return;\n        \n        var me = this;\n        \n        console.log(\"Applying supplier filter to Item Price list:\", supplier);\n        \n        // Clear existing filters\n        this.listview.filter_area.clear();\n        \n        // Add supplier filter\n        this.listview.filter_area.add([\n            ['Item Price', 'supplier', '=', supplier]\n        ]);\n        \n        // Apply UI restrictions\n        this.applyUIRestrictions();\n        \n        // Override filter methods to maintain filter\n        this.overrideFilterMethods(supplier);\n    },\n    \n    overrideFilterMethods: function(supplier) {\n        var me = this;\n        \n        // Override the get method to ensure our filter always stays applied\n        var originalGet = this.listview.filter_area.get;\n        \n        this.listview.filter_area.get = function() {\n            var filters = originalGet.apply(this, arguments);\n            \n            // Check if our filter exists\n            var hasSupplierFilter = filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'supplier' && f[3] === supplier) ||\n                       (f.fieldname === 'supplier' && f.value === supplier);\n            });\n            \n            // If not, add it back to the filters array\n            if (!hasSupplierFilter) {\n                filters.push(['Item Price', 'supplier', '=', supplier]);\n            }\n            \n            return filters;\n        };\n        \n        // Override the clear method to prevent complete clearing\n        var originalClear = this.listview.filter_area.clear;\n        \n        this.listview.filter_area.clear = function() {\n            // Call original clear\n            originalClear.apply(this, arguments);\n            \n            // Immediately re-add our filter without triggering refresh\n            this.filters.push({\n                fieldname: 'supplier',\n                label: 'Supplier',\n                condition: '=',\n                value: supplier\n            });\n        };\n    },\n    \n    applyUIRestrictions: function() {\n        // Add CSS to restrict UI\n        if (!document.getElementById('item-price-restriction-style')) {\n            var style = document.createElement('style');\n            style.id = 'item-price-restriction-style';\n            style.innerHTML = `\n                .filter-selector, .filter-button, .tag-filters-area, .clear-filters { \n                    display: none !important; \n                }\n                .filter-box .filter-area { \n                    pointer-events: none !important; \n                }\n                .filter-tag .remove-filter {\n                    display: none !important;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    },\n    \n    refresh: function(listview) {\n        // Update listview reference\n        this.listview = listview;\n        \n        // Skip for Administrator\n        if (this.isAdministrator()) {\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            return;\n        }\n        \n        // Initialize filter if not already done\n        if (!this.filter_initialized) {\n            this.initializeSupplierFilter();\n            return;\n        }\n        \n        // Re-apply UI restrictions\n        this.applyUIRestrictions();\n        \n        // Check if we need to re-apply filter\n        if (this.supplier_value) {\n            var current_filters = listview.filter_area.get();\n            \n            // Check if our filter exists\n            var hasFilter = current_filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'supplier' && f[3] === this.supplier_value) ||\n                       (f.fieldname === 'supplier' && f.value === this.supplier_value);\n            }, this);\n            \n            // Re-apply if filter is missing\n            if (!hasFilter) {\n                console.log(\"Re-applying supplier filter\");\n                this.listview.filter_area.add([\n                    ['Item Price', 'supplier', '=', this.supplier_value]\n                ]);\n            }\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 1,
  "modified": "2025-04-04 12:52:52.565154",
  "module": null,
  "name": "Purchase Receipt Limit on PI",
  "script": "// Purchase Receipt - Client Script\nfrappe.ui.form.on('Purchase Receipt', {\n    refresh: function(frm) {\n        if (frm.doc.__islocal || frm.doc.docstatus !== 1) {\n            return; // Only run for saved, submitted documents\n        }\n        \n        // Add the Check Linked Invoices button\n        frm.add_custom_button(__('Check Linked Invoices'), function() {\n            check_linked_invoices(frm);\n        }, __(\"Tools\"));\n        \n        // When the form refreshes, directly override the standard make_purchase_invoice function\n        // Store the original function\n        if (!window._original_make_purchase_invoice) {\n            window._original_make_purchase_invoice = cur_frm.cscript.make_purchase_invoice;\n            \n            // Replace it with our custom function\n            cur_frm.cscript.make_purchase_invoice = function() {\n                // Check for linked invoices before proceeding\n                frappe.call({\n                    method: \"o2o_erpnext.api.purchase_receipt.check_linked_purchase_invoices\",\n                    args: {\n                        \"purchase_receipt\": frm.doc.name\n                    },\n                    callback: function(r) {\n                        if (r.message && r.message.success) {\n                            if (r.message.has_active_invoices) {\n                                // Format invoice list for display\n                                const invoice_list = r.message.invoices.map(inv => \n                                    `${inv.name} (${inv.status})`).join('<br>');\n                                \n                                // If active invoices exist (Draft OR Submitted), show warning\n                                frappe.msgprint({\n                                    title: __('Cannot Create Purchase Invoice'),\n                                    indicator: 'red',\n                                    message: __(`This Purchase Receipt already has active linked Purchase Invoices:<br>${invoice_list}<br><br>You cannot create additional Purchase Invoices for this receipt.`)\n                                });\n                            } else {\n                                // If no active invoices, proceed with original method\n                                window._original_make_purchase_invoice.apply(cur_frm.cscript);\n                            }\n                        } else {\n                            frappe.msgprint({\n                                title: __('Error'),\n                                indicator: 'red',\n                                message: __('Failed to check for linked Purchase Invoices. For safety, invoice creation has been blocked.')\n                            });\n                        }\n                    }\n                });\n            };\n        }\n        \n        // Also check for linked invoices silently on form load\n        check_linked_invoices(frm, true).then(function(result) {\n            if (result && result.has_active_invoices) {\n                // Format the invoice list for display\n                const invoice_list = result.invoices.map(inv => \n                    `${inv.name} (${inv.status})`).join('<br>');\n                \n                // Add an indicator to the dashboard with both Draft and Submitted status mentioned\n                frm.dashboard.add_indicator(\n                    __(\"Has active linked Purchase Invoices in Draft or Submitted status\"), \"red\"\n                );\n                \n                // Add a custom message in the dashboard\n                frm.dashboard.add_section(\n                    `<div class=\"form-dashboard-section custom-linked-invoices\">\n                        <div class=\"section-head\">Linked Purchase Invoices</div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"alert alert-warning\">\n                                    This Purchase Receipt has active linked Purchase Invoices in Draft or Submitted status:<br>\n                                    ${invoice_list}<br><br>\n                                    You cannot create additional Purchase Invoices for this receipt.\n                                </div>\n                            </div>\n                        </div>\n                    </div>`\n                );\n            }\n        }).catch(function(err) {\n            console.error(\"Error checking linked invoices:\", err);\n        });\n    }\n});\n\n// Function to check linked invoices\nfunction check_linked_invoices(frm, silent = false) {\n    return new Promise(function(resolve, reject) {\n        if (!silent) {\n            frappe.show_alert({\n                message: __(\"Checking for linked Purchase Invoices in Draft or Submitted status...\"),\n                indicator: 'blue'\n            }, 3);\n        }\n        \n        frappe.call({\n            method: \"o2o_erpnext.api.purchase_receipt.check_linked_purchase_invoices\",\n            args: {\n                \"purchase_receipt\": frm.doc.name\n            },\n            callback: function(r) {\n                if (r.message && r.message.success) {\n                    if (r.message.has_active_invoices && !silent) {\n                        // Format the invoice list\n                        const invoice_list = r.message.invoices.map(inv => \n                            `${inv.name} (${inv.status})`).join('<br>');\n                        \n                        // Show warning message explicitly mentioning Draft OR Submitted status\n                        frappe.msgprint({\n                            title: __('Active Linked Invoices Found'),\n                            indicator: 'red',\n                            message: __(`This Purchase Receipt has active linked Purchase Invoices in Draft or Submitted status:<br>${invoice_list}<br><br>You cannot create additional Purchase Invoices for this receipt.`)\n                        });\n                    } else if (!r.message.has_active_invoices && !silent) {\n                        frappe.msgprint({\n                            title: __('No Active Linked Invoices'),\n                            indicator: 'green',\n                            message: __('No active Purchase Invoices found in Draft or Submitted status. You can create a new one.')\n                        });\n                    }\n                    \n                    resolve(r.message);\n                } else {\n                    if (!silent) {\n                        frappe.msgprint({\n                            title: __('Error'),\n                            indicator: 'red',\n                            message: __('Failed to check for linked Purchase Invoices.')\n                        });\n                    }\n                    reject(new Error(\"Failed to check linked invoices\"));\n                }\n            }\n        });\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Receipt",
  "enabled": 0,
  "modified": "2025-04-04 14:23:58.695341",
  "module": null,
  "name": "PR Merge V6",
  "script": "frappe.listview_settings['Purchase Receipt'] = {\n    onload: function(listview) {\n        listview.page.add_action_item(__('Create Purchase Invoice'), function() {\n            try {\n                const selected_docs = listview.get_checked_items();\n\n                if (selected_docs.length === 0) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select at least one Purchase Receipt')\n                    });\n                    return;\n                }\n\n                // Add validation for submitted documents only\n                const hasNonSubmittedDocs = selected_docs.some(doc => doc.docstatus !== 1);\n                if (hasNonSubmittedDocs) {\n                    frappe.msgprint({\n                        title: __('Warning'),\n                        indicator: 'red',\n                        message: __('Please select only submitted Purchase Receipts. Draft or cancelled Purchase Receipts cannot be merged.')\n                    });\n                    return;\n                }\n\n                // Check for linked Purchase Invoices first - ADDED CODE\n                let receiptsChecked = 0;\n                let receiptsWithInvoices = [];\n\n                selected_docs.forEach(doc => {\n                    frappe.call({\n                        method: \"o2o_erpnext.api.purchase_receipt.check_linked_purchase_invoices\",\n                        args: {\n                            \"purchase_receipt\": doc.name\n                        },\n                        callback: function(r) {\n                            receiptsChecked++;\n                            \n                            if (r.message && r.message.success && r.message.has_active_invoices) {\n                                receiptsWithInvoices.push({\n                                    receipt: doc.name,\n                                    invoices: r.message.invoices || []\n                                });\n                            }\n                            \n                            // Once all checks are complete\n                            if (receiptsChecked === selected_docs.length) {\n                                if (receiptsWithInvoices.length > 0) {\n                                    // Format error message\n                                    let message = __('Cannot create Purchase Invoice. The following Purchase Receipts already have active linked invoices:') + '<br><br>';\n                                    \n                                    receiptsWithInvoices.forEach(r => {\n                                        message += `<strong>${r.receipt}</strong>: ` + \n                                            r.invoices.map(inv => `${inv.name} (${inv.status})`).join(', ') + '<br>';\n                                    });\n                                    \n                                    frappe.msgprint({\n                                        title: __('Cannot Create Purchase Invoice'),\n                                        indicator: 'red',\n                                        message: message\n                                    });\n                                    return;\n                                } else {\n                                    // No linked invoices found, proceed with original flow\n                                    proceedWithPurchaseInvoiceCreation();\n                                }\n                            }\n                        }\n                    });\n                });\n\n                // Original flow wrapped in a function - ADDED CODE\n                function proceedWithPurchaseInvoiceCreation() {\n                    // Get fiscal year first\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Fiscal Year',\n                            filters: {\n                                'year_start_date': ['<=', frappe.datetime.get_today()],\n                                'year_end_date': ['>=', frappe.datetime.get_today()]\n                            },\n                            fields: ['name']\n                        },\n                        callback: function(fiscal_response) {\n                            try {\n                                let display_fiscal_year = '';\n                                if (fiscal_response.message && fiscal_response.message.length > 0) {\n                                    let fiscal_year = fiscal_response.message[0].name;\n                                    let start_year = fiscal_year.split('-')[0];\n                                    let end_year = fiscal_year.split('-')[1];\n                                    display_fiscal_year = start_year.substring(2) + '-' + end_year.substring(2);\n                                }\n\n                                frappe.call({\n                                    method: 'frappe.client.get',\n                                    args: { \n                                        doctype: 'Purchase Receipt', \n                                        name: selected_docs[0].name \n                                    },\n                                    callback: function(firstDocResponse) {\n                                        try {\n                                            if (!firstDocResponse.message) {\n                                                throw new Error('Failed to fetch first Purchase Receipt');\n                                            }\n\n                                            const firstDoc = firstDocResponse.message;\n                                            const firstVendor = firstDoc.custom_vendor;\n                                            const firstSupplier = firstDoc.supplier;\n                                            const firstBranch = firstDoc.custom_branch;\n                                            const firstSubBranch = firstDoc.custom_sub_branch; // Fetch sub-branch\n                                            const firstTaxCategory = firstDoc.tax_category;\n                                            const firstTaxesAndCharges = firstDoc.taxes_and_charges;\n                                            const isReturn = firstDoc.is_return || 0;\n                                            const vendor_code = firstVendor ? firstVendor.substring(0, 5).toUpperCase() : '';\n\n                                            const supplier_address = firstDoc.supplier_address;\n                                            const shipping_address = firstDoc.shipping_address;\n                                            const billing_address = firstDoc.billing_address;\n                                            const vendor_address = firstDoc.custom_vendor_address;\n\n                                            const naming_series = isReturn ? \n                                                `DN./.${display_fiscal_year}./.###` : \n                                                `${vendor_code}./.${display_fiscal_year}./.###`;\n\n                                            if (!firstTaxCategory || !firstTaxesAndCharges) {\n                                                frappe.msgprint({\n                                                    title: __('Error'),\n                                                    indicator: 'red',\n                                                    message: __('Tax Category and Taxes and Charges must be set for the first selected receipt.')\n                                                });\n                                                return;\n                                            }\n\n                                            if (!firstBranch) {\n                                                frappe.msgprint({\n                                                    title: __('Error'),\n                                                    indicator: 'red',\n                                                    message: __('Branch is not set for the first selected receipt.')\n                                                });\n                                                return;\n                                            }\n\n                                            // Fetch all receipts first to validate supplier, branch, and sub-branch\n                                            const receiptPromises = selected_docs.map(doc => \n                                                new Promise((resolve, reject) => {\n                                                    frappe.call({\n                                                        method: 'frappe.client.get',\n                                                        args: { \n                                                            doctype: 'Purchase Receipt', \n                                                            name: doc.name \n                                                        },\n                                                        callback: function(r) {\n                                                            if (r.message) {\n                                                                resolve(r.message);\n                                                            } else {\n                                                                reject('Failed to fetch receipt');\n                                                            }\n                                                        }\n                                                    });\n                                                })\n                                            );\n\n                                            Promise.all(receiptPromises)\n                                                .then(receipts => {\n                                                    // Validate that all receipts have the same supplier, branch, and sub-branch\n                                                    const mismatchedSupplier = receipts.some(receipt => receipt.supplier !== firstSupplier);\n                                                    const mismatchedBranch = receipts.some(receipt => receipt.custom_branch !== firstBranch);\n                                                    const mismatchedSubBranch = receipts.some(receipt => receipt.custom_sub_branch !== firstSubBranch);\n\n                                                    if (mismatchedSupplier) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because suppliers are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    if (mismatchedBranch) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because branches are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    if (mismatchedSubBranch) {\n                                                        frappe.msgprint({\n                                                            title: __('Error'),\n                                                            indicator: 'red',\n                                                            message: __('Receipts cannot be merged because sub-branches are different.')\n                                                        });\n                                                        return;\n                                                    }\n\n                                                    frappe.call({\n                                                        method: 'frappe.client.get',\n                                                        args: {\n                                                            doctype: 'Purchase Taxes and Charges Template',\n                                                            name: firstTaxesAndCharges\n                                                        },\n                                                        callback: function(tax_template_response) {\n                                                            try {\n                                                                if (!tax_template_response.message) {\n                                                                    throw new Error('Failed to fetch tax template');\n                                                                }\n\n                                                                const tax_template = tax_template_response.message;\n                                                                let consolidatedItems = [];\n                                                                let totalGrandTotal = 0;\n                                                                let totalFreightAmount = 0;\n                                                                let freightCostEntries = [];\n\n                                                                // Process receipts data for consolidated items\n                                                                receipts.forEach(receipt => {\n                                                                    totalGrandTotal += flt(receipt.custom_grand_total || 0);\n                                                                    totalFreightAmount += flt(receipt.custom_freight_amount || 0);\n\n                                                                    freightCostEntries.push({\n                                                                        purchase_receipt: receipt.name,\n                                                                        hsnsac: receipt.custom_freight_hsnsac || \"\",\n                                                                        quantity: flt(receipt.custom_weight_in_kg || 0),\n                                                                        gst_rate: flt(receipt.custom_freight_tax_rate_ || 0),\n                                                                        rate: flt(receipt.custom_rate_per_kg || 0),\n                                                                        total_rate: flt(receipt.custom_freight_amount || 0),\n                                                                        cgst: flt(receipt.custom_cgst_amount || 0),\n                                                                        sgst: flt(receipt.custom_sgst_amount || 0),\n                                                                        igst: flt(receipt.custom_igst_amount || 0),\n                                                                        amount: flt(receipt.custom_total_freight_amount || 0)\n                                                                    });\n\n                                                                    receipt.items.forEach(item => {\n                                                                        const existingItem = consolidatedItems.find(\n                                                                            ci => ci.item_name.toLowerCase() === item.item_name.toLowerCase() && \n                                                                                ci.custom_gstn_value === item.custom_gstn_value\n                                                                        );\n\n                                                                        if (existingItem) {\n                                                                            if (existingItem.uom !== item.uom) {\n                                                                                frappe.throw(__(`UOM mismatch for item ${item.item_code}. Cannot consolidate items with different UOMs.`));\n                                                                            }\n\n                                                                            const newQty = flt(existingItem.qty) + flt(item.qty);\n                                                                            const newAmount = flt(existingItem.amount) + flt(item.amount);\n                                                                            \n                                                                            existingItem.qty = newQty;\n                                                                            existingItem.amount = newAmount;\n                                                                            existingItem.rate = flt(newAmount / newQty);\n                                                                            existingItem.custom_grand_total = flt(existingItem.custom_grand_total || 0) + flt(item.custom_grand_total || 0);\n                                                                            \n                                                                            if (!existingItem.pr_details) existingItem.pr_details = [];\n                                                                            existingItem.pr_details.push({\n                                                                                pr_detail: item.name,\n                                                                                purchase_receipt: receipt.name,\n                                                                                amount: flt(item.amount),\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item\n                                                                            });\n                                                                        } else {\n                                                                            consolidatedItems.push({\n                                                                                item_code: item.item_code,\n                                                                                item_name: item.item_name,\n                                                                                qty: flt(item.qty),\n                                                                                rate: flt(item.rate),\n                                                                                amount: flt(item.amount),\n                                                                                warehouse: item.warehouse,\n                                                                                custom_grand_total: flt(item.custom_grand_total || 0),\n                                                                                custom_gstn_value: item.custom_gstn_value,\n                                                                                uom: item.uom,\n                                                                                stock_uom: item.stock_uom,\n                                                                                conversion_factor: item.conversion_factor,\n                                                                                purchase_receipt: receipt.name,\n                                                                                pr_detail: item.name,\n                                                                                purchase_order: item.purchase_order,\n                                                                                purchase_order_item: item.purchase_order_item,\n                                                                                pr_details: [{\n                                                                                    pr_detail: item.name,\n                                                                                    purchase_receipt: receipt.name,\n                                                                                    amount: flt(item.amount),\n                                                                                    purchase_order: item.purchase_order,\n                                                                                    purchase_order_item: item.purchase_order_item\n                                                                                }]\n                                                                            });\n                                                                        }\n                                                                    });\n                                                                });\n\n                                                                let taxes = [];\n                                                                if (tax_template.taxes) {\n                                                                    taxes = tax_template.taxes.map((tax, idx) => {\n                                                                        let row_id = null;\n                                                                        if (tax.charge_type === 'On Previous Row Amount' || tax.charge_type === 'On Previous Row Total') {\n                                                                            if (tax.row_id && parseInt(tax.row_id) < (idx + 1)) {\n                                                                                row_id = tax.row_id;\n                                                                            } else {\n                                                                                frappe.throw(__(`Invalid row reference in tax row ${idx + 1}`));\n                                                                            }\n                                                                        }\n\n                                                                        return {\n                                                                            account_head: tax.account_head,\n                                                                            charge_type: tax.charge_type,\n                                                                            row_id: row_id,\n                                                                            description: tax.description,\n                                                                            included_in_print_rate: tax.included_in_print_rate || 0,\n                                                                            included_in_paid_amount: tax.included_in_paid_amount || 0,\n                                                                            rate: tax.rate,\n                                                                            account_currency: tax.account_currency,\n                                                                            cost_center: tax.cost_center\n                                                                        };\n                                                                    });\n                                                                }\n\n                                                                const doc = {\n                                                                    doctype: 'Purchase Invoice',\n                                                                    naming_series: naming_series,\n                                                                    custom_fiscal_year: display_fiscal_year,\n                                                                    custom_vendor_code: vendor_code,\n                                                                    supplier: firstSupplier,\n                                                                    custom_vendor: firstVendor,\n                                                                    custom_branch: firstBranch,\n                                                                    custom_sub_branch: firstSubBranch, // Add sub-branch to Purchase Invoice\n                                                                    tax_category: firstTaxCategory,\n                                                                    taxes_and_charges: firstTaxesAndCharges,\n                                                                    taxes: taxes,\n                                                                    items: consolidatedItems,\n                                                                    custom_grand_total: totalGrandTotal,\n                                                                    custom_freight_amount: totalFreightAmount,\n                                                                    update_stock: 0,\n                                                                    is_return: isReturn,\n                                                                    supplier_address: supplier_address,\n                                                                    shipping_address: shipping_address,\n                                                                    billing_address: billing_address,\n                                                                    custom_vendor_address: vendor_address,\n                                                                    custom_freight_cost_data: freightCostEntries\n                                                                };\n\n                                                                console.log('Creating Purchase Invoice with:', doc);\n\n                                                                frappe.call({\n                                                                    method: 'frappe.client.insert',\n                                                                    args: { doc: doc },\n                                                                    callback: function(response) {\n                                                                        if (response.message) {\n                                                                            frappe.msgprint({\n                                                                                title: __('Success'),\n                                                                                indicator: 'green',\n                                                                                message: __('Purchase Invoice created successfully: ') + response.message.name\n                                                                            });\n\n                                                                            // Refresh listview to show updated status\n                                                                            listview.refresh();\n                                                                        } else {\n                                                                            frappe.msgprint({\n                                                                                title: __('Error'),\n                                                                                indicator: 'red',\n                                                                                message: __('Failed to create Purchase Invoice')\n                                                                            });\n                                                                        }\n                                                                    }\n                                                                });\n                                                            } catch (error) {\n                                                                console.error('Error in tax template processing:', error);\n                                                                frappe.msgprint({\n                                                                    title: __('Error'),\n                                                                    indicator: 'red',\n                                                                    message: __('Error in tax template processing: ') + error.message\n                                                                });\n                                                            }\n                                                        }\n                                                    });\n                                                })\n                                                .catch(error => {\n                                                    console.error('Error processing receipts:', error);\n                                                    frappe.msgprint({\n                                                        title: __('Error'),\n                                                        indicator: 'red',\n                                                        message: __('Error processing receipts: ') + error\n                                                    });\n                                                });\n                                        } catch (error) {\n                                            console.error('Error processing first document:', error);\n                                            frappe.msgprint({\n                                                title: __('Error'),\n                                                indicator: 'red',\n                                                message: __('Error processing first document: ') + error.message\n                                            });\n                                        }\n                                    }\n                                });\n                            } catch (error) {\n                                console.error('Error in fiscal year processing:', error);\n                                frappe.msgprint({\n                                    title: __('Error'),\n                                    indicator: 'red',\n                                    message: __('Error in fiscal year processing: ') + error.message\n                                });\n                            }\n                        }\n                    });\n                }\n            } catch (error) {\n                console.error('Error in main function:', error);\n                frappe.msgprint({\n                    title: __('Error'),\n                    indicator: 'red',\n                    message: __('Error in main function: ') + error.message\n                });\n            }\n        });\n    },\n\n    onrender: function(listview) {\n        listview.page.wrapper.find('.list-row-checkbox').removeClass('hide');\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-04-09 14:34:49.293756",
  "module": null,
  "name": "Item Filter",
  "script": "frappe.listview_settings['Item'] = {\n    // Track state to prevent duplicate operations\n    filter_initialized: false,\n    supplier_value: null,\n    \n    onload: function(listview) {\n        // Store reference to listview\n        this.listview = listview;\n        \n        // Exit early for Administrator\n        if (this.isAdministrator()) {\n            console.log(\"User is Administrator, skipping filter\");\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            console.log(\"User doesn't have Supplier, Requisition Approver, or PO Approver role, skipping filter\");\n            return;\n        }\n        \n        // Apply filter once per page load\n        if (!this.filter_initialized) {\n            console.log(\"Initializing supplier filter for restricted user\");\n            this.initializeSupplierFilter();\n        }\n    },\n    \n    isAdministrator: function() {\n        // Check if current user is Administrator\n        return frappe.user_roles.includes('Administrator');\n    },\n    \n    hasSupplierRole: function() {\n        // Check if user has Supplier role\n        return frappe.user_roles.includes('Supplier');\n    },\n    \n    hasApproverRole: function() {\n        // Check if user has either Requisition Approver or PO Approver role\n        return frappe.user_roles.includes('Requisition Approver') || \n               frappe.user_roles.includes('PO Approver');\n    },\n    \n    initializeSupplierFilter: function() {\n        // Mark as initialized to prevent duplicate calls\n        this.filter_initialized = true;\n        \n        var me = this;\n        \n        // Different supplier lookup logic based on role\n        if (this.hasSupplierRole()) {\n            // For Supplier role - Get supplier directly linked to user\n            this.getSupplierFromUser();\n        } else if (this.hasApproverRole()) {\n            // For Approver roles - Get supplier through employee\n            this.getSupplierFromEmployee();\n        }\n    },\n    \n    getSupplierFromUser: function() {\n        var me = this;\n        \n        // Get the supplier linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Supplier',\n                filters: { 'custom_user': frappe.session.user },\n                fieldname: ['name']\n            },\n            callback: function(r) {\n                if (r.message && r.message.name) {\n                    me.supplier_value = r.message.name;\n                    console.log(\"Found supplier for current user:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing items for your supplier account: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to current user\");\n                    frappe.show_alert({\n                        message: __('No supplier is linked to your user account.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    getSupplierFromEmployee: function() {\n        var me = this;\n        \n        // First get the employee linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Employee',\n                filters: { 'user_id': frappe.session.user },\n                fieldname: ['name', 'custom_supplier']\n            },\n            callback: function(r) {\n                if (r.message && r.message.custom_supplier) {\n                    me.supplier_value = r.message.custom_supplier;\n                    console.log(\"Found supplier from employee record:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing items for your associated supplier: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to employee record\");\n                    frappe.show_alert({\n                        message: __('No supplier is associated with your employee record.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    applySupplierFilter: function(supplier) {\n        if (!supplier || !this.listview) return;\n        \n        var me = this;\n        \n        console.log(\"Applying supplier filter to Item list:\", supplier);\n        \n        // Clear existing filters\n        this.listview.filter_area.clear();\n        \n        // Add supplier filter using our custom server-side method\n        this.fetchItemsForSupplier(supplier);\n    },\n    \n    fetchItemsForSupplier: function(supplier) {\n        var me = this;\n        \n        // Use our custom server-side method to get the items\n        frappe.call({\n            method: 'o2o_erpnext.api.item.get_items_for_supplier',\n            args: {\n                supplier: supplier\n            },\n            callback: function(r) {\n                if (r.message && r.message.length > 0) {\n                    console.log(`Found ${r.message.length} items for supplier ${supplier}`);\n                    me.applyItemsFilter(r.message);\n                } else {\n                    console.log(`No items found for supplier ${supplier}`);\n                    me.listview.filter_area.add([\n                        ['Item', 'name', '=', 'NO_ITEMS_FOR_THIS_SUPPLIER']\n                    ]);\n                    \n                    frappe.show_alert({\n                        message: __('No items found for your supplier.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n                \n                me.applyUIRestrictions();\n            }\n        });\n    },\n    \n    applyItemsFilter: function(items) {\n        var me = this;\n        \n        if (!items || !items.length || !this.listview) return;\n        \n        // Apply the \"in\" filter for item codes\n        this.listview.filter_area.add([\n            ['Item', 'name', 'in', items]\n        ]);\n        \n        // Override filter methods to maintain filter\n        this.overrideFilterMethods(items);\n    },\n    \n    overrideFilterMethods: function(items) {\n        var me = this;\n        var supplier = this.supplier_value;\n        \n        // Override the get method to ensure our filter always stays applied\n        var originalGet = this.listview.filter_area.get;\n        \n        this.listview.filter_area.get = function() {\n            var filters = originalGet.apply(this, arguments);\n            \n            // Check if our filter exists (either supplier filter or items filter)\n            var hasItemsFilter = filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'name' && f[2] === 'in' && Array.isArray(f[3])) ||\n                       (f.fieldname === 'name' && f.condition === 'in' && Array.isArray(f.value));\n            });\n            \n            // If not, add it back to the filters array\n            if (!hasItemsFilter && items && items.length) {\n                filters.push(['Item', 'name', 'in', items]);\n            }\n            \n            return filters;\n        };\n        \n        // Override the clear method to prevent complete clearing\n        var originalClear = this.listview.filter_area.clear;\n        \n        this.listview.filter_area.clear = function() {\n            // Call original clear\n            originalClear.apply(this, arguments);\n            \n            // Immediately re-add our filter without triggering refresh\n            if (items && items.length) {\n                this.filters.push({\n                    fieldname: 'name',\n                    label: 'Name',\n                    condition: 'in',\n                    value: items\n                });\n            } else {\n                // Fallback to impossible filter if no items\n                this.filters.push({\n                    fieldname: 'name',\n                    label: 'Name',\n                    condition: '=',\n                    value: 'NO_ITEMS_FOR_THIS_SUPPLIER'\n                });\n            }\n        };\n    },\n    \n    applyUIRestrictions: function() {\n        // Add CSS to restrict UI\n        if (!document.getElementById('item-restriction-style')) {\n            var style = document.createElement('style');\n            style.id = 'item-restriction-style';\n            style.innerHTML = `\n                .filter-selector, .filter-button, .tag-filters-area, .clear-filters { \n                    display: none !important; \n                }\n                .filter-box .filter-area { \n                    pointer-events: none !important; \n                }\n                .filter-tag .remove-filter {\n                    display: none !important;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    },\n    \n    refresh: function(listview) {\n        // Update listview reference\n        this.listview = listview;\n        \n        // Skip for Administrator\n        if (this.isAdministrator()) {\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            return;\n        }\n        \n        // Initialize filter if not already done\n        if (!this.filter_initialized) {\n            this.initializeSupplierFilter();\n            return;\n        }\n        \n        // Re-apply UI restrictions\n        this.applyUIRestrictions();\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Party Specific Item",
  "enabled": 1,
  "modified": "2025-04-05 11:35:36.339508",
  "module": "o2o ErpNext",
  "name": "Party Specific Filter",
  "script": "frappe.listview_settings['Party Specific Item'] = {\n    // Track state to prevent duplicate operations\n    filter_initialized: false,\n    supplier_value: null,\n    \n    onload: function(listview) {\n        // Store reference to listview\n        this.listview = listview;\n        \n        // Exit early for Administrator\n        if (this.isAdministrator()) {\n            console.log(\"User is Administrator, skipping filter\");\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            console.log(\"User doesn't have Supplier, Requisition Approver, or PO Approver role, skipping filter\");\n            return;\n        }\n        \n        // Apply filter once per page load\n        if (!this.filter_initialized) {\n            console.log(\"Initializing supplier filter for restricted user\");\n            this.initializeSupplierFilter();\n        }\n    },\n    \n    isAdministrator: function() {\n        // Check if current user is Administrator\n        return frappe.user_roles.includes('Administrator');\n    },\n    \n    hasSupplierRole: function() {\n        // Check if user has Supplier role\n        return frappe.user_roles.includes('Supplier');\n    },\n    \n    hasApproverRole: function() {\n        // Check if user has either Requisition Approver or PO Approver role\n        return frappe.user_roles.includes('Requisition Approver') || \n               frappe.user_roles.includes('PO Approver');\n    },\n    \n    initializeSupplierFilter: function() {\n        // Mark as initialized to prevent duplicate calls\n        this.filter_initialized = true;\n        \n        var me = this;\n        \n        // Different supplier lookup logic based on role\n        if (this.hasSupplierRole()) {\n            // For Supplier role - Get supplier directly linked to user\n            this.getSupplierFromUser();\n        } else if (this.hasApproverRole()) {\n            // For Approver roles - Get supplier through employee\n            this.getSupplierFromEmployee();\n        }\n    },\n    \n    getSupplierFromUser: function() {\n        var me = this;\n        \n        // Get the supplier linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Supplier',\n                filters: { 'custom_user': frappe.session.user },\n                fieldname: ['name']\n            },\n            callback: function(r) {\n                if (r.message && r.message.name) {\n                    me.supplier_value = r.message.name;\n                    console.log(\"Found supplier for current user:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing party specific items for your supplier account: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to current user\");\n                    frappe.show_alert({\n                        message: __('No supplier is linked to your user account.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    getSupplierFromEmployee: function() {\n        var me = this;\n        \n        // First get the employee linked to the current user\n        frappe.call({\n            method: 'frappe.client.get_value',\n            args: {\n                doctype: 'Employee',\n                filters: { 'user_id': frappe.session.user },\n                fieldname: ['name', 'custom_supplier']\n            },\n            callback: function(r) {\n                if (r.message && r.message.custom_supplier) {\n                    me.supplier_value = r.message.custom_supplier;\n                    console.log(\"Found supplier from employee record:\", me.supplier_value);\n                    \n                    // Apply filter for this supplier\n                    me.applySupplierFilter(me.supplier_value);\n                    \n                    // Show notification\n                    frappe.show_alert({\n                        message: __(`Showing party specific items for your associated supplier: ${me.supplier_value}`),\n                        indicator: 'blue'\n                    }, 5);\n                } else {\n                    console.log(\"No supplier found linked to employee record\");\n                    frappe.show_alert({\n                        message: __('No supplier is associated with your employee record.'),\n                        indicator: 'orange'\n                    }, 5);\n                }\n            }\n        });\n    },\n    \n    applySupplierFilter: function(supplier) {\n        if (!supplier || !this.listview) return;\n        \n        var me = this;\n        \n        console.log(\"Applying supplier filter to Party Specific Item list:\", supplier);\n        \n        // Clear existing filters\n        this.listview.filter_area.clear();\n        \n        // Add supplier filter - Assuming 'party' field contains the supplier\n        // and 'party_type' is 'Supplier'\n        this.listview.filter_area.add([\n            ['Party Specific Item', 'party', '=', supplier],\n            ['Party Specific Item', 'party_type', '=', 'Supplier']\n        ]);\n        \n        // Apply UI restrictions\n        this.applyUIRestrictions();\n        \n        // Override filter methods to maintain filter\n        this.overrideFilterMethods(supplier);\n    },\n    \n    overrideFilterMethods: function(supplier) {\n        var me = this;\n        \n        // Override the get method to ensure our filter always stays applied\n        var originalGet = this.listview.filter_area.get;\n        \n        this.listview.filter_area.get = function() {\n            var filters = originalGet.apply(this, arguments);\n            \n            // Check if our supplier filter exists\n            var hasSupplierFilter = filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'party' && f[3] === supplier) ||\n                       (f.fieldname === 'party' && f.value === supplier);\n            });\n            \n            // Check if our party_type filter exists\n            var hasPartyTypeFilter = filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'party_type' && f[3] === 'Supplier') ||\n                       (f.fieldname === 'party_type' && f.value === 'Supplier');\n            });\n            \n            // If either is missing, add them back\n            if (!hasSupplierFilter) {\n                filters.push(['Party Specific Item', 'party', '=', supplier]);\n            }\n            \n            if (!hasPartyTypeFilter) {\n                filters.push(['Party Specific Item', 'party_type', '=', 'Supplier']);\n            }\n            \n            return filters;\n        };\n        \n        // Override the clear method to prevent complete clearing\n        var originalClear = this.listview.filter_area.clear;\n        \n        this.listview.filter_area.clear = function() {\n            // Call original clear\n            originalClear.apply(this, arguments);\n            \n            // Immediately re-add our filters without triggering refresh\n            this.filters.push({\n                fieldname: 'party',\n                label: 'Party',\n                condition: '=',\n                value: supplier\n            });\n            \n            this.filters.push({\n                fieldname: 'party_type',\n                label: 'Party Type',\n                condition: '=',\n                value: 'Supplier'\n            });\n        };\n    },\n    \n    applyUIRestrictions: function() {\n        // Add CSS to restrict UI\n        if (!document.getElementById('party-specific-item-restriction-style')) {\n            var style = document.createElement('style');\n            style.id = 'party-specific-item-restriction-style';\n            style.innerHTML = `\n                .filter-selector, .filter-button, .tag-filters-area, .clear-filters { \n                    display: none !important; \n                }\n                .filter-box .filter-area { \n                    pointer-events: none !important; \n                }\n                .filter-tag .remove-filter {\n                    display: none !important;\n                }\n            `;\n            document.head.appendChild(style);\n        }\n    },\n    \n    refresh: function(listview) {\n        // Update listview reference\n        this.listview = listview;\n        \n        // Skip for Administrator\n        if (this.isAdministrator()) {\n            return;\n        }\n        \n        // Check for relevant roles\n        const hasRelevantRole = this.hasSupplierRole() || this.hasApproverRole();\n        \n        if (!hasRelevantRole) {\n            return;\n        }\n        \n        // Initialize filter if not already done\n        if (!this.filter_initialized) {\n            this.initializeSupplierFilter();\n            return;\n        }\n        \n        // Re-apply UI restrictions\n        this.applyUIRestrictions();\n        \n        // Check if we need to re-apply filter\n        if (this.supplier_value) {\n            var current_filters = listview.filter_area.get();\n            \n            // Check if our supplier filter exists\n            var hasSupplierFilter = current_filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'party' && f[3] === this.supplier_value) ||\n                       (f.fieldname === 'party' && f.value === this.supplier_value);\n            }, this);\n            \n            // Check if our party_type filter exists\n            var hasPartyTypeFilter = current_filters.some(function(f) {\n                return (Array.isArray(f) && f[1] === 'party_type' && f[3] === 'Supplier') ||\n                       (f.fieldname === 'party_type' && f.value === 'Supplier');\n            }, this);\n            \n            // Re-apply if either filter is missing\n            if (!hasSupplierFilter || !hasPartyTypeFilter) {\n                console.log(\"Re-applying supplier filters\");\n                \n                // Clear and re-add both filters to ensure correct order\n                this.listview.filter_area.clear();\n                \n                this.listview.filter_area.add([\n                    ['Party Specific Item', 'party', '=', this.supplier_value],\n                    ['Party Specific Item', 'party_type', '=', 'Supplier']\n                ]);\n            }\n        }\n    }\n};",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Party Specific Item",
  "enabled": 1,
  "modified": "2025-04-09 14:52:00.974914",
  "module": null,
  "name": "Party Specific Item Supplier Update",
  "script": "frappe.ui.form.on('Party Specific Item', {\n    refresh: function(frm) {\n        // Set default party type to Supplier\n        if(frm.is_new()) {\n            frm.set_value('party_type', 'Supplier');\n        }\n        \n        // Add custom button to update supplier access\n        frm.add_custom_button(__('Update Supplier Access List'), function() {\n            // Show appropriate confirmation message based on restriction type\n            let confirmation_message = 'This will add the supplier to the access list. Continue?';\n            \n            if(frm.doc.restrict_based_on === 'Item Group') {\n                confirmation_message = 'This will add the supplier to the access list for ALL items in this group. This may take some time. Continue?';\n            } else if(frm.doc.restrict_based_on === 'Brand') {\n                confirmation_message = 'This will add the supplier to the access list for ALL items with this brand. This may take some time. Continue?';\n            }\n            \n            frappe.confirm(\n                confirmation_message,\n                function() {\n                    // User clicked Yes\n                    update_supplier_access(frm);\n                },\n                function() {\n                    // User clicked No\n                    // Do nothing\n                }\n            );\n        });\n    },\n    \n    // Always force party_type to be Supplier\n    party_type: function(frm) {\n        if(frm.doc.party_type !== 'Supplier') {\n            frm.set_value('party_type', 'Supplier');\n            frappe.show_alert({\n                message: __('Party Type is always set to Supplier'),\n                indicator: 'orange'\n            }, 5);\n        }\n    },\n    \n    // Add before_save event to call our function automatically\n    before_save: function(frm) {\n        // Set party_type to 'Supplier' before saving (just to be sure)\n        frm.doc.party_type = 'Supplier';\n        \n        // If the document has the right criteria, flag it for update after save\n        if(frm.doc.restrict_based_on && frm.doc.party && frm.doc.based_on_value) {\n            frm._update_supplier_after_save = true;\n        }\n    },\n    \n    after_save: function(frm) {\n        // Check if we flagged this document to update supplier access\n        if(frm._update_supplier_after_save) {\n            // Reset the flag\n            frm._update_supplier_after_save = false;\n            \n            // Call our function\n            update_supplier_access(frm);\n        }\n    }\n});\n\n// Function to call the server script\nfunction update_supplier_access(frm) {\n    if(!frm.doc.restrict_based_on) {\n        frappe.msgprint(__(\"Please select a restriction type\"));\n        return;\n    }\n    \n    if(!frm.doc.party || !frm.doc.based_on_value) {\n        frappe.msgprint(__(\"Both Supplier and restriction value must be selected\"));\n        return;\n    }\n    \n    // Show appropriate progress indicator\n    let message = 'Updating supplier access list...';\n    if(frm.doc.restrict_based_on === 'Item Group' || frm.doc.restrict_based_on === 'Brand') {\n        message = 'Updating supplier access list for multiple items. This may take some time...';\n    }\n    \n    frappe.show_alert({\n        message: __(message),\n        indicator: 'blue'\n    }, 5);\n    \n    // Call the API method\n    frappe.call({\n        method: 'o2o_erpnext.api.party_specific_item.update_supplier_access',\n        args: {\n            'party_specific_item_name': frm.doc.name\n        },\n        callback: function(r) {\n            if(r.message && r.message.success) {\n                let message = 'Supplier access updated successfully';\n                if(r.message.updated > 0 || r.message.skipped > 0) {\n                    message = `Supplier access updated for ${r.message.updated} items. ${r.message.skipped} items already had access.`;\n                }\n                \n                frappe.show_alert({\n                    message: __(message),\n                    indicator: 'green'\n                }, 5);\n            } else {\n                frappe.show_alert({\n                    message: __('Error updating supplier access'),\n                    indicator: 'red'\n                }, 5);\n            }\n        }\n    });\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2025-04-12 08:48:01.269068",
  "module": "o2o ErpNext",
  "name": "Employee Bulk User Create",
  "script": "// Custom script for Employee List view to add bulk user creation functionality\nfrappe.listview_settings['Employee'] = frappe.listview_settings['Employee'] || {};\n\n// Extend the existing list view settings\nObject.assign(frappe.listview_settings['Employee'], {\n    onload: function(listview) {\n        // Add a custom button after the list is rendered\n        let create_users_button = $(`<button class=\"btn btn-secondary btn-sm create-users-btn\">\n            ${__('Create Users')}\n        </button>`).hide();\n        \n        // Add the button to the page\n        listview.page.custom_actions.append(create_users_button);\n        \n        // Handle button click\n        create_users_button.on('click', function() {\n            const selected_docs = listview.get_checked_items();\n            \n            // Check if any employees are selected\n            if (selected_docs.length === 0) {\n                frappe.throw(__('Please select at least one Employee'));\n                return;\n            }\n            \n            // Debug: log selected docs to see what data we have\n            console.log(\"Selected employees:\", selected_docs);\n            \n            // Get complete employee info for each selected doc\n            const valid_employees = [];\n            const invalid_employees = [];\n            let processed = 0;\n            \n            // Show a message that we're validating\n            frappe.show_alert({\n                message: __('Validating selected employees...'),\n                indicator: 'blue'\n            }, 3);\n            \n            selected_docs.forEach(doc => {\n                frappe.db.get_doc('Employee', doc.name)\n                    .then(employee_doc => {\n                        // Debug employee data\n                        console.log(`Employee ${doc.name} data:`, employee_doc);\n                        \n                        // Check if employee already has a user\n                        if (employee_doc.user_id) {\n                            invalid_employees.push({\n                                name: employee_doc.name,\n                                reason: __('Already has a linked user')\n                            });\n                        } \n                        // Check if employee has custom_user_email\n                        else if (!employee_doc.custom_user_email) {\n                            invalid_employees.push({\n                                name: employee_doc.name,\n                                reason: __('Missing Custom User Email')\n                            });\n                        } \n                        // Valid employee for user creation\n                        else {\n                            valid_employees.push(employee_doc);\n                        }\n                        \n                        // Update progress\n                        processed++;\n                        \n                        // When all are processed, show results\n                        if (processed === selected_docs.length) {\n                            process_validation_results();\n                        }\n                    })\n                    .catch(err => {\n                        console.error(`Error fetching employee ${doc.name}:`, err);\n                        invalid_employees.push({\n                            name: doc.name,\n                            reason: __('Error fetching employee data')\n                        });\n                        \n                        // Update progress\n                        processed++;\n                        \n                        // When all are processed, show results\n                        if (processed === selected_docs.length) {\n                            process_validation_results();\n                        }\n                    });\n            });\n            \n            function process_validation_results() {\n                // Show warning if there are invalid employees\n                if (invalid_employees.length > 0) {\n                    let message = __('The following employees cannot have users created:') + '<br><br><table class=\"table table-bordered\">';\n                    message += '<tr><th>' + __('Employee ID') + '</th><th>' + __('Reason') + '</th></tr>';\n                    \n                    invalid_employees.forEach(emp => {\n                        message += `<tr><td>${emp.name}</td><td>${emp.reason}</td></tr>`;\n                    });\n                    \n                    message += '</table><br>';\n                    message += valid_employees.length > 0 ? \n                        __('Do you want to continue creating users for the remaining {0} employees?', [valid_employees.length]) : \n                        __('No valid employees found for user creation.');\n                    \n                    if (valid_employees.length === 0) {\n                        frappe.msgprint(message);\n                        return;\n                    }\n                    \n                    frappe.confirm(message, function() {\n                        // User clicked Yes, proceed with creating users for valid employees\n                        show_password_dialog(valid_employees, listview);\n                    });\n                } else {\n                    // All selected employees are valid\n                    show_password_dialog(valid_employees, listview);\n                }\n            }\n        });\n        \n        // Function to check selection and show/hide button\n        function update_button_visibility() {\n            const any_checked = listview.get_checked_items().length > 0;\n            any_checked ? create_users_button.show() : create_users_button.hide();\n        }\n        \n        // Setup initial checkbox listeners\n        listview.$page.on('change', 'input[type=\"checkbox\"]', update_button_visibility);\n    },\n    \n    refresh: function(listview) {\n        // Re-check for selected items after refresh\n        setTimeout(function() {\n            const any_checked = listview.get_checked_items().length > 0;\n            const create_users_button = listview.page.custom_actions.find('.create-users-btn');\n            if (create_users_button.length) {\n                any_checked ? create_users_button.show() : create_users_button.hide();\n            }\n        }, 100);\n    }\n});\n\n// Function to show password dialog\nfunction show_password_dialog(employees, listview) {\n    // Create a dialog to ask for password options\n    let d = new frappe.ui.Dialog({\n        title: __('Create Users for {0} Employees', [employees.length]),\n        fields: [\n            {\n                label: __('Set Custom Password'),\n                fieldname: 'set_password',\n                fieldtype: 'Check',\n                default: 0,\n                description: __('If unchecked, default password \"admin@123\" will be used for all users')\n            },\n            {\n                label: __('Password'),\n                fieldname: 'password',\n                fieldtype: 'Password',\n                depends_on: 'set_password'\n            },\n            {\n                label: __('Confirm Password'),\n                fieldname: 'confirm_password',\n                fieldtype: 'Password',\n                depends_on: 'set_password'\n            }\n        ],\n        primary_action_label: __('Create Users'),\n        primary_action: function(values) {\n            if (values.set_password) {\n                // Validate password\n                if (!values.password) {\n                    frappe.throw(__(\"Please enter password\"));\n                    return;\n                }\n                if (values.password != values.confirm_password) {\n                    frappe.throw(__(\"Passwords do not match\"));\n                    return;\n                }\n                if (values.password.length < 8) {\n                    frappe.throw(__(\"Password must be at least 8 characters long\"));\n                    return;\n                }\n            }\n            \n            d.hide();\n            create_users_for_employees(employees, values.set_password ? values.password : null, listview);\n        }\n    });\n    \n    d.show();\n}\n\n// Function to create users for multiple employees\nfunction create_users_for_employees(employees, password, listview) {\n    // Show a progress indicator\n    const total = employees.length;\n    let completed = 0;\n    let succeeded = 0;\n    let failed = 0;\n    let error_messages = [];\n    \n    frappe.show_progress(__('Creating Users'), completed, total);\n    \n    // Process each employee sequentially\n    function process_next_employee() {\n        if (completed >= total) {\n            // All employees processed\n            frappe.hide_progress();\n            \n            // Show completion message\n            let message = __('User creation complete: {0} succeeded, {1} failed', [succeeded, failed]);\n            if (failed > 0) {\n                message += '<br><br>' + __('Errors:') + '<br>';\n                error_messages.forEach(err => {\n                    message += '<div class=\"text-danger\">' + err + '</div>';\n                });\n            }\n            \n            frappe.msgprint(message);\n            \n            // Refresh the list view\n            listview.refresh();\n            return;\n        }\n        \n        const employee = employees[completed];\n        \n        // Call the server-side method to create a user\n        frappe.call({\n            method: \"o2o_erpnext.api.employee.create_user\",\n            args: {\n                employee: employee.name,\n                email: employee.custom_user_email,\n                password: password\n            },\n            callback: function(r) {\n                completed++;\n                \n                if (!r.exc) {\n                    succeeded++;\n                } else {\n                    failed++;\n                    error_messages.push(`<b>${employee.name}</b>: ${r._server_messages || \"Unknown error\"}`);\n                }\n                \n                frappe.show_progress(__('Creating Users'), completed, total);\n                \n                // Process the next employee\n                process_next_employee();\n            }\n        });\n    }\n    \n    // Start processing\n    process_next_employee();\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 1,
  "modified": "2025-05-17 15:01:27.773470",
  "module": "o2o ErpNext",
  "name": "Copy Items",
  "script": "frappe.ui.form.on('Purchase Order', {\n    validate: function(frm) {\n        console.log(frm.doc.name)\n        if (frappe.user_roles.includes(\"Person Raising Request\")) {\n            frm.clear_table('custom_purchasing_details_original');\n\n            if (frm.doc.items && frm.doc.items.length > 0) {\n                frm.doc.items.forEach(function(item) {\n                    const original_item = frm.add_child('custom_purchasing_details_original');\n\n                    // Custom field mapping\n                    // original_item.product_name = item.item_name;\n                    original_item.date = item.schedule_date;\n                    original_item.po_no = frm.doc.name;\n\n                    original_item.quantity = item.qty;\n                    original_item.item_code=item.item_code;\n                    original_item.item_name = item.item_name;\n                    original_item.amount = item.amount || (item.qty * item.rate);\n                });\n\n                frm.refresh_field('custom_purchasing_details_original');\n\n                frappe.show_alert({\n                    message: __('Original items snapshot updated'),\n                    indicator: 'green'\n                }, 3);\n            }\n            \n            \n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Invoice",
  "enabled": 1,
  "modified": "2025-05-15 15:44:19.811934",
  "module": "o2o ErpNext",
  "name": "Change debit note label",
  "script": "frappe.ui.form.on('Purchase Invoice', {\n    refresh: function(frm) {\n        console.log(\"====++++++++++++++++++++++++++++++\")\n       \n        setTimeout(() => {\n            \n            $('.dropdown-menu a.dropdown-item').each(function() {\n                if ($(this).text().trim() === \"Return / Debit Note\") {\n                    $(this).text(\"Return / Credit Note\");\n                }\n            });\n        }, 300); \n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Purchase Order",
  "enabled": 0,
  "modified": "2025-05-16 14:00:17.122435",
  "module": "o2o ErpNext",
  "name": "Copy table 1",
  "script": "frappe.ui.form.on('Purchase Order', {\n    items: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];  // Get the changed row\n        console.log(\"Custom Artwork Number Selected:\", row.custom_artwork_number);\n\n        new_row = frm.add_child(\"custom_purchasing_details_original\")\n        new_row.product_name = row.item_code\n\n        frm.refresh_field(\"custom_purchasing_details_original\");\n    }\n});",
  "view": "Form"
 }
]