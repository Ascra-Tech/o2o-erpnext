[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-16 14:17:43.398982",
  "module": "o2o ErpNext",
  "name": "copy  table",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "def map_items_to_original(doc, method):\n    doc.custom_purchasing_details_original = []  # Clear existing rows\n\n    for item in doc.items:\n        doc.append(\"custom_purchasing_details_original\", {\n            \"product_name\": item.item_name,\n            \"date\": item.schedule_date,\n            \"po_no\": doc.name,\n            \"quantity\": item.qty,\n            \"amount\": item.amount or (item.qty * item.rate)\n        })\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-17 13:46:10.526013",
  "module": "o2o ErpNext",
  "name": "p&l dash",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "total_profit_losts = 0\ntotal_purchase_cost = 0\nfor item in doc.items :\n    # frappe.throw(str(item.item.custom_gstn_value));\n    item_purchase_cost = float(item.custom_valuation_rate or 0) * float(item.qty or 0)\n    total_purchase_cost = float(total_purchase_cost) + float(item_purchase_cost)\n    \n    \n    total_profit_losts = float(doc.total) - float(total_purchase_cost)\n    # frappe.throw(str(total_profit_losts));\n    doc.custom_total_pl = total_profit_losts\n    doc.custom_total_purchase_cost = total_purchase_cost",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-20 08:01:41.734063",
  "module": null,
  "name": "Approved-Update-Create-At",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# doc.custom_updated_at = frappe.utils.now()\n# doc.custom_created_at = frappe.utils.now()\n# doc.custom__approved_at = frappe.utils.now()\n\n\nif doc.workflow_state == \"PO Approved\" and not doc.custom__approved_at:\n    doc.custom__approved_at = frappe.utils.now_datetime()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 18:42:13.496158",
  "module": null,
  "name": "Supplier Master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Supplier",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 18:32:21.155753",
  "module": null,
  "name": "Role Profile Master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Role Profile",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 19:41:41.675453",
  "module": null,
  "name": "Item Group Master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Group",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 19:59:20.904954",
  "module": null,
  "name": "Item Master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 20:16:30.454697",
  "module": null,
  "name": "Branch",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Branch",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-03 20:27:04.803213",
  "module": null,
  "name": "Bank Master",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Bank",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-10 16:19:00.832435",
  "module": "o2o ErpNext",
  "name": "Server_side_script_gstn_value",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "for item in doc.items:\n    # Example GST rates; adjust according to your needs\n    gst_rate = item.gst_rate or 0\n    item_amount = item.amount or 0\n\n    # Define IGST, SGST, and CGST rates\n    # For simplicity, assuming GST is split equally between IGST, SGST, and CGST\n    igst_rate = 0  # Replace with actual IGST rate if needed\n    sgst_rate = gst_rate / 2  # Adjust SGST rate if needed\n    cgst_rate = gst_rate / 2  # Adjust CGST rate if needed\n\n    # Calculate GST amounts\n    igst_amount = (item_amount * igst_rate / 100) if igst_rate else 0\n    sgst_amount = (item_amount * sgst_rate / 100) if sgst_rate else 0\n    cgst_amount = (item_amount * cgst_rate / 100) if cgst_rate else 0\n\n    # Store GST amounts in custom fields\n    # item.igst_amount = igst_amount\n    # item.sgst_amount = sgst_amount\n    # item.cgst_amount = cgst_amount\n    doc.custom_gstn_value = igst_amount + sgst_amount + cgst_amount\n    frappe.throw(\"ok\");\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-12-12 20:10:32.305607",
  "module": null,
  "name": "Item Tax Template",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Item Tax Template",
  "script": "doc.custom_updated_at = frappe.utils.now()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_purchase_receipt_for_po",
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-26 10:16:56.398686",
  "module": null,
  "name": "PR Print Button",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "# DocType: Purchase Order\n# Script Type: DocType\n# DocType Event: None\n\n@frappe.whitelist()\ndef get_linked_pr(self):\n    pr = frappe.db.sql(\"\"\"\n        SELECT DISTINCT parent \n        FROM `tabPurchase Receipt Item` pri\n        JOIN `tabPurchase Receipt` pr ON pri.parent = pr.name\n        WHERE pri.purchase_order = %s\n        AND pr.docstatus = 1\n        LIMIT 1\n    \"\"\", (self.name), as_dict=1)\n    \n    return pr[0].parent if pr else None",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": "get_linked_purchase_receipts",
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-11-06 14:34:25.915772",
  "module": null,
  "name": "Get Linked Purchase Receipts",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": null,
  "script": "{\n    \"doctype\": \"Server Script\",\n    \"name\": \"get_linked_purchase_receipts\",\n    \"script_type\": \"API\",\n    \"api_method\": \"get_linked_purchase_receipts\",\n    \"allow_guest\": 0,\n    \"enabled\": 1,\n    \"script\": \"\"\"\nimport frappe\nimport json\n\n@frappe.whitelist()\ndef execute(purchase_order):\n    try:\n        # Debug: Log the incoming PO number\n        frappe.logger().debug(f\"Searching for PO: {purchase_order}\")\n        \n        # Check if PO exists\n        if not frappe.db.exists('Purchase Order', purchase_order):\n            return {\n                'status': 'error',\n                'message': f'Purchase Order {purchase_order} does not exist'\n            }\n            \n        # Direct SQL query for debugging\n        sql_query = '''\n            SELECT \n                pri.parent as pr_name,\n                pri.purchase_order,\n                pri.docstatus,\n                pri.name as item_name,\n                pri.item_code,\n                pr.posting_date,\n                pr.docstatus as pr_docstatus\n            FROM \n                `tabPurchase Receipt Item` pri\n            LEFT JOIN \n                `tabPurchase Receipt` pr ON pri.parent = pr.name\n            WHERE \n                pri.purchase_order = %s\n        '''\n        \n        results = frappe.db.sql(sql_query, purchase_order, as_dict=1)\n        \n        # Debug: Log what we found\n        frappe.logger().debug(f\"SQL Query Results: {json.dumps(results, default=str)}\")\n        \n        # Filter for submitted documents\n        valid_receipts = []\n        for r in results:\n            if r.get('pr_docstatus') == 1:  # Only submitted documents\n                valid_receipts.append({\n                    'name': r.pr_name,\n                    'posting_date': r.posting_date,\n                    'purchase_order': r.purchase_order,\n                    'item_code': r.item_code\n                })\n        \n        # Also check direct child table records\n        child_records = frappe.get_all('Purchase Receipt Item',\n            filters={'purchase_order': purchase_order},\n            fields=['parent', 'purchase_order', 'name', 'item_code']\n        )\n        \n        frappe.logger().debug(f\"Child Table Records: {json.dumps(child_records, default=str)}\")\n        \n        return {\n            'status': 'success',\n            'message': valid_receipts,\n            'debug': {\n                'raw_results': results,\n                'child_records': child_records\n            }\n        }\n        \n    except Exception as e:\n        frappe.log_error(f\"Error in get_linked_purchase_receipts: {str(e)}\")\n        return {\n            'status': 'error',\n            'message': str(e)\n        }\n\"\"\"\n}",
  "script_type": "API"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.726234",
  "module": "o2o ErpNext",
  "name": "Purchase order validations",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "\ncustom_minimum_order_value = \"\"\ncustom_maximum_order_value = \"\"\nsuppliers = frappe.get_all('Supplier', filters={'supplier_name': doc.supplier},fields=['custom_minimum_order_value', 'custom_maximum_order_value', 'custom_budget_start_date', 'custom_budget_end_date','custom_capex_budget','custom_opex_budget'])    \nsub_branch = frappe.get_all('Branch', filters={'branch': doc.custom_branch},fields=['custom_child_branch','custom_parent_branch','custom_minimum_order_value', 'custom_maximum_order_value','custom_capex_budget','custom_opex_budget'])\n\n\nbranch_capex_opex = frappe.get_all('Branch', filters={'custom_branch_code': sub_branch[0]['custom_parent_branch']},fields=['custom_parent_branch','custom_minimum_order_value', 'custom_maximum_order_value','custom_capex_budget','custom_opex_budget'])\nfrappe.msgprint(f\"Supplier found: {branch_capex_opex}\")\n\nitem_values = {}\nfor item in doc.items:\n  item_create = {}\n  item_code = item.item_code or 0\n  item_details = frappe.get_all('Item', filters={'item_code': item_code},fields=['custom_product_type'])\n  item_create['capex_opex'] = item_details[0]['custom_product_type']\n  item_create['item_code'] = item_code\n  if item_code in item_values:\n    item_create['total_value'] = item_values[item_code]['total_value'] + float(item.amount or 0)\n  else :\n    item_create['total_value'] = float(item.amount or 0)\n    \n  item_values[item_code] = item_create\n  \n\n\nif sub_branch[0]['custom_child_branch'] == 1 :\n    if sub_branch[0]['custom_minimum_order_value'] is not None :\n        custom_minimum_order_value = sub_branch[0]['custom_minimum_order_value']\n        custom_maximum_order_value = sub_branch[0]['custom_maximum_order_value']\n# frappe.msgprint(f\"Supplier found: {sub_branch[0]}\")\n# frappe.throw(\"from--- \"+str(sub_branch[0]['custom_minimum_order_value'])+\"  to \"+ str(custom_maximum_order_value) + \"  \"+ sub_branch[0]['custom_parent_branch'])\nif custom_minimum_order_value == \"\" :\n    branch = frappe.get_all('Branch', filters={'custom_branch_code': sub_branch[0]['custom_parent_branch']},fields=['custom_parent_branch','custom_minimum_order_value', 'custom_maximum_order_value'])\n    # frappe.throw(sub_branch[0]['custom_parent_branch'])\n    if branch[0]['custom_minimum_order_value'] is not None :\n        custom_minimum_order_value = branch[0]['custom_minimum_order_value']\n        custom_maximum_order_value = branch[0]['custom_maximum_order_value']\n\n\n    \n# frappe.throw(\"from \"+str(custom_minimum_order_value)+\"  to \"+ str(custom_maximum_order_value))\nif custom_minimum_order_value == \"\" and custom_maximum_order_value == \"\" :\n    custom_minimum_order_value = suppliers[0]['custom_minimum_order_value']\n    custom_maximum_order_value = suppliers[0]['custom_maximum_order_value']\n\n#frappe.throw(\"from \"+str(custom_minimum_order_value)+\"  to \"+ str(custom_maximum_order_value))        \n# frappe.msgprint(f\"Supplier found: {suppliers[0]}\")\ntoday_date = frappe.utils.today()\nget_only_dd = frappe.utils.formatdate(today_date, ('d'))\n\nif float(custom_minimum_order_value) > doc.total :\n    frappe.throw(\"Order value should be greater than \" + str(custom_minimum_order_value) + \" and less than \" +  str(custom_maximum_order_value))\nelif float(custom_maximum_order_value) < doc.total :\n    frappe.throw(\"Order value should be greater than \" + str(custom_minimum_order_value) + \" and less than \" +  str(custom_maximum_order_value))\nelif suppliers[0]['custom_budget_start_date'] > int(get_only_dd) : \n    frappe.throw(\"Order Date should be greater than \" + str(suppliers[0]['custom_budget_start_date']) + \" and less than \" +  str(suppliers[0]['custom_budget_end_date']))\nelif suppliers[0]['custom_budget_end_date'] < int(get_only_dd) : \n    frappe.throw(\"Order Date should be greater than \" + str(suppliers[0]['custom_budget_start_date']) + \" and less than \" +  str(suppliers[0]['custom_budget_end_date']))\n\ncapex_opex_error_message = \"\"\n# frappe.throw(branch_capex_opex[0]['custom_opex_budget'])\nfor item_code,item_value_detail in item_values.items():\n    if(item_value_detail['capex_opex']==\"Opex\") :\n        frappe.throw(branch_capex_opex[0]['custom_opex_budget'])\n        if(item_value_detail['total_value'] < branch_capex_opex[0]['custom_opex_budget']) :\n            frappe.throw(branch_capex_opex[0]['custom_opex_budget'])\n            if(item_value_detail['total_value'] < sub_branch[0]['custom_opex_budget']) :\n                if(item_value_detail['total_value'] < suppliers[0]['custom_opex_budget']) :\n                    capex_opex_error_message += item_value_detail.item_code + \"Opex is allowed <= \"+suppliers[0]['custom_opex_budget']\n    elif(item_value_detail['capex_opex']==\"Capex\") :\n        if(item_value_detail['total_value'] < branch_capex_opex[0]['custom_capex_budget']) :\n            if(item_value_detail['total_value'] < sub_branch[0]['custom_capex_budget']) :\n                if(item_value_detail['total_value'] < suppliers[0]['custom_capex_budget']) :\n                    capex_opex_error_message += item_value_detail.item_code + \"Opex is allowed <= \"+suppliers[0]['custom_capex_budget']    \n    \nif capex_opex_error_message !=\"\" :\n    frappe.throw(capex_opex_error_message)\n#backup code\n# if not suppliers :\n#     frappe.throw(\"supplier is not found\")\n# elif suppliers[0]['custom_minimum_order_value'] > doc.total :\n#     frappe.throw(\"Order value should be greater than \" + str(suppliers[0]['custom_minimum_order_value']) + \" and less than \" +  str(suppliers[0]['custom_maximum_order_value']))\n# elif suppliers[0]['custom_maximum_order_value'] < doc.total :\n#     frappe.throw(\"Order value should be greater than \" + str(suppliers[0]['custom_minimum_order_value']) + \" and less than \" +  str(suppliers[0]['custom_maximum_order_value']))\n# elif suppliers[0]['custom_budget_start_date'] > int(get_only_dd) : \n#     frappe.throw(\"Order Date should be greater than \" + str(suppliers[0]['custom_budget_start_date']) + \" and less than \" +  str(suppliers[0]['custom_budget_end_date']))\n# elif suppliers[0]['custom_budget_end_date'] < int(get_only_dd) : \n#     frappe.throw(\"Order Date should be greater than \" + str(suppliers[0]['custom_budget_start_date']) + \" and less than \" +  str(suppliers[0]['custom_budget_end_date']))",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-12 17:52:30.592270",
  "module": "o2o ErpNext",
  "name": "Purchase Order GST Value and Grand Total Calculation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "def calculate_gst_amounts(doc, method):\n    for item in doc.items:\n        # Example GST rates; adjust according to your needs\n        gst_rate = item.gst_rate or 0\n        item_amount = item.amount or 0\n\n        # Define IGST, SGST, and CGST rates\n        # For simplicity, assuming GST is split equally between IGST, SGST, and CGST\n        igst_rate = 0  # Replace with actual IGST rate if needed\n        sgst_rate = gst_rate / 2  # Adjust SGST rate if needed\n        cgst_rate = gst_rate / 2  # Adjust CGST rate if needed\n\n        # Calculate GST amounts\n        igst_amount = (item_amount * igst_rate / 100) if igst_rate else 0\n        sgst_amount = (item_amount * sgst_rate / 100) if sgst_rate else 0\n        cgst_amount = (item_amount * cgst_rate / 100) if cgst_rate else 0\n\n        # Store GST amounts in custom fields\n        # item.igst_amount = igst_amount\n        # item.sgst_amount = sgst_amount\n        # item.cgst_amount = cgst_amount\n        doc.custom_gstn_value = igst_amount + sgst_amount + cgst_amount\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Validate",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.864766",
  "module": "o2o ErpNext",
  "name": "Purchase Order Naming Series",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "doc.supplier_code = doc.supplier[:3].upper()\n# frappe.msgprint(doc.supplier_code)\n# supplier = doc.supplier\n# count = frappe.db.get_value(\"Custom Counter\", {\"supplier\": supplier}, \"count\") or 0\n# new_count = count + 1\n\n# if new_count == 1 :\n#     new_record = {\n#         \"doctype\": \"Custom Counter\",\n#         \"supplier\": supplier,\n#         \"count\": 1\n#     }\n#     frappe.get_doc(new_record).insert(ignore_permissions=True)\n# else :\n#     frappe.db.set_value(\"Custom Counter\", {\"supplier\": supplier}, \"count\", new_count)\n\n# formatted_date  = frappe.db.sql(\"SELECT DATE_FORMAT(NOW(), '%d%m%Y')\", as_dict=False)[0][0]\n\n# if supplier:\n#     # entity_count = get_next_entity_count(supplier)\n#     formatted_count = f\"{new_count:03d}\"  # Format count as 3 digits\n#     # formatted_date = get_formatted_date()\n    \n#     # Construct the custom purchase order number\n#     supplier_code = supplier.upper();\n#     doc.name = f\"{supplier_code[:3]}{formatted_count}{formatted_date}\"\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.873883",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt Naming Series",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "supplier = doc.supplier\nvendor = doc.custom_vendor\n\ncount = frappe.db.get_value(\"Purchase Receipt Custom Counter\", {\"supplier\": supplier,\"vendor\":vendor}, \"counter\") or 0\n\n# if count is None :\n#     count = 0\nnew_count = count + 1\n\nif new_count == 1 :\n    # Insert a new record\n    new_record = {\n        \"doctype\": \"Purchase Receipt Custom Counter\",\n        \"supplier\": supplier,\n        \"vendor\": vendor,\n        \"counter\": \"1\"\n    }\n    frappe.get_doc(new_record).insert(ignore_permissions=True)\nelse :    \n    frappe.db.set_value(\"Purchase Receipt Custom Counter\", {\"supplier\": supplier,\"vendor\": vendor}, \"counter\", new_count)\n\n\n\n\nfrappe.db.set_value(\"Purchase Receipt Custom Counter\", {\"supplier\": supplier,\"vendor\": vendor}, \"counter\", new_count)\n\nif supplier:\n    supplier_code =  supplier[:3].upper()\n    vendor_code = vendor[:3].upper()\n    formatted_count = f\"{new_count:03d}\"  \n    # Construct the custom purchase order number\n    doc.name = f\"{vendor_code}/{supplier_code}/{formatted_count}\"\n    \n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.835138",
  "module": "o2o ErpNext",
  "name": "Purchase Order Order Code",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "\nif doc.docstatus == 0 :\n    custom_order_code = doc.custom_order_code\n    temp_custom_order_code = custom_order_code[:8]\n    count = frappe.db.get_value(\"Purchase Order Counter Custom Order Code\", {\"static_code\": temp_custom_order_code}, \"count\") or 0\n    new_count = int(count) + int(1)\n    \n    if new_count == 1 :\n        new_record = {\n            \"doctype\": \"Purchase Order Counter Custom Order Code\",\n            \"static_code\": temp_custom_order_code,\n            \"count\": \"1\"\n        }\n        frappe.get_doc(new_record).insert(ignore_permissions=True)\n    else :\n        frappe.db.set_value(\"Purchase Order Counter Custom Order Code\", {\"static_code\": temp_custom_order_code}, \"count\", str(new_count))\n    \n    # frappe.throw(str(new_count))\n    custom_ord_code = \"%s%d\" % (custom_order_code, new_count)\n    # frappe.throw(custom_ord_code);\n    doc.custom_order_code = str(custom_ord_code)\n\n\n\n\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.825094",
  "module": "o2o ErpNext",
  "name": "Purchase Receipt Frieght Calculation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Receipt",
  "script": "    \nlog_message = \"Purchase Receipt Taxes and Charges:\\n\"\n\n# Iterate through the purchase_taxes_and_charges\nfor tax in doc.purchase_taxes_and_charges:\n    log_message += f\"Tax Category: {tax.get('category')}, Tax Rate: {tax.get('rate')}, Tax Amount: {tax.get('tax_amount')}\\n\"\n\n# Log the message\nfrappe.msgprint(log_message)\nfrappe.log_error(log_message, \"Purchase Receipt Taxes and Charges Details\")\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-12 17:52:38.771872",
  "module": "o2o ErpNext",
  "name": "Purchase_order_profit_and_lost",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "total_profit_losts = 0\ntotal_purchase_cost = 0\nfor item in doc.items :\n    # frappe.throw(str(item.item.custom_gstn_value));\n    item_purchase_cost = float(item.last_purchase_rate or 0) * float(item.qty or 0)\n    total_purchase_cost = float(total_purchase_cost) + float(item_purchase_cost)\n    \n    \n    total_profit_losts = float(doc.grand_total) - float(total_purchase_cost)\n    # frappe.throw(str(total_profit_losts));\n    doc.custom_total_pl = total_profit_losts\n    doc.custom_total_purchase_cost = total_purchase_cost\n    \n    \n\n    \n\n    \n\n\n    \n        # Example GST rates; adjust according to your needs\n        # gst_rate = item.gst_rate or 0\n        # item_amount = item.amount or 0\n        # igst_rate = 0  # Replace with actual IGST rate if needed\n        # sgst_rate = gst_rate / 2  # Adjust SGST rate if needed\n        # cgst_rate = gst_rate / 2  # Adjust CGST rate if needed\n\n        # # Calculate GST amounts\n        # igst_amount = (item_amount * igst_rate / 100) if igst_rate else 0\n        # sgst_amount = (item_amount * sgst_rate / 100) if sgst_rate else 0\n        # cgst_amount = (item_amount * cgst_rate / 100) if cgst_rate else 0\n\n        # Store GST amounts in custom fields\n        # item.igst_amount = igst_amount\n        # item.sgst_amount = sgst_amount\n        # item.cgst_amount = cgst_amount\n        # doc.custom_gstn_value = igst_amount + sgst_amount + cgst_amount\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-03-05 11:44:29.590966",
  "module": "",
  "name": "Purchase Invoice goods and taxation value calculation",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "gst_5__ot = 0\ngst_12__ot = 0\ngst_18__ot = 0\ngst_28__ot = 0\n\ngoods_value_5 = 0\ngoods_value_12 = 0\ngoods_value_18 = 0\ngoods_value_28 = 0\nfor item in doc.items:\n    # frappe.throw(str(item.item.custom_gstn_value));\n    \n    if item.item_tax_template == \"GST 5% - OT\" :\n        # frappe.throw(str(item.custom_gstn_value));\n        gst_5__ot = gst_5__ot + float(item.custom_gstn_value or 0)\n        # frappe.throw(str(gst_5__ot));\n        goods_value_5 = goods_value_5 + float(item.amount or 0)\n    elif item.item_tax_template == \"GST 12% - OT\" :\n        gst_12__ot = gst_12__ot + float(item.custom_gstn_value or 0)\n        goods_value_12 = goods_value_12 + float(item.amount or 0)\n    elif item.item_tax_template == \"GST 18% - OT\" :\n        gst_18__ot = gst_18__ot + float(item.custom_gstn_value or 0)\n        goods_value_18 = goods_value_18 + float(item.amount or 0)\n    elif item.item_tax_template == \"GST 28% - OT\" :\n        gst_28__ot = gst_28__ot + float(item.custom_gstn_value or 0)\n        goods_value_28 = goods_value_28 + float(item.amount or 0)\n        \n    doc.custom_gst_5__ot = gst_5__ot\n    doc.custom_gst_12__ot = gst_12__ot\n    doc.custom_gst_18__ot = gst_18__ot\n    doc.custom_gst_28__ot = gst_28__ot\n\n    doc.custom_5_goods_value = goods_value_5\n    doc.custom_12_goods_value = goods_value_12\n    doc.custom_18_goods_value = goods_value_18\n    doc.custom_28_goods_value = goods_value_28\n    \n    \n    \n\n    \n\n\n    \n        # Example GST rates; adjust according to your needs\n        # gst_rate = item.gst_rate or 0\n        # item_amount = item.amount or 0\n        # igst_rate = 0  # Replace with actual IGST rate if needed\n        # sgst_rate = gst_rate / 2  # Adjust SGST rate if needed\n        # cgst_rate = gst_rate / 2  # Adjust CGST rate if needed\n\n        # # Calculate GST amounts\n        # igst_amount = (item_amount * igst_rate / 100) if igst_rate else 0\n        # sgst_amount = (item_amount * sgst_rate / 100) if sgst_rate else 0\n        # cgst_amount = (item_amount * cgst_rate / 100) if cgst_rate else 0\n\n        # Store GST amounts in custom fields\n        # item.igst_amount = igst_amount\n        # item.sgst_amount = sgst_amount\n        # item.cgst_amount = cgst_amount\n        # doc.custom_gstn_value = igst_amount + sgst_amount + cgst_amount\n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Submit",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-25 23:33:10.813434",
  "module": "o2o ErpNext",
  "name": "Purchase_receipt_invoice_update",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Invoice",
  "script": "purchase_receipt_name = \"\"\nfor item in doc.items:\n    # frappe.throw(str(item.item.custom_gstn_value));\n    if purchase_receipt_name == \"\":\n        if item.purchase_receipt :\n            purchase_receipt_name = item.purchase_receipt\n\nreceipt_doc1 = {}\nif purchase_receipt_name :\n    receipt_doc = frappe.get_doc(\"Purchase Receipt\", purchase_receipt_name)\n    update_data = {\n        \"custom_invoice_number\": doc.name,\n        \"custom_invoice_date\": doc.posting_date,\n        # Add any other fields you want to update\n    }\n    # receipt_doc.custom_invoice_number = doc.name  # Update custom field\n    # receipt_doc.custom_invoice_date = doc.posting_date  # Update custom field\n    receipt_doc.update(update_data)  # Save the changes\n    receipt_doc.save()\n# frappe.throw(str(purchase_receipt_name));\n    \n    \n    \n    \n    \n    \n\n    \n\n\n    \n        ",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-05-17 15:01:19.555671",
  "module": "o2o ErpNext",
  "name": "copy 1",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Purchase Order",
  "script": "if doc.items:\n    for item in doc.items:\n        frappe.msgprint(f\"{doc.name}\")\n        doc.append('custom_purchasing_details_original', {\n            'po_no': doc.name\n        })\n\n",
  "script_type": "DocType Event"
 }
]